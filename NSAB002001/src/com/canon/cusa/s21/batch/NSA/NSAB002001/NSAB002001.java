/*
 * <pre>Copyright (c) 2013 Canon USA Inc. All rights reserved.</pre>
 */
package com.canon.cusa.s21.batch.NSA.NSAB002001;

import static com.canon.cusa.s21.framework.ZYP.common.ZYPCommonFunc.hasValue;
import static com.canon.cusa.s21.framework.ZYP.common.ZYPConstant.FLG_OFF_N;
import static com.canon.cusa.s21.framework.ZYP.common.ZYPConstant.FLG_ON_Y;
import static com.canon.cusa.s21.framework.ZYP.common.ZYPEZDItemValueSetter.setValue;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import parts.common.EZDMessageInfo;
import parts.common.EZDMsg;
import parts.common.EZDTMsg;
import parts.dbcommon.EZDTBLAccessor;
import business.db.ACCT_DLY_ACTL_EXCH_RATESTMsg;
import business.db.ADDL_CHRG_INV_TPTMsg;
import business.db.BILL_TO_CUSTTMsg;
import business.db.BILL_TO_CUSTTMsgArray;
import business.db.BLLG_CYCLETMsg;
import business.db.CCYTMsg;
import business.db.CNTYTMsg;
import business.db.CONTR_ADDL_CHRG_BLLG_TRKTMsg;
import business.db.CONTR_BASE_BLLG_TRKTMsg;
import business.db.CONTR_BLLG_ALLOC_TRKTMsg;
import business.db.CONTR_BLLG_TRKTMsg;
import business.db.CONTR_MTR_BLLG_TRKTMsg;
import business.db.CONTR_XS_MTR_BLLG_TRKTMsg;
import business.db.FRT_CHRG_REPL_INFOTMsg;
import business.db.FRT_CHRG_REPL_DTLTMsg;
import business.db.DS_CONTRTMsg;
import business.db.DS_CONTR_ADDL_CHRGTMsg;
import business.db.DS_CONTR_BLLG_MTRTMsg;
import business.db.DS_CONTR_BLLG_MTR_USEDTMsg;
import business.db.DS_CONTR_BLLG_SCHDTMsg;
import business.db.DS_CONTR_BLLG_SCHD_SMRYTMsg;
import business.db.DS_CONTR_CLSTMsg;
import business.db.DS_CONTR_DTLTMsg;
import business.db.DS_CONTR_DTL_STS_VTMsg;
import business.db.DS_CONTR_DTL_STS_VTMsgArray;
import business.db.DS_CONTR_DTL_TPTMsg;
import business.db.DS_CONTR_PRC_EFF_STS_VTMsg;
import business.db.DS_CONTR_PRC_EFF_STS_VTMsgArray;
import business.db.DS_CONTR_STS_VTMsg;
import business.db.DS_CONTR_STS_VTMsgArray;
import business.db.DS_INV_TGTR_TPTMsg;
import business.db.DS_INV_TPTMsg;
import business.db.GLBL_CMPYTMsg;
import business.db.MDSETMsg;
import business.db.PMT_TERMTMsg;
import business.db.PMT_TERM_CASH_DISCTMsg;
import business.db.REM_TOTMsg;
import business.db.REM_TOTMsgArray;
import business.db.SELL_TO_CUSTTMsg;
import business.db.SELL_TO_CUSTTMsgArray;
import business.db.SHIP_TO_CUSTTMsg;
import business.db.SHIP_TO_CUSTTMsgArray;
import business.db.SVC_CONFIG_MSTRTMsg;
import business.db.SVC_CONTR_ADDL_CHRG_BLLGTMsg;
import business.db.SVC_CONTR_BASE_BLLGTMsg;
import business.db.SVC_CONTR_BASE_BLLGTMsgArray;
import business.db.SVC_CONTR_BLLGTMsg;
import business.db.SVC_CONTR_BLLG_ALLOCTMsg;
import business.db.SVC_CONTR_BLLG_ALLOCTMsgArray;
import business.db.SVC_CONTR_MTR_BLLGTMsg;
import business.db.SVC_CONTR_MTR_BLLGTMsgArray;
import business.db.SVC_CONTR_XS_MTR_BLLGTMsg;
import business.db.SVC_CONTR_XS_MTR_BLLGTMsgArray;
import business.db.SVC_CR_REBILTMsg;
import business.db.SVC_CR_REBIL_DTLTMsg;
import business.db.SVC_INVTMsg;
import business.db.SVC_INVTMsgArray;
import business.db.SVC_INV_CHRG_TPTMsg;
import business.db.SVC_INV_LINETMsg;
import business.db.SVC_INV_LINETMsgArray;
import business.db.SVC_INV_LINE_ADDL_CHRGTMsg;
import business.db.SVC_INV_LINE_ADDL_CHRGTMsgArray;
import business.db.SVC_INV_LINE_ALLOCTMsg;
import business.db.SVC_INV_LINE_ALLOCTMsgArray;
import business.db.SVC_INV_LINE_MTRTMsg;
import business.db.SVC_INV_LINE_MTRTMsgArray;
import business.db.SVC_INV_LINE_XS_MTRTMsg;
import business.db.SVC_INV_LINE_XS_MTRTMsgArray;
import business.db.SVC_MACH_MSTRTMsg;
import business.db.SVC_PHYS_MTR_READTMsg;
import business.parts.NMZC610001PMsg;
import business.parts.NSZC053001PMsg;

import com.canon.cusa.s21.api.NMZ.NMZC610001.NMZC610001;
import com.canon.cusa.s21.api.NMZ.NMZC610001.constant.NMZC610001Constant;
import com.canon.cusa.s21.api.NSZ.NSZC053001.NSZC053001;
import com.canon.cusa.s21.api.NSZ.NSZC053001.constant.NSZC053001Constant;
import com.canon.cusa.s21.batch.NSA.NSAB087001.constant.NSAB087001Constant;
import com.canon.cusa.s21.common.NLC.NLCC001001.TRX_RSN;
import com.canon.cusa.s21.common.NSX.NSXC001001.NSXC001001CalcDate;
import com.canon.cusa.s21.common.NSX.NSXC001001.NSXC001001ContrValidation;
import com.canon.cusa.s21.common.NSX.NSXC001001.constant.DS_CONTR_CTRL_STS;
import com.canon.cusa.s21.common.NSX.NSXC001001.constant.SVC_COV_FEAT;
import com.canon.cusa.s21.common.NSX.NSXC003001.NSXC003001Exchange;
import com.canon.cusa.s21.common.NSX.NSXC004001.GetDefCoaTrxCdForOutListInfoBean;
import com.canon.cusa.s21.common.NSX.NSXC004001.GetDefCoaTrxCdInfoBean;
import com.canon.cusa.s21.common.NSX.NSXC004001.NSXC004001GetDefCoaTrxCd;
import com.canon.cusa.s21.framework.ZYP.calendar.ZYPDateUtil;
import com.canon.cusa.s21.framework.ZYP.common.ZYPCommonFunc;
import com.canon.cusa.s21.framework.ZYP.common.ZYPConstant;
import com.canon.cusa.s21.framework.ZYP.common.ZYPEZDItemValueSetter;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.ADDL_CHRG_INV_TP;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.BLLG_CPLT_STS;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.BLLG_CYCLE;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.BLLG_TMG_TP;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.CFS_LINK_STS;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.CNTR_RESET_TP;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.CONTR_PRC_ALLOC_TP;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.CUST_INV_SRC;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.DEF_INV_GRP;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.DS_BLLG_SCHD_STS;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.DS_BLLG_SCHD_TP;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.DS_CONTR_CATG;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.DS_CONTR_DTL_STS;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.DS_CONTR_DTL_TP;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.DS_CONTR_EDI;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.DS_INV_TGTR_TP;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.DS_INV_TP;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.DS_MTR_READ_TP_GRP;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.DS_ORD_CATG;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.DS_ORD_TP;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.FRT_CHRG_REPL_STS;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.INV_LINE_SPL_TP;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.INV_TP;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.PMT_TERM_CASH_DISC;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.RGTN_STS;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.SVC_CR_REBIL_STS;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.SVC_INV_CHRG_TP;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.SVC_INV_LINE_TP;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.SVC_INV_SRC_TP;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.SVC_INV_STS;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.SVC_MACH_MSTR_STS;
import com.canon.cusa.s21.framework.ZYP.constant.cdtable.TRX;
import com.canon.cusa.s21.framework.ZYP.dataaccess.ZYPCodeDataUtil;
import com.canon.cusa.s21.framework.ZYP.dataaccess.ZYPOracleSeqAccessor;
import com.canon.cusa.s21.framework.ZYP.dataaccess.ZYPOracleSeqConstant;
import com.canon.cusa.s21.framework.api.S21ApiUtil;
import com.canon.cusa.s21.framework.api.S21ApiInterface.ONBATCH_TYPE;
import com.canon.cusa.s21.framework.batch.S21BatchMain;
import com.canon.cusa.s21.framework.common.collections.S21LRUMap;
import com.canon.cusa.s21.framework.common.db.S21CacheTBLAccessor;
import com.canon.cusa.s21.framework.common.db.S21FastTBLAccessor;
import com.canon.cusa.s21.framework.dao.ssm.ezd.client.S21SsmBatchClient;
import com.canon.cusa.s21.framework.dao.ssm.ezd.client.S21SsmLowLevelCodingClient;
import com.canon.cusa.s21.framework.internal.codetable.S21CodeTableAccessor;
import com.canon.cusa.s21.framework.log.S21AbendException;
import com.canon.cusa.s21.framework.log.S21InfoLogOutput;
import com.canon.cusa.s21.framework.log.S21MessageFunc;
import com.canon.cusa.s21.framework.mail.S21Mail;
import com.canon.cusa.s21.framework.mail.S21MailAddress;
import com.canon.cusa.s21.framework.mail.S21MailGroup;
import com.canon.cusa.s21.framework.mail.S21MailTemplate;

/**
 *<pre>
 * Date         Company         Name            Create/Update   Defect No
 * ----------------------------------------------------------------------
 * 2013/08/06   SRAA            N.Otsuji        Create          N/A
 * 2013/09/17   SRAA            H.Yanada        Update          2379
 * 2013/09/19   SRAA            H.Yanada        Update          2415
 * 2013/09/19   SRAA            H.Yanada        Update          2420
 * 2013/09/24   SRAA            H.Yanada        Update          2302
 * 2013/09/25   SRAA            H.Yanada        Update          2417
 * 2013/10/17   SRAA            H.Yanada        Update          2536
 * 2013/10/25   SRAA            H.Yanada        Update          2848
 * 2013/10/30   SRAA            H.Yanada        Update          2973
 * 2013/11/12   SRAA            H.Yanada        Update          3032
 * 12/10/2013   Fujitsu         S.Nakai         Update          QC2685
 * 12/16/2013   Fujitsu         S.Nakai         Update          QC3246
 * 01/13/2016   Hitachi         T.Aoyagi        Update          CSA-Update
 * 02/04/2016   Hitachi         K.Kishimoto     Update          QC#3947
 * 02/04/2016   Hitachi         K.Kishimoto     Update          QC#4112
 * 2016/03/15   Hitachi         T.Aoyagi        Update          QC#3818
 * 2016/03/15   Hitachi         T.Aoyagi        Update          QC#5492
 * 2016/03/17   Hitachi         K.Kishimoto     Update          QC#4166
 * 2016/03/18   Hitachi         T.Kanasaka      Update          QC#5720
 * 03/23/2016   Hitachi         K.Kishimoto     Update          QC#5863
 * 03/25/2016   Hitachi         T.Kanasaka      Update          QC#5864
 * 03/25/2016   Hitachi         K.Kishimoto     Update          QC#5879
 * 03/29/2016   Hitachi         T.Kanasaka      Update          QC#5863
 * 03/29/2016   Hitachi         K.Kishimoto     Update          QC#5993
 * 03/29/2016   Hitachi         K.Kishimoto     Update          QC#5884
 * 04/04/2016   Hitachi         T.Kanasaka      Update          QC#6492
 * 04/06/2016   Hitachi         T.Kanasaka      Update          QC#6625
 * 04/07/2016   Hitachi         T.Kanasaka      Update          QC#6585
 * 04/08/2016   Hitachi         T.Aoyagi        Update          QC#6762
 * 04/11/2016   Hitachi         T.Aoyagi        Update          QC#6510
 * 04/12/2016   Hitachi         T.Aoyagi        Update          QC#6829
 * 2016/04/15   Hitachi         T.Kanasaka      Update          QC#3985
 * 2016/04/25   Hitachi         T.Kanasaka      Update          QC#7244
 * 2016/04/28   Hitachi         T.Kanasaka      Update          QC#7244
 * 2016/05/11   Hitachi         T.Kanasaka      Update          QC#7764
 * 2016/05/12   Hitachi         O.Okuma         Update          QC#8107
 * 2016/05/25   Hitachi         T.Kanasaka      Update          QC#7636,QC#8335,QC#8591,QC#8609,QC#8656
 * 2016/05/27   Hitachi         T.Kanasaka      Update          QC#8335
 * 2016/06/15   Hitachi         T.Kanasaka      Update          QC#9869
 * 2016/06/16   Hitachi         T.Kanasaka      Update          QC#7636
 * 2016/06/20   Hitachi         T.Aoyagi        Update          QC#9907
 * 2016/06/21   Hitachi         T.Kanasaka      Update          QC#10584
 * 2016/06/24   Hitachi         T.Kanasaka      Update          QC#10585
 * 2016/06/27   Hitachi         T.Kanasaka      Update          QC#8293
 * 2016/07/05   Hitachi         T.Kanasaka      Update          QC#9438
 * 2016/07/07   Hitachi         T.Kanasaka      Update          QC#9438
 * 2016/07/08   Hitachi         T.Kanasaka      Update          QC#8293
 * 2016/07/27   Hitachi         T.Aoyagi        Update          QC#10390
 * 2016/08/08   Hitachi         K.Kishimoto     Update          QC#8293
 * 2016/08/22   Hitachi         K.Kishimoto     Update          QC#13533
 * 2016/08/26   Hitachi         T.Tomita        Update          QC#13857
 * 2016/08/30   Hitachi         T.Kanasaka      Update          QC#13706
 * 2016/08/31   Hitachi         T.Kanasaka      Update          QC#13529
 * 2016/09/27   Hitachi         T.Tomita        Update          QC#10787
 * 2016/09/27   Hitachi         T.Kanasaka      Update          QC#9905
 * 2016/09/30   Hitachi         T.Kanasaka      Update          QC#14428
 * 2016/10/04   Hitachi         T.Kanasaka      Update          QC#9905
 * 2016/10/18   Hitachi         T.Kanasaka      Update          QC#13009
 * 2016/11/10   Hitachi         K.Kishimoto     Update          QC#15789
 * 2016/12/13   Hitachi         N.Arai          Update          QC#16400
 * 2016/12/26   Hitachi         K.Kishimoto     Update          QC#16646
 * 2017/01/24   Hitachi         T.Mizuki        Update          QC#16645
 * 2017/02/07   Hitachi         K.Kishimoto     Update          QC#17331
 * 2017/06/23   Hitachi         A.Kohinata      Update          QC#18699
 * 2017/06/29   Hitachi         K.Kitachi       Update          QC#19666
 * 2017/07/03   Hitachi         T.Kanasaka      Update          QC#19662
 * 2017/08/01   Hitachi         U.Kim           Update          QC#20058
 * 2017/08/07   Hitachi         M.Kidokoro      Update          QC#20073
 * 2017/08/28   Hitachi         M.Kidokoro      Update          QC#20757
 * 2017/08/29   Hitachi         M.Kidokoro      Update          QC#20079
 * 2017/09/01   Hitachi         M.Kidokoro      Update          QC#20079
 * 2017/09/05   Hitachi         M.Kidokoro      Update          QC#20079
 * 2017/09/06   Hitachi         M.Kidokoro      Update          QC#20079
 * 2017/09/08   Hitachi         M.Kidokoro      Update          QC#20983
 * 2017/09/11   Hitachi         K.Kitachi       Update          QC#20446
 * 2017/09/14   Hitachi         K.Kim           Update          QC#20040
 * 2017/09/05   Hitachi         T.Kanasaka      Update          QC#15134
 * 2017/09/27   Hitachi         T.Tomita        Update          QC#21277
 * 2017/09/27   Hitachi         K.Yamada        Update          QC#21233
 * 2017/09/28   Hitachi         M.Kidokoro      Update          QC#21286
 * 2017/10/16   Hitachi         U.Kim           Update          QC#21584
 * 2017/10/19   Hitachi         K.Kojima        Update          QC#21468,21177
 * 2017/11/08   Hitachi         K.Kishimoto     Update          QC#21286
 * 2017/11/17   Hitachi         K.Kojima        Update          QC#22653
 * 2017/11/17   Hitachi         K.Kojima        Update          QC#21918
 * 2017/11/22   Hitachi         E.Kameishi      Update          QC#19735
 * 2017/12/06   Hitachi         K.Kojima        Update          QC#22871
 * 12/26/2017   Hitachi         K.Kishimoto     Update          QC#22407
 * 2018/01/24   Hitachi         T.Tomita        Update          QC#23684 Temporarily Fixed
 * 2018/01/26   Hitachi         T.Tomita        Update          QC#23419
 * 2018/02/02   Hitachi         K.Kojima        Update          QC#22242
 * 2018/04/02   Hitachi         K.Kitachi       Update          QC#24973
 * 2018/04/02   Hitachi         K.Kojima        Update          QC#24838
 * 2018/04/12   CITS            M.Naito         Update          QC#23378
 * 2018/04/25   Hitachi         K.Kojima        Update          QC#25446
 * 2018/04/26   Hitachi         K.Kojima        Update          QC#23630
 * 2018/04/27   Hitachi         K.Kojima        Update          QC#25875
 * 2018/05/08   Hitachi         U.Kim           Update          QC#25503
 * 2018/05/08   Hitachi         K.Kitachi       Update          QC#23604
 * 2018/05/14   Hitachi         K.Kojima        Update          QC#24888
 * 2018/05/14   Hitachi         K.Kitachi       Update          QC#23541
 * 2018/05/22   Hitachi         K.Kojima        Update          QC#23302
 * 2018/06/04   Hitachi         A.Kohinata      Update          QC#26052
 * 2018/06/05   Hitachi         K.Kojima        Update          QC#21974
 * 2018/05/31   Hitachi         K.Kojima        Update          QC#23685
 * 2018/06/26   Hitachi         U.Kim           Update          QC#26703
 * 2018/06/29   Hitachi         K.Kojima        Update          QC#23685-1
 * 2018/07/03   Hitachi         K.Kojima        Update          QC#23685-1
 * 2018/07/04   Hitachi         K.Kojima        Update          QC#23685-1
 * 2018/07/05   Hitachi         A.Kohinata      Update          QC#27114
 * 2018/07/05   Hitachi         K.Kojima        Update          QC#23685-1
 * 2018/07/09   Hitachi         K.Kojima        Update          QC#23685-1
 * 2018/07/25   Hitachi         K.Kitachi       Update          QC#17068
 * 2018/08/03   Hitachi         K.Kojima        Update          QC#27510
 * 2018/08/07   Hitachi         K.Kojima        Update          QC#27510
 * 2018/08/08   Hitachi         A.Kohinata      Update          QC#27329-3
 * 2018/08/24   Hitachi         K.Kojima        Update          QC#27919
 * 2018/08/24   Hitachi         K.Kojima        Update          QC#27922
 * 2018/09/14   Hitachi         T.Tomita        Update          QC#28281
 * 2018/09/20   Hitachi         T.Tomita        Update          QC#28171
 * 2018/11/05   Hitachi         K.Kitachi       Update          QC#28627
 * 2018/11/12   Hitachi         K.Kitachi       Update          QC#29103
 * 2019/01/09   Hitachi         K.Morita        Update          QC#26928
 * 2019/01/17   Hitachi         S.Kitamura      Update          QC#29952
 * 2019/01/21   Hitachi         T.Tomita        Update          QC#26928
 * 2019/01/21   Hitachi         K.Kitachi       Update          QC#29083
 * 2019/01/24   Hitachi         T.Takeno        Update          QC#29853
 * 2019/01/25   Hitachi         T.Tomita        Update          QC#29689
 * 2019/03/11   Hitachi         K.Kim           Update          QC#30675
 * 2019/03/18   Hitachi         S.Kitamura      Update          QC#30736
 * 2019/03/28   Hitachi         K.Kim           Update          QC#30958
 * 2019/05/09   Hitachi         A.Kohinata      Update          QC#50145
 * 2019/05/10   Hitachi         K.Fujimoto      Update          QC#50296
 * 2019/07/15   Hitachi         T.Kanasaka      Update          QC#51576
 * 2019/07/17   Hitachi         T.Aoyagi        Update          QC#51576
 * 2019/07/18   Hitachi         T.Kanasaka      Update          QC#51576
 * 2019/07/18   Hitachi         T.Aoyagi        Update          QC#51576
 * 2019/09/10   Hitachi         K.Fujimoto      Update          QC#53265
 * 2019/10/09   Hitachi         K.Kim           Update          QC#54058
 * 2019/10/21   Hitachi         A.Kohinata      Update          QC#53521
 * 2019/10/29   Hitachi         K.Kitachi       Update          QC#54203
 * 2019/11/08   Hitachi         K.Kitachi       Update          QC#54368
 * 2019/12/02   Hitachi         K.Kim           Update          QC#54899
 * 2020/01/09   Hitachi         K.Kitachi       Update          QC#55173
 * 2020/02/27   Hitachi         A.Kohinata      Update          QC#56014
 * 2020/04/09   Hitachi         K.Kitachi       Update          QC#56447
 * 2021/12/10   CITS            L.Mandanas      Update          QC#58350
 * 2022/02/09   Hitachi         S.Kitamura      Update          QC#59683
 * 2022/05/16   Hitachi         K.Kitachi       Update          QC#60030
 * 2022/05/23   Hitachi         K.Kitachi       Update          QC#60054
 * 2022/06/07   Hitachi         K.Kitachi       Update          QC#60160
 * 2022/07/04   Hitachi         K.Kishimoto     Update          QC#60271
 * 2022/09/01   CITS            L.Mandanas      Update          QC#58350
 * 2022/10/06   CITS            L.Mandanas      Update          QC#58350
 * 2023/03/24   CITS            E.Sanchez       Update          QC#61325
 * 2023/04/26   CITS            R.Avelino       Update          QC#61411
 * 2023/05/22   CITS            R.Avelino       Update          QC#61411
 * 2023/08/18   Hitachi         S.Ikariya       Update          QC#61721
 * 2023/08/30   CITS            R.Kurahashi     Update          QC#61805
 * 2024/01/31   Hitachi         H.Iinuma        Update          QC#61468
 *</pre>
 */
public class NSAB002001 extends S21BatchMain {

    /**
     * An error occurred in API. @ @ @ [@]
     */
    private static final String NSZM0407E = "NSZM0407E";

    /**
     * Main unit is not found.[@]
     */
    private static final String NSAM0186E = "NSAM0186E";

    /**
     * "@" doesn't exist in the VAR_CHAR_CONST.
     */
    private static final String NSBM0069E = "NSBM0069E";

    /**
     * Please specify other than 0 for the exchange rate.
     */
    private static final String NSZM0097E = "NSZM0097E";

    /**
     * @ cannot be obtained.
     */
    private static final String NSZM0392E = "NSZM0392E";

    /**
     * Account Arithmetic Type Code is incorrect.[@]
     */
    private static final String NSZM0395E = "NSZM0395E";

// START 2016/12/13 N.Arai [QC#16400, MOD]
    /**
     * @ is not found.[@]
     */
    // private static final String NSZM0396E = "NSZM0396E";

    /**
     * It failed to register to the @ table.
     */
    private static final String NSZM0398E = "NSZM0398E";

    /**
     * It failed to update the @ table.[@]
     */
    private static final String NSZM0399E = "NSZM0399E";

    /**
     * @ is not set.[@]
     */
    private static final String NSZM0401E = "NSZM0401E";

    /**
     * The processing was skipped, because the status is @. [@]
     */
    // private static final String NSAM0411W = "NSAM0411W";

    /**
     * The processing was skipped, because Contract Header status is @. [@]
     */
    private static final String NSAM0617W = "NSAM0617W";

    /**
     * The processing was skipped, because Contract Detail status is @. [@]
     */
    private static final String NSAM0618W = "NSAM0618W";

    /**
     * The processing was skipped, because Contract Price Effective status is @. [@]
     */
    private static final String NSAM0619W = "NSAM0619W";

    /**
     * The processing was skipped, because Contract Billing Meter status is @. [@]
     */
    private static final String NSAM0620W = "NSAM0620W";

    /**
     * SVC_CONTR_BLLG is not found.[@]
     */
    private static final String NSZM1078E = "NSZM1078E";

    /**
     * DS_CONTR is not found.[@]
     */
    private static final String NSZM1079E = "NSZM1079E";

    /**
     * PMT_TERM_CASH_DISC is not found.[@]
     */
    private static final String NSZM1080E = "NSZM1080E";

    /**
     * PMT_TERM is not found.[@]
     */
    private static final String NSZM1081E = "NSZM1081E";

    /**
     * SELL_TO_CUST is not found.[@]
     */
    private static final String NSZM1082E = "NSZM1082E";

    /**
     * GLBL_CMPY is not found.[@]
     */
    private static final String NSZM1083E = "NSZM1083E";

    /**
     * CCY is not found.[@]
     */
    private static final String NSZM1084E = "NSZM1084E";

    /**
     * BILL_TO_CUST is not found.[@]
     */
    private static final String NSZM1085E = "NSZM1085E";

    /**
     * REM_TO is not found.[@]
     */
    private static final String NSZM1086E = "NSZM1086E";

    /**
     * ACCT_DLY_ACTL_EXCH_RATES is not found.[@]
     */
    private static final String NSZM1087E = "NSZM1087E";

    /**
     * SHIP_TO_CUST_CD is not found.[@]
     */
    private static final String NSZM1088E = "NSZM1088E";

    /**
     * DS_CONTR_CLS is not found.[@]
     */
    private static final String NSZM1089E = "NSZM1089E";

    /**
     * DS_INV_TP is not found.[@]
     */
    private static final String NSZM1090E = "NSZM1090E";

    /**
     * MDSE is not found.[@]
     */
    private static final String NSZM1091E = "NSZM1091E";

    /**
     * SVC_PHYS_MTR_READ is not found.[@]
     */
    private static final String NSZM1092E = "NSZM1092E";

    /**
     * Default Ship To is not found.[@]
     */
    private static final String NSZM1093E = "NSZM1093E";

    /**
     * DS_CONTR_DTL is not found.[@]
     */
    private static final String NSZM1094E = "NSZM1094E";
// END 2016/12/13 N.Arai [QC#16400, MOD]

    /**
     * The processing was skipped, because the date of @ does not exist. [@]
     */
    private static final String NSAM0412W = "NSAM0412W";

    /**
     * Failed to delete "@".
     */
    private static final String NSAM0033E = "NSAM0033E";

    /**
     * Allocation Information cannot be found. DS_CONTR_DTL_PK[@],SVC_CONTR_BLLG_PK[@]
     */
    private static final String NSAM0610E = "NSAM0610E";

    // START 2018/11/05 K.Kitachi [QC#28627, ADD]
    /**
     * The processing was skipped, because linked contract status is @. [Link#@]
     */
    private static final String NSAM0739W = "NSAM0739W";
    // END 2018/11/05 K.Kitachi [QC#28627, ADD]

    // START 2019/03/18 S.Kitamura [QC#30736,ADD]
    /**
     *  This job is abended because today is month end date.
     */
    public static final String NSAM0747E = "NSAM0747E";
    // END 2019/03/18 S.Kitamura [QC#30736,ADD]

    // START 2019/11/08 K.Kitachi [QC#54368, ADD]
    /**
     * The processing was skipped, because PO requiered but no PO includes the billing period(@-@). [@]
     */
    public static final String NSAM0751W = "NSAM0751W";

    /**
     * The processing was skipped, because linked contract PO requiered but no PO includes the billing period. [Link#@]
     */
    public static final String NSAM0753W = "NSAM0753W";
    // END 2019/11/08 K.Kitachi [QC#54368, ADD]

    // START 2023/04/26 R.Avelino [QC#61411, ADD]
    /**
     * Bill To Code is inactive. Please activate Bill To Code. [@]
     */
    public static final String NSAM0775E = "NSAM0775E";

    /**
     * Ship To Code is inactive. Please activate Ship To Code. [@]
     */
    public static final String NSAM0776E = "NSAM0776E";
    // END 2023/04/26 R.Avelino [QC#61411, ADD]

    /**
     * ACCT_ARTH_TP: Multiply
     */
    private static final String ACCT_ARTH_TP_MULTIPLY = "*";

    /**
     * ACCT_ARTH_TP: Divide
     */
    private static final String ACCT_ARTH_TP_DIVIDE = "/";

    /**
     * SVC_INV_LINE_NUM format
     */
    private static final String SVC_INV_LINE_NUM_FMT = "%1$05d";

    /**
     * SVC_INV_LINE_ALLOC_NUM format
     */
    private static final String SVC_INV_LINE_ALLOC_NUM_FMT = "%1$03d";

    /**
     * Processed
     */
    private static final String PROCESSED_2 = "2";

    // START 2018/05/31 K.Kojima [QC#23685,DEL]
    // /**
    //  * Process Mode Invoice/Credit
    //  */
    // private static final String PROC_MODE_INVOICE = "Q";
    // END 2018/05/31 K.Kojima [QC#23685,DEL]

    /**
     * int 100
     */
    private static final int INT_100 = 100;

    /**
     * Date Format: Default Effective Through Date
     */
    public static final String DEF_EFF_THRU_DT = "29991231";

    // START 2019/03/28 [QC#30958,ADD]
    /** DS_CONTR_MACH_LVL_NUM:1 */
    private static final String DS_CONTR_MACH_LVL_NUM_1 = "1";

    /** DS_CONTR_MACH_LVL_NUM:2 */
    private static final String DS_CONTR_MACH_LVL_NUM_2 = "2";

    /** DS_CONTR_MACH_LVL_NUM:3 */
    private static final String DS_CONTR_MACH_LVL_NUM_3 = "3";
    // END 2019/03/28 [QC#30958,ADD]

    /**
     * Cache
     */
    private final S21LRUMap<String, EZDTMsg> cache = new S21LRUMap<String, EZDTMsg>(384);

    /**
     * Batch client
     */
    private S21SsmBatchClient ssmBatClnt = null;

    /**
     * Client for prepared statement
     */
    private S21SsmLowLevelCodingClient ssmLlcClnt = null;

    /**
     * Normal count
     */
    private int normCnt = 0;

    /**
     * Message list
     */
    private Map<String, List<EZDMessageInfo>> regSvcInvMsg = null;

    /**
     * Message list
     */
    private Map<String, List<EZDMessageInfo>> fleetSvcInvMsg = null;

    /**
     * Message list
     */
    private Map<String, List<EZDMessageInfo>> aggSvcInvMsg = null;

    /**
     * Termination code
     */
    private TERM_CD termCd = null;

    /**
     * Global company code
     */
    private String glblCmpyCd = "";

    /**
     * Sales Date
     */
    private String slsDt = "";

    /**
     * VAR_CHAR_CONST: NSAB0020_BLLG_CPLT_STS_CD
     */
    private String bllgCpltStsCd = "";

    // Add Start 03/29/2016 <QC#5863>
    /**
     * VAR_CHAR_CONST: SPCL_FLT_MDSE_CD
     */
    private String spclFltMdseCd = "";

    /**
     * Mdse Name for Fleet Line
     */
    private String spclFltMdseNm = "";
    // Add End 03/29/2016 <QC#5863>

    // add start 2016/07/27 T.Aoyagi QC#10390
    /**
     * Credit and Rebill Credit Order Payment Term Code Credit Card
     */
    private String crPmtTermCc = "";

    /**
     * Credit and Rebill Rebill Order Payment Term Code Credit Card
     */
    private String rebilPmtTermCc = "";

    /**
     * Credit and Rebill Credit Order Payment Term Code Except Credit Card
     */
    private String crPmtTermExCc = "";
    // add end 2016/07/27 T.Aoyagi QC#10390

    //Add Start 03/17/2016 <QC#4166>
    /**
     * Target Status
     */
    private String[] bllgCpltStsCdList = null;

    /**
     * Split string
     */
    private static String splitStr = ",";
    //Add End   03/17/2016 <QC#4166>

    /** User Variable1 */
    private String usrVar1;

    /** Multi Count */
    private BigDecimal multiCnt;

    /** CCY */
    private String ccyCode = "";

    // START 2016/06/20 T.Aoyagi [QC#9907, ADD]
    /** Invoice Line Split Type Map */
    private Map<BigDecimal, String> invLineSplTpMap = null;
    // END 2016/06/20 T.Aoyagi [QC#9907, ADD]

    // START 2018/06/29 K.Kojima [QC#23685-1,ADD]
    private NSXC003001Exchange nsxc003001Exchange = null;
    // END 2018/06/29 K.Kojima [QC#23685-1,ADD]

    // START 2018/07/04 K.Kojima [QC#23685-1,ADD]
    /** Cache NSXC004001 ContrInfo */
    private S21LRUMap<BigDecimal, Map<String, Object>> nsxc004001ContrInfoCache = new S21LRUMap<BigDecimal, Map<String,Object>>();

    /** Cache NSXC004001 DS_CONTR_DTLTMsg */
    private S21LRUMap<BigDecimal, DS_CONTR_DTLTMsg> nsxc004001DsContrDtlTMsgCache = new S21LRUMap<BigDecimal, DS_CONTR_DTLTMsg>();

    /** Cache AjeInvLineAllocCdForBase */
    private S21LRUMap<String, String> nsxc004001AjeInvLineAllocCdForBaseCache = new S21LRUMap<String, String>();

    /** Cache AjeInvLineAllocCdForMtr */
    private S21LRUMap<String, String> nsxc004001AjeInvLineAllocCdForMtrCache = new S21LRUMap<String, String>();

    /** Cache AjeInvLineAllocCdForAddl */
    private S21LRUMap<String, String> nsxc004001AjeInvLineAllocCdForAddlCache = new S21LRUMap<String, String>();
    // END 2018/07/04 K.Kojima [QC#23685-1,ADD]

    // START 2019/03/18 S.Kitamura [QC#30736,ADD]
    /** Month End Mode for NSBB0100 */
    private static final String NSAB0020_MONTH_END_MODE = "NSAB0020_MONTH_END_MODE";
    // END 2019/03/18 S.Kitamura [QC#30736,ADD]

    // START 2019/10/29 K.Kitachi [QC#54203, ADD]
    /** Service Machine Master Status at Customer */
    private List<String> svcMachMstrStsCust = new ArrayList<String>();
    // END 2019/10/29 K.Kitachi [QC#54203, ADD]
    // START 2022/02/09 S.Kitamura [QC#59683, ADD]
    private Map<String, String> defInvGrpCdMap = new HashMap<String, String>();
    // END 2022/02/09 S.Kitamura [QC#59683, ADD]

    // START 2024/01/31 H.Iinuma [QC#61468,ADD]
    /** Merchandise Code for NSAB0020 */
    private static final String FRT_TAX_DUMMY_MDSE_CD = "FRT_TAX_DUMMY_MDSE_CD";

    /** Unit Of Measure Code for NSAB0020 */
    private static final String QTY_BASED_FEE_UOM = "QTY_BASED_FEE_UOM";
    // END 2024/01/31 H.Iinuma [QC#61468,ADD]

    /**
     * @param args String[]
     */
    public static void main(String[] args) {
        new NSAB002001().executeBatch(NSAB002001.class.getSimpleName());
    }

    @Override
    protected void initRoutine() {

        normCnt = 0;

        regSvcInvMsg = new LinkedHashMap<String, List<EZDMessageInfo>>();
        fleetSvcInvMsg = new LinkedHashMap<String, List<EZDMessageInfo>>();
        aggSvcInvMsg = new LinkedHashMap<String, List<EZDMessageInfo>>();

        termCd = TERM_CD.NORMAL_END;

        ssmLlcClnt = S21SsmLowLevelCodingClient.getClient(getClass());
        ssmBatClnt = S21SsmBatchClient.getClient(getClass());

        glblCmpyCd = getGlobalCompanyCode();
        if (!ZYPCommonFunc.hasValue(glblCmpyCd)) {
            throw new S21AbendException(NSZM0392E, new String[] {"GLBL_CMPY_CD" });
        }

        slsDt = ZYPDateUtil.getSalesDate(glblCmpyCd, NSAB002001.class.getSimpleName());
        if (!ZYPCommonFunc.hasValue(slsDt)) {
            throw new S21AbendException(NSZM0392E, new String[] {"SLS_DT" });
        }

        bllgCpltStsCd = ZYPCodeDataUtil.getVarCharConstValue("NSAB0020_BLLG_CPLT_STS_CD", glblCmpyCd);
        if (!ZYPCommonFunc.hasValue(bllgCpltStsCd)) {
            throw new S21AbendException(NSBM0069E, new String[] {"NSAB0020_BLLG_CPLT_STS_CD" });
        }

        // Add Start 03/29/2016 <QC#5863>
        spclFltMdseCd = ZYPCodeDataUtil.getVarCharConstValue("SPCL_FLT_MDSE_CD", glblCmpyCd);
        if (!ZYPCommonFunc.hasValue(spclFltMdseCd)) {
            throw new S21AbendException(NSBM0069E, new String[] {"SPCL_FLT_MDSE_CD" });
        }
        MDSETMsg mdseTMsg = getMdse(spclFltMdseCd);
        if (mdseTMsg != null) {
            spclFltMdseNm = mdseTMsg.mdseNm.getValue();
        }
        // Add End 03/29/2016 <QC#5863>

        // add start 2016/07/27 T.Aoyagi QC#10390
        crPmtTermCc = ZYPCodeDataUtil.getVarCharConstValue("CR_REBIL_CR_ORD_PMT_TERM_CC", glblCmpyCd);
        if (!ZYPCommonFunc.hasValue(crPmtTermCc)) {
            throw new S21AbendException(NSBM0069E, new String[] {"CR_REBIL_CR_ORD_PMT_TERM_CC" });
        }

        rebilPmtTermCc = ZYPCodeDataUtil.getVarCharConstValue("CR_REBIL_REBIL_ORD_PMT_TERM_CC", glblCmpyCd);
        if (!ZYPCommonFunc.hasValue(rebilPmtTermCc)) {
            throw new S21AbendException(NSBM0069E, new String[] {"CR_REBIL_REBIL_ORD_PMT_TERM_CC" });
        }

        crPmtTermExCc = ZYPCodeDataUtil.getVarCharConstValue("CR_REBIL_CR_ORD_PMT_TERM_EX_CC", glblCmpyCd);
        if (!ZYPCommonFunc.hasValue(crPmtTermExCc)) {
            throw new S21AbendException(NSBM0069E, new String[] {"CR_REBIL_CR_ORD_PMT_TERM_EX_CC" });
        }
        // add end 2016/07/27 T.Aoyagi QC#10390

        //Add Start 03/17/2016 <QC#4166>
        bllgCpltStsCdList = bllgCpltStsCd.split(splitStr);
        //Add End   03/17/2016 <QC#4166>

        this.usrVar1 = getUserVariable1();
        if (!hasValue(usrVar1)) {
            throw new S21AbendException(NSZM0392E, new String[] {"User Variable1"});
        }

        this.multiCnt = ZYPCodeDataUtil.getNumConstValue("MULTI_SVC_INV_CALC_CNT", glblCmpyCd);
        if (!ZYPCommonFunc.hasValue(this.multiCnt)) {
            this.multiCnt = BigDecimal.ONE;
        }

        // START 2018/06/29 K.Kojima [QC#23685-1,ADD]
        this.nsxc003001Exchange = new NSXC003001Exchange();
        // END 2018/06/29 K.Kojima [QC#23685-1,ADD]

        // START 2019/10/29 K.Kitachi [QC#54203, ADD]
        this.svcMachMstrStsCust.add(SVC_MACH_MSTR_STS.WAITING_FOR_INSTALLATION);
        this.svcMachMstrStsCust.add(SVC_MACH_MSTR_STS.INSTALLED);
        this.svcMachMstrStsCust.add(SVC_MACH_MSTR_STS.WAITING_FOR_REMOVAL);
        // END 2019/10/29 K.Kitachi [QC#54203, ADD]
    }

    @Override
    protected void mainRoutine() {
        createRegSvcInv();
        createFleetSvcInv();
        createAggSvcInv();
        // START 2020/01/09 K.Kitachi [QC#55173, ADD]
        creditProcess();
        // END 2020/01/09 K.Kitachi [QC#55173, ADD]
    }

    /**
     * Create Service Invoice For Regular
     */
    protected void createRegSvcInv() {

        int svcInvCnt = 0;

        PreparedStatement ps = null;
        ResultSet rs = null;
        try {

            ps = getRegSvcInvKey();
            rs = ps.executeQuery();

            SVC_INV: while (rs.next()) {

                BigDecimal dsContrPk = rs.getBigDecimal("DS_CONTR_PK");

                // QC2536 start
                String baseBllgFlg = rs.getString("BASE_BLLG_FLG");
                String mtrBllgFlg = rs.getString("MTR_BLLG_FLG");
                String invSeptBaseUsgFlg = rs.getString("INV_SEPT_BASE_USG_FLG");
                // QC2536 end
                // START 2022/02/09 S.Kitamura [QC#59683, ADD]
                String dsInvTgtrTpCd = rs.getString("DS_INV_TGTR_TP_CD");
                String prntDsInvTgtrTpCd = rs.getString("PRNT_DS_INV_TGTR_TP_CD");
                String prntInvSeptBaseUsgFlg = rs.getString("PRNT_INV_SEPT_BASE_USG_FLG");
                if (hasValue(prntDsInvTgtrTpCd)) {
                    dsInvTgtrTpCd = prntDsInvTgtrTpCd;
                    invSeptBaseUsgFlg = prntInvSeptBaseUsgFlg;
                }
                String allLineTogetherFlg = getAllLineTgtrFlg(dsInvTgtrTpCd);
                // END 2022/02/09 S.Kitamura [QC#59683, ADD]
                // QC2536 start
                // String svcInvKey = createRegSvcInvKey(dsContrPk,
                // svcConfigMstrPk);
                // START 04/12/2016 T.Aoyagi [QC#6829, MOD]
                String invTpCd = rs.getString("INV_TP_CD");
                // mod start 2018/07/05 QC#27114
                BigDecimal svcCrRebilPk = rs.getBigDecimal("SVC_CR_REBIL_PK");
                //String svcInvKey = createRegSvcInvKey(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg, invTpCd);
                String svcInvKey = createRegSvcInvKey(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg, invTpCd, svcCrRebilPk);
                // mod end 2018/07/05 QC#27114
                // END 04/12/2016 T.Aoyagi [QC#6829, MOD]
                // QC2536 end

                // START 2017/09/11 K.Kitachi [QC#20446, ADD]
                // del start 2018/07/05 QC#27114
                //BigDecimal svcCrRebilPk = rs.getBigDecimal("SVC_CR_REBIL_PK");
                // del end 2018/07/05 QC#27114
                // END 2017/09/11 K.Kitachi [QC#20446, ADD]

                // QC2536 start
                // List<Map<String, Object>> dsContrDtlInfoList =
                // getRegDsContrDtlInfo(dsContrPk, svcConfigMstrPk);
                // START 04/12/2016 T.Aoyagi [QC#6829, MOD]
                // mod start 2018/07/05 QC#27114
                //List<Map<String, Object>> contrDtlInfoList = getRegDsContrDtlInfo(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg, invTpCd);
                List<Map<String, Object>> contrDtlInfoList = getRegDsContrDtlInfo(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg, invTpCd, svcCrRebilPk);
                // mod end 2018/07/05 QC#27114
                // END 04/12/2016 T.Aoyagi [QC#6829, MOD]
                // QC2536 end

                if (contrDtlInfoList.isEmpty()) {
                    Key key = new Key();
                    key.add("DS_CONTR_PK", dsContrPk);
                    key.add("SVC_CONFIG_MSTR_PK", "");
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "DS_CONTR_DTL", key.toString());
                    addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1094E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    continue SVC_INV;
                }

                // START 2018/04/02 K.Kitachi [QC#24973, ADD]
                // START 2019/10/29 K.Kitachi [QC#54203, MOD]
//                setMdlInfo(contrDtlInfoList);
                setContrDtlInfoList(contrDtlInfoList, DS_CONTR_CATG.REGULAR);
                // END 2019/10/29 K.Kitachi [QC#54203, MOD]
                // END 2018/04/02 K.Kitachi [QC#24973, ADD]

                //Add Start 05/25/2016 <QC#8591>
                // Check billable flag
                // START 2017/09/01 M.Kidokoro [QC#20079, MOD]
                // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                // START 2017/09/14 K.Kim [QC#20040, MOD]
                // if (!ZYPCommonFunc.hasValue(svcCrRebilPk) && !checkBllblFlgForRegular(dsContrPk, svcInvKey, contrDtlInfoList, DS_CONTR_CATG.REGULAR)) {
                // START 2022/02/09 S.Kitamura [QC#59683, MOD]
                // if (!ZYPCommonFunc.hasValue(svcCrRebilPk) && !checkBllblFlgForRegular(dsContrPk, svcInvKey, contrDtlInfoList, DS_CONTR_CATG.REGULAR, invTpCd)) {
                if (!ZYPCommonFunc.hasValue(svcCrRebilPk) && !checkBllblFlgForRegular(dsContrPk, svcInvKey, contrDtlInfoList, DS_CONTR_CATG.REGULAR, invTpCd, allLineTogetherFlg)) {
                // END 2022/02/09 S.Kitamura [QC#59683, MOD]                    
                // END 2017/09/14 K.Kim [QC#20040, MOD]
                // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                // END 2017/09/01 M.Kidokoro [QC#20079, MOD]
                    rollback();
                    continue SVC_INV;
                }
                //Add End   05/25/2016 <QC#8591>

                // START 2018/11/12 K.Kitachi [QC#29103, DEL]
//                // ----------------------------------------------------------------------
//                // Recalc SvcContrBllgAlloc
//                // ----------------------------------------------------------------------
//                // START 2016/06/20 T.Aoyagi [QC#9907, ADD]
//                this.invLineSplTpMap = new HashMap<BigDecimal, String>();
//                // END 2016/06/20 T.Aoyagi [QC#9907, ADD]
//                //Mod Start 05/27/2016 <QC#8335>
//                if (!recalcSvcAlloc(contrDtlInfoList, svcInvKey)) {
//                    rollback();
//                    continue SVC_INV;
//                }
                // END 2018/11/12 K.Kitachi [QC#29103, DEL]
                //Mod End   05/27/2016 <QC#8335>

                // START 2019/11/08 K.Kitachi [QC#54368, ADD]
                List<String> skipGrpSvcInvKeyList = new ArrayList<String>();
                // END 2019/11/08 K.Kitachi [QC#54368, ADD]
                
                // START 2022/02/09 S.Kitamura [QC#59683, MOD]
                //List<List<Map<String, Object>>> dsContrDtlGroupList = getGroupList(contrDtlInfoList);
                List<List<Map<String, Object>>> dsContrDtlGroupList = getGroupList(contrDtlInfoList, allLineTogetherFlg);
                // END 2022/02/09 S.Kitamura [QC#59683, MOD]
                
                // START 2018/05/15 K.Kojima [QC#24888,MOD]
                // for (List<Map<String, Object>> dsContrDtlInfoList : dsContrDtlGroupList) {
                GRP_SVC_INV: for (List<Map<String, Object>> dsContrDtlInfoList : dsContrDtlGroupList) {
                // END 2018/05/15 K.Kojima [QC#24888,MOD]

                    // START 2018/11/12 K.Kitachi [QC#29103, ADD]
                    // ----------------------------------------------------------------------
                    // Recalc SvcContrBllgAlloc
                    // ----------------------------------------------------------------------
                    this.invLineSplTpMap = new HashMap<BigDecimal, String>();
                    if (!recalcSvcAlloc(dsContrDtlInfoList, svcInvKey)) {
                        rollback();
                        continue GRP_SVC_INV;
                    }
                    // END 2018/11/12 K.Kitachi [QC#29103, ADD]

                    // START 2017/09/08 M.Kidokoro [QC#20983, ADD]
                    boolean insertSvcInvLineFlg = false;
                    // END 2017/09/08 M.Kidokoro [QC#20983, ADD]

                    BigDecimal mainSvcContrBllgPk = (BigDecimal) dsContrDtlInfoList.get(0).get("SVC_CONTR_BLLG_PK");

                    SVC_CONTR_BLLGTMsg mainSvcContrBllgTMsg = getSvcContrBllg(mainSvcContrBllgPk);
                    if (mainSvcContrBllgTMsg == null) {
                        Key key = new Key();
                        key.add("SVC_CONTR_BLLG_PK", mainSvcContrBllgPk);
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "SVC_CONTR_BLLG", key.toString());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1078E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        rollback();
                        continue SVC_INV;
                    }

                    // 2(1) Get DS_CONTR
                    DS_CONTRTMsg dsContrTMsg = getDsContr(dsContrPk);
                    if (dsContrTMsg == null) {
                        Key key = new Key();
                        key.add("DS_CONTR_PK", dsContrPk);
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "DS_CONTR", key.toString());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1079E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        continue SVC_INV;
                    }

                    // 2(2) Get PMT_TERM_CASH_DISC
                    if (!ZYPCommonFunc.hasValue(dsContrTMsg.pmtTermCashDiscCd)) {
                        Key key = new Key();
                        key.add("DS_CONTR_PK", dsContrPk);
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "DS_CONTR.PMT_TERM_CASH_DISC_CD", key.toString());
                        continue SVC_INV;
                    }

                    // mod start 2019/05/10 K.Fujimoto QC#50296
                    PMT_TERM_CASH_DISCTMsg pmtTermCashDiscTMsg;
                    if (!hasValue(mainSvcContrBllgTMsg.svcCrRebilPk) && mainSvcContrBllgTMsg.invTpCd.getValue().equals(INV_TP.CREDIT_MEMO)) {
                        pmtTermCashDiscTMsg = getPmtTermCashDisc(PMT_TERM_CASH_DISC.BALANCE_DUE);
                    } else {
                        pmtTermCashDiscTMsg = getPmtTermCashDisc(dsContrTMsg.pmtTermCashDiscCd.getValue());
                    } 
                    // PMT_TERM_CASH_DISCTMsg pmtTermCashDiscTMsg = getPmtTermCashDisc(dsContrTMsg.pmtTermCashDiscCd.getValue());
                    // mod end 2019/05/10 K.Fujimoto QC#50296
                    if (pmtTermCashDiscTMsg == null) {
                        Key key = new Key();
                        key.add("PMT_TERM_CASH_DISC_CD", dsContrTMsg.pmtTermCashDiscCd.getValue());
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "PMT_TERM_CASH_DISC", key.toString());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1080E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        continue SVC_INV;
                    }

                    // 2(3) Get PMT_TERM
                    if (!ZYPCommonFunc.hasValue(pmtTermCashDiscTMsg.pmtTermCd)) {
                        Key key = new Key();
                        key.add("PMT_TERM_CASH_DISC_CD", dsContrTMsg.pmtTermCashDiscCd.getValue());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "PMT_TERM_CASH_DISC.PMT_TERM_CD", key.toString());
                        continue SVC_INV;
                    }

                    PMT_TERMTMsg pmtTermTMsg = getPmtTerm(pmtTermCashDiscTMsg.pmtTermCd.getValue());
                    if (pmtTermTMsg == null) {
                        Key key = new Key();
                        key.add("PMT_TERM_CD", pmtTermCashDiscTMsg.pmtTermCd.getValue());
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "PMT_TERM", key.toString());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1081E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        continue SVC_INV;
                    }

                    String invDt = slsDt;
                    String pmtTermStartDt = invDt;
                    String invDueDt = ZYPDateUtil.addDays(pmtTermStartDt, pmtTermTMsg.pmtTermAot.getValueInt());

                    // 2(4)  SELL_TO_CUST_CD
                    // Mod Start 12/26/2016 <QC#16646>
                    SELL_TO_CUSTTMsg sellToCustTMsg = getSellToCust(mainSvcContrBllgTMsg.billToCustCd.getValue());
                    if (sellToCustTMsg == null) {
                        Key key = new Key();
                        key.add("SELL_TO_CUST_CD", mainSvcContrBllgTMsg.billToCustCd.getValue());
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "SELL_TO_CUST", key.toString());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1082E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        continue SVC_INV;
                    }
                    // Mod End   12/26/2016 <QC#16646>

                    // 2(5) Get GLBL_CMPY
                    GLBL_CMPYTMsg glblCmpyTMsg = getGlblCmpy();
                    if (glblCmpyTMsg == null) {
                        Key key = new Key();
                        key.add("GLBL_CMPY_CD", glblCmpyCd);
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "GLBL_CMPY", key.toString());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1083E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        continue SVC_INV;
                    }

                    if (!ZYPCommonFunc.hasValue(glblCmpyTMsg.stdCcyCd)) {
                        Key key = new Key();
                        key.add("GLBL_CMPY_CD", glblCmpyCd);
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "GLBL_CMPY.STD_CCY_CD", key.toString());
                        continue SVC_INV;
                    }

                    if (!ZYPCommonFunc.hasValue(glblCmpyTMsg.ctryCd)) {
                        Key key = new Key();
                        key.add("GLBL_CMPY_CD", glblCmpyCd);
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "GLBL_CMPY.CTRY_CD", key.toString());
                        continue SVC_INV;
                    }

                    CCYTMsg funcCcyTMsg = getCcy(glblCmpyTMsg.stdCcyCd.getValue());
                    if (funcCcyTMsg == null) {
                        Key key = new Key();
                        key.add("CCY_CD", glblCmpyTMsg.stdCcyCd.getValue());
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "CCY", key.toString());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1084E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        continue SVC_INV;
                    }

                    BigDecimal funcCcyAftDeclPntDigitNum = funcCcyTMsg.aftDeclPntDigitNum.getValue();
                    if (!ZYPCommonFunc.hasValue(funcCcyAftDeclPntDigitNum)) {
                        Key key = new Key();
                        key.add("CCY_CD", funcCcyTMsg.ccyCd.getValue());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "CCY.AFT_DECL_PNT_DIGIT_NUM", key.toString());
                        continue SVC_INV;
                    }

                    //Del Start 02/04/2016 <QC#3947>
                    // 2(6) Get CUST_CR_PRFL, BR, CNTY
//                    CUST_CR_PRFLTMsg custCrPrflTMsg = getCustCrPrfl(sellToCustTMsg.billToCustCd.getValue());
//                    if (custCrPrflTMsg == null) {
//                        Key key = new Key();
//                        key.add("SELL_TO_CUST_CD", dsContrTMsg.sellToCustCd.getValue());
//                        key.add("BILL_TO_CUST_CD", sellToCustTMsg.billToCustCd.getValue());
//                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "CUST_CR_PRFL", key.toString());
//                        continue SVC_INV;
//                    }
//
//                    if (!ZYPCommonFunc.hasValue(custCrPrflTMsg.brCd)) {
//                        Key key = new Key();
//                        key.add("SELL_TO_CUST_CD", dsContrTMsg.sellToCustCd.getValue());
//                        key.add("BILL_TO_CUST_CD", sellToCustTMsg.billToCustCd.getValue());
//                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "CUST_CR_PRFL.BR_CD", key.toString());
//                        continue SVC_INV;
//                    }
//
//                    BRTMsg brTMsg = getBr(custCrPrflTMsg.brCd.getValue());
//                    if (brTMsg == null) {
//                        Key key = new Key();
//                        key.add("SELL_TO_CUST_CD", dsContrTMsg.sellToCustCd.getValue());
//                        key.add("BILL_TO_CUST_CD", sellToCustTMsg.billToCustCd.getValue());
//                        key.add("BR_CD", custCrPrflTMsg.brCd.getValue());
//                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "BR", key.toString());
//                        continue SVC_INV;
//                    }
//
//                    CNTYTMsg ofcCntyTMsg = null;
//                    if (ZYPCommonFunc.hasValue(brTMsg.cntyPk)) {
//                        ofcCntyTMsg = getCnty(brTMsg.cntyPk.getValue());
//                    }
                    //Del End   02/04/2016 <QC#3947>

                    // 2(7) Get BILL_TO_CUST, REM_TO
                    BILL_TO_CUSTTMsg billToCustTMsg = getBillToCustTMsg(mainSvcContrBllgTMsg.billToCustCd.getValue());
                    if (billToCustTMsg == null) {
                        Key key = new Key();
                        key.add("SELL_TO_CUST_CD", mainSvcContrBllgTMsg.dsAcctNum.getValue());
                        key.add("BILL_TO_CUST_CD", mainSvcContrBllgTMsg.billToCustCd.getValue());
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "BILL_TO_CUST", key.toString());
                        // START 2023/04/26 R.Avelino [QC#61411, MOD]
//                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1085E, key.toString());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSAM0775E, key.toString());
                        // END 2023/04/26 R.Avelino [QC#61411, MOD]
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        continue SVC_INV;
                    }

                    CNTYTMsg billToCntyTMsg = null;
                    if (ZYPCommonFunc.hasValue(billToCustTMsg.cntyPk)) {
                        billToCntyTMsg = getCnty(billToCustTMsg.cntyPk.getValue());
                    }

                    if (!ZYPCommonFunc.hasValue(billToCustTMsg.remId)) {
                        Key key = new Key();
                        key.add("SELL_TO_CUST_CD", mainSvcContrBllgTMsg.dsAcctNum.getValue());
                        key.add("BILL_TO_CUST_CD", mainSvcContrBllgTMsg.billToCustCd.getValue());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "BILL_TO_CUST.REM_ID", key.toString());
                        continue SVC_INV;
                    }

                    REM_TOTMsg remToTMsg = getRemTo(billToCustTMsg.remId.getValue());
                    if (remToTMsg == null) {
                        Key key = new Key();
                        key.add("SELL_TO_CUST_CD", dsContrTMsg.sellToCustCd.getValue());
                        key.add("REM_ID", billToCustTMsg.remId.getValue());
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "REM_TO", key.toString());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1086E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        continue SVC_INV;
                    }

                    // 2(8) Get SELL_TO_CUST, CNTY
                    CNTYTMsg sellToCntyTMsg = null;
                    if (ZYPCommonFunc.hasValue(sellToCustTMsg.cntyPk)) {
                        sellToCntyTMsg = getCnty(sellToCustTMsg.cntyPk.getValue());
                    }

                    // 2(9) Get ACCT_DLY_ACTL_EXCH_RATES
                    ACCT_DLY_ACTL_EXCH_RATESTMsg acctDlyActlExchRatesTMsg = getAcctDlyActlExchRates(dsContrTMsg.ccyCd.getValue(), slsDt);
                    if (acctDlyActlExchRatesTMsg == null) {
                        Key key = new Key();
                        key.add("CCY_CD", dsContrTMsg.ccyCd.getValue());
                        key.add("ACTL_EXCH_RATE_ENT_DT", slsDt);
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "ACCT_DLY_ACTL_EXCH_RATES", key.toString());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1087E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        continue SVC_INV;
                    }

                    if (!ZYPCommonFunc.hasValue(acctDlyActlExchRatesTMsg.actlExchRate)) {
                        Key key = new Key();
                        key.add("CCY_CD", acctDlyActlExchRatesTMsg.ccyCd.getValue());
                        key.add("ACTL_EXCH_RATE_ENT_DT", acctDlyActlExchRatesTMsg.actlExchRateEntDt.getValue());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "ACCT_DLY_ACTL_EXCH_RATES.ACTL_EXCH_RATE", key.toString());
                        continue SVC_INV;
                    }

                    if (BigDecimal.ZERO.compareTo(acctDlyActlExchRatesTMsg.actlExchRate.getValue()) >= 0) {
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0097E);
                        continue SVC_INV;
                    }

                    BigDecimal actlExchRate = acctDlyActlExchRatesTMsg.actlExchRate.getValue();

                    //Del Start 03/18/2016 <QC#5720>
//                    // 2(10) Get DS_CONTR_INV_DELY
//                    DS_CONTR_INV_DELYTMsgArray dsContrInvDelyTMsgArray = getDsContrInvDely(dsContrPk);
//                    if (dsContrInvDelyTMsgArray.length() == 0) {
//                        Key key = new Key();
//                        key.add("DS_CONTR_PK", dsContrPk);
//                        // Just a warning. Continue processing this
//                        // invoice.
//                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 2, NSZM0397W, "DS_CONTR_INV_DELY", key.toString());
//                    }
                    //Del End 03/18/2016 <QC#5720>

                    // 2(11) Get ACCT_ARTH_TP_CD
                    CCYTMsg dealCcyTMsg = getCcy(dsContrTMsg.ccyCd.getValue());
                    if (dealCcyTMsg == null) {
                        Key key = new Key();
                        key.add("CCY_CD", dsContrTMsg.ccyCd.getValue());
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "CCY", key.toString());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1084E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        continue SVC_INV;
                    }

                    String dealCcyAcctArthTpCd = dealCcyTMsg.acctArthTpCd.getValue();
                    if (!ZYPCommonFunc.hasValue(dealCcyAcctArthTpCd)) {
                        Key key = new Key();
                        key.add("CCY_CD", dealCcyTMsg.ccyCd.getValue());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "CCY.ACCT_ARTH_TP_CD", key.toString());
                        continue SVC_INV;
                    }

                    if (!ACCT_ARTH_TP_DIVIDE.equals(dealCcyAcctArthTpCd) && !ACCT_ARTH_TP_MULTIPLY.equals(dealCcyAcctArthTpCd)) {
                        Key key = new Key();
                        key.add("CCY_CD", dealCcyTMsg.ccyCd.getValue());
                        key.add("ACCT_ARTH_TP_CD", dealCcyTMsg.acctArthTpCd.getValue());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0395E, key.toString());
                        continue SVC_INV;
                    }

                    BigDecimal dealCcyAftDeclPntDigitNum = dealCcyTMsg.aftDeclPntDigitNum.getValue();
                    if (!ZYPCommonFunc.hasValue(dealCcyAftDeclPntDigitNum)) {
                        Key key = new Key();
                        key.add("CCY_CD", dealCcyTMsg.ccyCd.getValue());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "CCY.AFT_DECL_PNT_DIGIT_NUM", key.toString());
                        continue SVC_INV;
                    }

                    // 2(14) Get SVC_MACH_MSTR, DS_MDL, MDSE
                    BigDecimal svcConfigMstrPk = (BigDecimal) dsContrDtlInfoList.get(0).get("SVC_CONFIG_MSTR_PK");
                    Map<String, Object> mainUnitInfo = getMainUnitInfo(dsContrPk, svcConfigMstrPk);
                    if (mainUnitInfo == null || mainUnitInfo.isEmpty()) {
                        Key key = new Key();
                        key.add("DS_CONTR_PK", dsContrPk);
                        key.add("SVC_CONFIG_MSTR_PK", svcConfigMstrPk);
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSAM0186E, key.toString());
                        continue SVC_INV;
                    }

                    // START 2019/10/29 K.Kitachi [QC#54203, ADD]
                    setMainUnitInfo(mainUnitInfo, (BigDecimal) mainUnitInfo.get("SVC_MACH_MSTR_PK"), svcConfigMstrPk);
                    // END 2019/10/29 K.Kitachi [QC#54203, ADD]

                    String mainShipToCustCd = "";
                    if (isSameShipTo(dsContrDtlInfoList)) {
                        mainShipToCustCd = (String) dsContrDtlInfoList.get(0).get("CUR_LOC_NUM");
                    } else {
                        // START 2016/10/04 T.Kanasaka [QC#9905, MOD]
//                        mainShipToCustCd = getDefShipToCd(mainSvcContrBllgTMsg.dsAcctNum.getValue());
                        // START 2018/02/02 K.Kojima [QC#22242,MOD]
                        // mainShipToCustCd = getFleetDefaultShipToCustCd(dsContrDtlInfoList.get(0));
                        mainShipToCustCd = getFirstMachineShipTo(dsContrDtlInfoList);
                        // END 2018/02/02 K.Kojima [QC#22242,MOD]
                        // END 2016/10/04 T.Kanasaka [QC#9905, MOD]
                    }
                    SHIP_TO_CUSTTMsg mainShipToCustTMsg = getShipToCust(mainShipToCustCd);
                    if (mainShipToCustTMsg == null) {
                        Key key = new Key();
                        key.add("SHIP_TO_CUST_CD", mainShipToCustCd);
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "SHIP_TO_CUST_CD", key.toString());
                        // START 2023/04/26 R.Avelino [QC#61411, MOD]
//                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1088E, key.toString());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSAM0776E, key.toString());
                        // END 2023/04/26 R.Avelino [QC#61411, MOD]
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        rollback();
                        continue SVC_INV;
                    }

                    // START QC#53265 K.Fujimoto[ADD]
                    SELL_TO_CUSTTMsg sellToCustTMsgForShipTo = getSellToCustForShipToCust(mainShipToCustTMsg.shipToCustCd.getValue());
                    if (sellToCustTMsgForShipTo == null) {
                        Key key = new Key();
                        key.add("SELL_TO_CUST_CD(SHIP_TO_CUST)", mainShipToCustTMsg.shipToCustCd.getValue());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1082E, key.toString());
                        continue SVC_INV;
                    }
                    // END   QC#53265 K.Fujimoto[ADD]
                    
                    // Add Start 08/31/2016 <QC#13529>
                    DS_CONTR_CLSTMsg dsContrClsTMsg = getDsContrClsTMsg(dsContrTMsg.dsContrClsCd.getValue());
                    if (dsContrClsTMsg == null) {
                        Key key = new Key();
                        key.add("DS_CONTR_CLS_CD", dsContrTMsg.dsContrClsCd.getValue());
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "DS_CONTR_CLS", key.toString());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1089E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        continue SVC_INV;
                    }

                    DS_INV_TPTMsg dsInvTpTMsg = getDsInvTp(dsContrClsTMsg.dsInvTpCd.getValue());
                    if (dsInvTpTMsg == null) {
                        Key key = new Key();
                        key.add("DS_INV_TP_CD", dsContrClsTMsg.dsInvTpCd.getValue());
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "DS_INV_TP", key.toString());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1090E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        continue SVC_INV;
                    }
                    // Add End   08/31/2016 <QC#13529>
                    // Add Start 2018/01/26 QC#23419
                    DS_INV_TPTMsg baseDsInvTpTMsg = dsInvTpTMsg;
                    DS_INV_TPTMsg usgDsInvTpTMsg = dsInvTpTMsg;
                    DS_INV_TPTMsg noARDsInvTpTMsg = getDsInvTp(DS_INV_TP.INVOICE_OKS_NO_AR);
                    if (noARDsInvTpTMsg == null) {
                        Key key = new Key();
                        key.add("DS_INV_TP_CD", DS_INV_TP.INVOICE_OKS_NO_AR);
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "DS_INV_TP", key.toString());
                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1090E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        continue SVC_INV;
                    }
                    // Add End 2018/01/26 QC#23419

                    // START 2018/11/05 K.Kitachi [QC#28627, ADD]
                    // mod start 2019/10/21 QC#53521
                    //if (!ZYPCommonFunc.hasValue(svcCrRebilPk) && !checkLinkContr(svcInvKey, DS_CONTR_CATG.REGULAR, rs.getString("CONTR_LINK_NUM"), mainSvcContrBllgTMsg.svcContrBllgThruDt.getValue())) {
                    //    rollback();
                    //    continue SVC_INV;
                    //}
                    if (!ZYPCommonFunc.hasValue(svcCrRebilPk)) {
                        List<String> checkList = new ArrayList<String>();
                        for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
                            String contrLinkNum = rs.getString("CONTR_LINK_NUM");
                            String usgChrgFlg = (String) dsContrDtlInfo.get("USG_CHRG_FLG");
                            String mtrBllgNextBllgDt = "";
                            if (ZYPConstant.FLG_ON_Y.equals(usgChrgFlg)) {
                                mtrBllgNextBllgDt = (String) dsContrDtlInfo.get("MTR_BLLG_NEXT_BLLG_DT");
                            }
                            if (!checkList.contains(contrLinkNum + usgChrgFlg + mtrBllgNextBllgDt)) {
                                checkList.add(contrLinkNum + usgChrgFlg + mtrBllgNextBllgDt);
                                String ngStatus = checkLinkContr(svcInvKey, DS_CONTR_CATG.REGULAR, contrLinkNum, mtrBllgNextBllgDt);
                                if (hasValue(ngStatus)) {
                                    rollback();
                                    continue SVC_INV;
                                }
                            }
                        }
                    }
                    // mod end 2019/10/21 QC#53521
                    // END 2018/11/05 K.Kitachi [QC#28627, ADD]

                    // 2(12) Calculate Total Amount
                    BigDecimal invTotDealSlsAmt = BigDecimal.ZERO;
                    BigDecimal invTotFuncSlsAmt = BigDecimal.ZERO;
                    BigDecimal invTotDealTaxAmt = BigDecimal.ZERO;
                    BigDecimal invTotFuncTaxAmt = BigDecimal.ZERO;
                    BigDecimal invTotDealDiscAmt = BigDecimal.ZERO;
                    BigDecimal invTotFuncDiscAmt = BigDecimal.ZERO;
                    BigDecimal invTotDealNetAmt = BigDecimal.ZERO;
                    BigDecimal invTotFuncNetAmt = BigDecimal.ZERO;

                    // START 2017/11/22 E.Kameishi [QC#19735, MOD]
                    // Mod Start 08/31/2016 <QC#13529>
//                    String svcInvNum = ZYPExtnNumbering.getUniqueID(glblCmpyCd, "SVC_BLLG_INV_NUM");
                    //String svcInvNum = ZYPExtnNumbering.getUniqueID(glblCmpyCd, dsInvTpTMsg.autoSeqCd.getValue());
                    // Mod Start 2018/01/24 QC#23684 Temporarily Fixed
                    BigDecimal svcInvPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_SQ");
//                    String svcInvNum = ZYPMaxTenDigitsNumbering.getUniqueID(glblCmpyCd, dsInvTpTMsg.autoSeqCd.getValue());
                    String svcInvNum = svcInvPk.toPlainString();
                    // Mod End 2018/01/24 QC#23684 Temporarily Fixed
                    // Mod End   08/31/2016 <QC#13529>
                    // END 2017/11/22 E.Kameishi [QC#19735, MOD]

                    int lineNum = 1;

                    //Add Start 06/16/2016 <QC#7636>
                    String minBllgPerFromDt = null;
                    String maxBllgPerThruDt = null;
                    //Add End   06/16/2016 <QC#7636>

                    // 3(1) Get DS_CONTR_DTL
                    for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
                        // START 2017/08/29 M.Kidokoro [QC#20079, ADD]
                        // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                        // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                        // if (isMtrHldForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) {
                        // START 2022/02/09 S.Kitamura [QC#59683, MOD]
                        // if (isUnbllblForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                        if (isUnbllblForTogether(allLineTogetherFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                        // END 2022/02/09 S.Kitamura [QC#59683, MOD]
                        // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            // START 2019/07/16 T.Kanasaka [QC#51576, MOD]
                            String status = (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD");
                            Key key = new Key();
                            key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
                            key.add("DS_CONTR_PK", dsContrTMsg.dsContrPk.getValue());
                            addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0617W, status, key.toString());
                            // START 2019/07/18 T.Aoyagi [QC#51576, ADD]
                            rollback();
	                        // END 2019/07/18 T.Aoyagi [QC#51576, ADD]
                            //continue;
                            continue GRP_SVC_INV;
                            // START 2019/07/16 T.Kanasaka [QC#51576, MOD]
                        }
                        // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                        // END 2017/08/29 M.Kidokoro [QC#20079, ADD]

                        // START 2019/07/17 T.Aoyagi [QC#51576, ADD]
                        // START 2022/02/09 S.Kitamura [QC#59683, MOD]
                        // if (!ZYPCommonFunc.hasValue(svcCrRebilPk) && ZYPConstant.FLG_OFF_N.equals(invSeptBaseUsgFlg)) {
                        if (!ZYPCommonFunc.hasValue(svcCrRebilPk) && ZYPConstant.FLG_ON_Y.equals(allLineTogetherFlg) && !ZYPConstant.FLG_ON_Y.equals(baseBllgFlg)) {
                        // END 2022/02/09 S.Kitamura [QC#59683, MOD]
                            String bllgMtrBillToCustCd = (String) dsContrDtlInfo.get("BILL_TO_CUST_CD");
                            String nextBllgDt = (String) dsContrDtlInfo.get("MTR_BLLG_NEXT_BLLG_DT");
                            if (!ZYPCommonFunc.hasValue(nextBllgDt)) {
                                nextBllgDt = (String) dsContrDtlInfo.get("BASE_BLLG_NEXT_BLLG_DT");
                            }
                            String crCardCustRefNum = (String) dsContrDtlInfo.get("CR_CARD_CUST_REF_NUM");
                            BigDecimal ctacPsnPk = (BigDecimal) dsContrDtlInfo.get("CTAC_PSN_PK");
                            if (isExistsNoMeterEntryTogetherGroup(dsContrPk, bllgMtrBillToCustCd, nextBllgDt, crCardCustRefNum, ctacPsnPk)) {
                                Key key = new Key();
                                key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
                                key.add("DS_CONTR_PK", dsContrTMsg.dsContrPk.getValue());
                                key.add("DS_CONTR_DTL_PK", (BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK"));
                                addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0620W, "no meter entry", key.toString());
                                // START 2019/07/18 T.Aoyagi [QC#51576, ADD]
                                rollback();
    	                        // END 2019/07/18 T.Aoyagi [QC#51576, ADD]
                                continue GRP_SVC_INV;
                            }
                        }
                        // END 2019/07/17 T.Aoyagi [QC#51576, ADD]

                        BigDecimal svcContrBllgPk = (BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK");

                        SVC_CONTR_BLLGTMsg svcContrBllgTMsg = getSvcContrBllg(svcContrBllgPk);
                        if (svcContrBllgTMsg == null) {
                            Key key = new Key();
                            key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                            // START 2016/12/13 N.Arai [QC#16400, MOD]
                            // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "SVC_CONTR_BLLG", key.toString());
                            addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1078E, key.toString());
                            // END 2016/12/13 N.Arai [QC#16400, MOD]
                            rollback();
                            continue SVC_INV;
                        }

                        // START 2019/11/08 K.Kitachi [QC#54368, ADD]
                        String grpSvcInvKey = createGrpSvcInvKey(svcContrBllgTMsg);
                        if(skipGrpSvcInvKeyList.contains(grpSvcInvKey)){
                            continue;
                        }
                        boolean poReq = NSXC001001ContrValidation.checkPoRequired(this.glblCmpyCd, this.slsDt, svcContrBllgTMsg.dsAcctNum.getValue(), svcContrBllgTMsg.billToCustCd.getValue(), ONBATCH_TYPE.BATCH);
                        if (poReq) {
                            if (!isExistsPoInclBllgPeriod(svcContrBllgPk)) {
                                String svcContrBllgFromDt = ZYPDateUtil.formatEzd8ToDisp(svcContrBllgTMsg.svcContrBllgFromDt.getValue());
                                String svcContrBllgThruDt = ZYPDateUtil.formatEzd8ToDisp(svcContrBllgTMsg.svcContrBllgThruDt.getValue());
                                Key key = new Key();
                                key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                                addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0751W, svcContrBllgFromDt, svcContrBllgThruDt, key.toString());
                                skipGrpSvcInvKeyList.add(grpSvcInvKey);
                                continue;
                            }
                        }
                        if (!ZYPCommonFunc.hasValue(svcCrRebilPk)) {
                            String contrLinkNum = rs.getString("CONTR_LINK_NUM");
                            if (!checkPoPeriodForLinkContr(dsContrPk, contrLinkNum, svcContrBllgPk, svcContrBllgTMsg.baseChrgFlg.getValue())) {
                                addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0753W, contrLinkNum);
                                rollback();
                                continue SVC_INV;
                            }
                        }
                        // END 2019/11/08 K.Kitachi [QC#54368, ADD]

                        //Del Start 05/25/2016 <QC#8591>
//                        // Check billable flag
//                        if (!checkBllblFlg(svcContrBllgTMsg, dsContrTMsg, dsContrDtlInfo, svcInvKey)) {
//                            rollback();
//                            continue SVC_INV;
//                        }
                        //Del End   05/25/2016 <QC#8591>

                        //Mod Start 07/08/2016 <QC#8293>
//                        // Del Start 03/29/2016 <QC#5993>
                        // Add Start 2016/11/10 <QC#15789>
                        BigDecimal dsContrDtlPk = (BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK");
                        boolean hasDsContrProcAllocForBase = hasDsContrProcAlloc(dsContrPk, dsContrDtlPk, SVC_INV_CHRG_TP.BASE_CHARGE);
                        boolean hasDsContrProcAllocForMtr = hasDsContrProcAlloc(dsContrPk, dsContrDtlPk, SVC_INV_CHRG_TP.METER_CHARGE);
                        boolean hasDsContrProcAllocForAddl = hasDsContrProcAlloc(dsContrPk, dsContrDtlPk, SVC_INV_CHRG_TP.ADDITIONAL_CHARGE);
                        // Add End   2016/11/10 <QC#15789>
                        // START 2022/02/09 S.Kitamura [QC#59683, MOD]
                        if (ZYPConstant.FLG_OFF_N.equals(invSeptBaseUsgFlg) && (ZYPConstant.FLG_ON_Y.equals(allLineTogetherFlg))) {
                        // END 2022/02/09 S.Kitamura [QC#59683, MOD]
                            // START 2019/10/09 [QC#54058,MOD]
                            // boolean result = existBaseUsgChrg(dsContrDtlInfo, dsContrDtlInfoList, svcContrBllgTMsg.baseChrgFlg.getValue());
                            boolean result = existBaseUsgChrg(dsContrDtlInfo, dsContrDtlInfoList, svcContrBllgTMsg.baseChrgFlg.getValue(), svcContrBllgTMsg.invTpCd.getValue());
                            // END 2019/10/09 [QC#54058,MOD]
                            if (!result) {
                                String msgParam = "Base Charge";
                                if (ZYPConstant.FLG_ON_Y.equals(svcContrBllgTMsg.baseChrgFlg.getValue())) {
                                    msgParam = "Usage Charge";
                                }
                                Key key = new Key();
                                key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
                                key.add("SER_NUM", (String) dsContrDtlInfo.get("SER_NUM"));
                                key.add("SVC_MACH_MSTR_PK", (BigDecimal) dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                                addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 2, NSAM0412W, msgParam, key.toString());
                                // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                                // rollback();
                                // continue SVC_INV;
                                // START 2018/05/14 K.Kojima [QC#24888,MOD]
                                // continue;
                                rollback();
                                continue GRP_SVC_INV;
                                // END 2018/05/14 K.Kojima [QC#24888,MOD]
                                // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            }
                        }
//                        // Del End   03/29/2016 <QC#5993>
                        //Mod End   07/08/2016 <QC#8293>

                        String shipToCustCd = (String) dsContrDtlInfo.get("CUR_LOC_NUM");
                        SHIP_TO_CUSTTMsg shipToCustTMsg = getShipToCust(shipToCustCd);
                        if (shipToCustTMsg == null) {
                            Key key = new Key();
                            key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                            key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                            key.add("SHIP_TO_CUST_CD", shipToCustCd);
                            // START 2016/12/13 N.Arai [QC#16400, MOD]
                            // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "SHIP_TO_CUST_CD", key.toString());
                            addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1088E, key.toString());
                            // END 2016/12/13 N.Arai [QC#16400, MOD]
                            rollback();
                            continue SVC_INV;
                        }

                        if (!ZYPCommonFunc.hasValue(shipToCustTMsg.ctryCd)) {
                            Key key = new Key();
                            key.add("SHIP_TO_CUST_CD", shipToCustCd);
                            addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "SHIP_TO_CUST.CTRY_CD", key.toString());
                            rollback();
                            continue SVC_INV;
                        }

                        MDSETMsg mdseTMsg = getMdse((String) dsContrDtlInfo.get("MDSE_CD"));
                        if (mdseTMsg == null) {
                            Key key = new Key();
                            key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                            key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                            key.add("MDSE_CD", dsContrDtlInfo.get("MDSE_CD"));
                            // START 2016/12/13 N.Arai [QC#16400, MOD]
                            // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "MDSE", key.toString());
                            addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1091E, key.toString());
                            // END 2016/12/13 N.Arai [QC#16400, MOD]
                            rollback();
                            continue SVC_INV;
                        }

                        // 3(5) Get MDL_MDSE_RELN_V
                        //Mod Start 02/04/2016 <QC#4112> 
//                        Map<String, Object> mdlMdseInfo = getMdlMdseInfo((String) dsContrDtlInfo.get("MDSE_CD"));
//                        if (mdlMdseInfo == null) {
//                            Key key = new Key();
//                            key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
//                            key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
//                            key.add("MDSE_CD", dsContrDtlInfo.get("MDSE_CD"));
//                            addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "MDL_NM", key.toString());
//                            rollback();
//                            continue SVC_INV;
//                        }

                        // QC2415 start
                        // String svcContrBllgFromDt = (String)
                        // dsContrDtlInfo.get("SVC_CONTR_BLLG_FROM_DT");
                        // String svcContrBllgThruDt = (String)
                        // dsContrDtlInfo.get("SVC_CONTR_BLLG_THRU_DT");
                        // QC2415 end
//                        String mdlNm = (String) mdlMdseInfo.get("MDL_NM");
                        // Mod Start 02/07/2017 <QC#17331>
                        String mdlNm = (String) dsContrDtlInfo.get("MDL_NM");
                        // Mod End   02/07/2017 <QC#17331>
                        //Mod End   02/04/2016 <QC#4112> 

                        // ----------------------------------------------------------------------
                        // Base Charge
                        // ----------------------------------------------------------------------
                        String svcInvChrgTpCd = null;

                        // QC2536 start
                        if (ZYPConstant.FLG_OFF_N.equals(invSeptBaseUsgFlg) || (ZYPConstant.FLG_ON_Y.equals(invSeptBaseUsgFlg) && ZYPConstant.FLG_ON_Y.equals(baseBllgFlg))) {
                            // Add Start 2018/01/26 QC#23419
                            if (hasValue(dsContrTMsg.dsContrEdiCd) && DS_CONTR_EDI.CFS.equals(dsContrTMsg.dsContrEdiCd.getValue())) {
                                if (ZYPConstant.FLG_ON_Y.equals(dsContrTMsg.baseChrgToLeaseCmpyFlg.getValue())) {
                                    // No-AR
                                    baseDsInvTpTMsg = noARDsInvTpTMsg;
                                }
                            }
                            // Add End 2018/01/26 QC#23419
                            // END 2017/10/19 K.Kojima [QC#21468,21177,ADD]
                            // START 2022/02/09 S.Kitamura [QC#59683, MOD]
                            // if (isUnbllblForSeparate(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                            if (isUnbllblForSeparate(allLineTogetherFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                            // END 2022/02/09 S.Kitamura [QC#59683, MOD]
                                continue;
                            }
                            // END 2017/10/19 K.Kojima [QC#21468,21177,ADD]

                            // QC2536 end
                            svcInvChrgTpCd = SVC_INV_CHRG_TP.BASE_CHARGE;

                            SVC_CONTR_BASE_BLLGTMsgArray svcContrBaseBllgTMsgArray = getSvcContrBaseBllgList(svcContrBllgPk);
                            for (int i = 0; i < svcContrBaseBllgTMsgArray.length(); i++) {

                                BigDecimal svcInvLinePk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_SQ");
                                String svcInvLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);

                                SVC_CONTR_BASE_BLLGTMsg svcContrBaseBllgTMsg = svcContrBaseBllgTMsgArray.no(i);

                                BigDecimal baseNetDealAmt = svcContrBaseBllgTMsg.baseDealAmt.getValue();
                                BigDecimal baseNetFuncAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, baseNetDealAmt, funcCcyAftDeclPntDigitNum);
                                BigDecimal baseDiscDealAmt = svcContrBaseBllgTMsg.baseDiscDealAmt.getValue();
                                BigDecimal baseDiscFuncAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, baseDiscDealAmt, funcCcyAftDeclPntDigitNum);
                                BigDecimal baseSlsDealAmt = baseNetDealAmt.add(baseDiscDealAmt);
                                BigDecimal baseSlsFuncAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, baseSlsDealAmt, funcCcyAftDeclPntDigitNum);

                                // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                // NWZC036101PMsg taxApiPMsg = new NWZC036101PMsg();
                                // END 2018/05/31 K.Kojima [QC#23685,DEL]
                                String taxCalcGeoCd = "";
                                // START 2018/05/31 K.Kojima [QC#23685,MOD]
                                // BigDecimal baseTaxRate;
                                // BigDecimal baseTaxFuncAmt;
                                // BigDecimal baseTaxDealAmt;
                                BigDecimal baseTaxRate = BigDecimal.ZERO;
                                BigDecimal baseTaxFuncAmt = BigDecimal.ZERO;
                                BigDecimal baseTaxDealAmt = BigDecimal.ZERO;
                                // END 2018/05/31 K.Kojima [QC#23685,MOD]

                                // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                // // Mod Start 08/31/2016 <QC#13529>
                                // // if (BigDecimal.ZERO.compareTo(baseNetFuncAmt) == 0) {
                                // // Mod Start 2018/01/26 QC#23419
                                // // if (BigDecimal.ZERO.compareTo(baseNetFuncAmt) == 0 || !FLG_ON_Y.equals(dsInvTpTMsg.taxCalcFlg.getValue())) {
                                // if (BigDecimal.ZERO.compareTo(baseNetFuncAmt) == 0 || !FLG_ON_Y.equals(baseDsInvTpTMsg.taxCalcFlg.getValue())) {
                                // // Mod End 2018/01/26 QC#23419
                                // // Mod End   08/31/2016 <QC#13529>
                                //     baseTaxRate = BigDecimal.ZERO;
                                //     baseTaxFuncAmt = BigDecimal.ZERO;
                                //     baseTaxDealAmt = BigDecimal.ZERO;
                                // } else {
                                //     // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
                                //     // taxApiPMsg = callTaxCalcAPIForBase(dsContrDtlInfo, svcContrBllgTMsg, baseNetFuncAmt);
                                //     // START 2017/09/27 K.Yamada [QC#21233, MOD]
                                //     // taxApiPMsg = callTaxCalcAPIForBase(dsContrDtlInfo, svcContrBllgTMsg, baseNetFuncAmt, svcInvNum);
                                //     taxApiPMsg = callTaxCalcAPIForBase(dsContrDtlInfo, svcContrBllgTMsg, baseNetFuncAmt, svcInvNum, invDt);
                                //     // END 2017/09/27 K.Yamada [QC#21233, MOD]
                                //     // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
                                // 
                                //     if (S21ApiUtil.isXxMsgId(taxApiPMsg)) {
                                //         Key key = new Key();
                                //         key.add("DS_CONTR_PK", dsContrPk);
                                //         key.add("DS_CONTR_TP_CD", dsContrTMsg.dsContrTpCd.getValue());
                                //         key.add("SVC_CONFIG_MSTR_PK", svcConfigMstrPk);
                                //         key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                                //         key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                                //         key.add("SVC_INV_NUM", svcInvNum);
                                //         key.add("INV_DT", invDt);
                                //         key.add("SELL_TO_CUST_CD", sellToCustTMsg.sellToCustCd.getValue());
                                //         key.add("SHIP_TO_CUST_CD", shipToCustCd);
                                //         key.add("CTY_ADDR", shipToCustTMsg.ctyAddr.getValue());
                                //         key.add("ST_CD", shipToCustTMsg.stCd.getValue());
                                //         key.add("POST_CD", shipToCustTMsg.postCd.getValue());
                                //         key.add("SVC_INV_CHRG_TP_CD", svcInvChrgTpCd);
                                //         key.add("BASE_FUNC_AMT", baseNetFuncAmt);
                                // 
                                //         List<String> msgIdList = S21ApiUtil.getXxMsgIdList(taxApiPMsg);
                                //         for (String msgId : msgIdList) {
                                //             addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0407E, "NWZC036101", S21MessageFunc.clspGetMessage(msgId), key.toString());
                                //         }
                                //         rollback();
                                //         continue SVC_INV;
                                //     }
                                //     taxCalcGeoCd = taxApiPMsg.taxCalculateOutputLine.no(0).taxAreaId.getValue();
                                //     baseTaxRate = getTaxRate(taxApiPMsg);
                                //     baseTaxFuncAmt = getTaxFuncAmt(taxApiPMsg).setScale(funcCcyAftDeclPntDigitNum.intValueExact(), RoundingMode.HALF_UP);
                                //     baseTaxDealAmt = exchToDealAmt(actlExchRate, dealCcyAcctArthTpCd, baseTaxFuncAmt, dealCcyAftDeclPntDigitNum);
                                // }
                                // END 2018/05/31 K.Kojima [QC#23685,DEL]

                                invTotDealSlsAmt = invTotDealSlsAmt.add(baseSlsDealAmt);
                                invTotFuncSlsAmt = invTotFuncSlsAmt.add(baseSlsFuncAmt);
                                invTotDealTaxAmt = invTotDealTaxAmt.add(baseTaxDealAmt);
                                invTotFuncTaxAmt = invTotFuncTaxAmt.add(baseTaxFuncAmt);
                                invTotDealDiscAmt = invTotDealDiscAmt.add(baseDiscDealAmt);
                                invTotFuncDiscAmt = invTotFuncDiscAmt.add(baseDiscFuncAmt);
                                invTotDealNetAmt = invTotDealNetAmt.add(baseNetDealAmt);
                                invTotFuncNetAmt = invTotFuncNetAmt.add(baseNetFuncAmt);

                                List<SVC_INV_LINE_ALLOCTMsg> svcInvLineAllocTMsgList = new ArrayList<SVC_INV_LINE_ALLOCTMsg>();

                                // Add Start 2016/11/10 <QC#15789>
                                String ajeInvLineAllocCd = getAjeInvLineAllocCdForBase(hasDsContrProcAllocForBase, dsContrDtlInfo);
                                // Add End   2016/11/10 <QC#15789>
                                SVC_CONTR_BLLG_ALLOCTMsgArray svcContrBllgAllocTMsgArray = getSvcContrBaseBllgAllocList(svcContrBaseBllgTMsg.svcContrBaseBllgPk.getValue());
                                for (int j = 0; j < svcContrBllgAllocTMsgArray.length(); j++) {

                                    SVC_CONTR_BLLG_ALLOCTMsg svcContrBllgAllocTMsg = svcContrBllgAllocTMsgArray.no(j);

                                    BigDecimal allocDealGrsTotPrcAmt = svcContrBllgAllocTMsg.dealGrsTotPrcAmt.getValue();
                                    BigDecimal allocFuncGrsTotPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealGrsTotPrcAmt, funcCcyAftDeclPntDigitNum);
                                    BigDecimal allocDealNetUnitPrcAmt = svcContrBllgAllocTMsg.dealNetUnitPrcAmt.getValue();
                                    BigDecimal allocFuncNetUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealNetUnitPrcAmt, funcCcyAftDeclPntDigitNum);
                                    BigDecimal allocDealGrsUnitPrcAmt = svcContrBllgAllocTMsg.dealGrsUnitPrcAmt.getValue();
                                    BigDecimal allocFuncGrsUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealGrsUnitPrcAmt, funcCcyAftDeclPntDigitNum);
                                    BigDecimal allocInvLineDealNetAmt = svcContrBllgAllocTMsg.invLineDealNetAmt.getValue();
                                    BigDecimal allocInvLineFuncNetAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocInvLineDealNetAmt, funcCcyAftDeclPntDigitNum);
                                    // QC2417 start
                                    // dealGrsTotPrcAmt is not include
                                    // dealDiscUnitPrcAmt.
                                    allocDealGrsTotPrcAmt = allocDealGrsTotPrcAmt.add(svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue());
                                    // funcGrsTotPrcAmt is not include
                                    // funcDiscUnitPrcAmt.
                                    allocFuncGrsTotPrcAmt = allocFuncGrsTotPrcAmt.add(exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue(), funcCcyAftDeclPntDigitNum));
                                    // QC2417 end

                                    BigDecimal allocDealDiscUnitPrcAmt = svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue();
                                    BigDecimal allocFuncDiscUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealDiscUnitPrcAmt, funcCcyAftDeclPntDigitNum);

                                    BigDecimal svcInvLineAllocPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_ALLOC_SQ");
                                    String svcInvLineAllocNum = String.format(SVC_INV_LINE_ALLOC_NUM_FMT, j + 1);

                                    SVC_INV_LINE_ALLOCTMsg svcInvLineAllocTMsg = new SVC_INV_LINE_ALLOCTMsg();
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.glblCmpyCd, glblCmpyCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineAllocPk, svcInvLineAllocPk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLinePk, svcInvLinePk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvNum, svcInvNum);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineNum, svcInvLineNum);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineAllocNum, svcInvLineAllocNum);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.contrPrcAllocTpCd, svcContrBllgAllocTMsg.contrPrcAllocTpCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.intgMdseCd, svcContrBllgAllocTMsg.intgMdseCd);
                                    // START 2017/11/29 K.Kojima [QC#21918,MOD]
                                    // ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.tocCd, svcContrBllgAllocTMsg.tocCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.tocCd, getSalesRep((BigDecimal) dsContrDtlInfo.get("SVC_MACH_MSTR_PK")));
                                    // END 2017/11/29 K.Kojima [QC#21918,MOD]
                                    // START 2019/03/11 [QC#30675, ADD]
                                    if (!hasValue(svcInvLineAllocTMsg.tocCd)) {
                                        Key key = new Key();
                                        key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                        key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE_ALLOC.TOC_CD", key.toString());
                                        rollback();
                                        continue SVC_INV;
                                    }
                                    // END 2019/03/11 [QC#30675, ADD]
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.slsAllocRate, svcContrBllgAllocTMsg.slsAllocRate);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealGrsTotPrcAmt, allocDealGrsTotPrcAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcGrsTotPrcAmt, allocFuncGrsTotPrcAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealNetUnitPrcAmt, allocDealNetUnitPrcAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcNetUnitPrcAmt, allocFuncNetUnitPrcAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealGrsUnitPrcAmt, allocDealGrsUnitPrcAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcGrsUnitPrcAmt, allocFuncGrsUnitPrcAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineDealNetAmt, allocInvLineDealNetAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineFuncNetAmt, allocInvLineFuncNetAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineDealTaxAmt, BigDecimal.ZERO);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineFuncTaxAmt, BigDecimal.ZERO);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealDiscUnitPrcAmt, allocDealDiscUnitPrcAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcDiscUnitPrcAmt, allocFuncDiscUnitPrcAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaCmpyCd, svcContrBllgAllocTMsg.coaCmpyCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaAfflCd, svcContrBllgAllocTMsg.coaAfflCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaBrCd, svcContrBllgAllocTMsg.coaBrCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaChCd, svcContrBllgAllocTMsg.coaChCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaCcCd, svcContrBllgAllocTMsg.coaCcCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaAcctCd, svcContrBllgAllocTMsg.coaAcctCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaProdCd, svcContrBllgAllocTMsg.coaProdCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaProjCd, svcContrBllgAllocTMsg.coaProjCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaExtnCd, svcContrBllgAllocTMsg.coaExtnCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.ccyCd, svcContrBllgAllocTMsg.ccyCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrBllgAllocPk, svcContrBllgAllocTMsg.svcContrBllgAllocPk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrBaseBllgPk, svcContrBllgAllocTMsg.svcContrBaseBllgPk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrMtrBllgPk, svcContrBllgAllocTMsg.svcContrMtrBllgPk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrAddlChrgBllgPk, svcContrBllgAllocTMsg.svcContrAddlChrgBllgPk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.trxCd, svcContrBllgAllocTMsg.trxCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.trxRsnCd, svcContrBllgAllocTMsg.trxRsnCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dfrdAcctgRuleCd, svcContrBllgAllocTMsg.dfrdAcctgRuleCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dfrdAcctgRuleDurnAot, svcContrBllgAllocTMsg.dfrdAcctgRuleDurnAot);
                                    // Add Start 2016/11/10 <QC#15789>
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.ajeInvLineAllocCd, ajeInvLineAllocCd);
                                    // Add End   2016/11/10 <QC#15789>
                                    // START 2016/06/20 T.Aoyagi [QC#9907, ADD]
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineSplTpCd, this.invLineSplTpMap.get(svcContrBllgAllocTMsg.svcContrBllgAllocPk.getValue()));
                                    // END 2016/06/20 T.Aoyagi [QC#9907, ADD]

                                    svcInvLineAllocTMsgList.add(svcInvLineAllocTMsg);
                                }

                                // ----------------------------------------------------------------------
                                // Adjusting SVC_INV_LINE_ALLOC Fractions
                                // ----------------------------------------------------------------------
                                adjSvcInvLineAllocFrac(svcInvLineAllocTMsgList, baseSlsDealAmt, baseSlsFuncAmt, baseDiscDealAmt, baseDiscFuncAmt, baseNetDealAmt, baseNetFuncAmt, baseTaxDealAmt, baseTaxFuncAmt);

                                // ----------------------------------------------------------------------
                                // Create SVC_INV_LINE_ALLOC
                                // ----------------------------------------------------------------------
                                for (SVC_INV_LINE_ALLOCTMsg svcInvLineAllocTMsg : svcInvLineAllocTMsgList) {
                                    S21FastTBLAccessor.insert(svcInvLineAllocTMsg);
                                    if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineAllocTMsg.getReturnCode())) {
                                        throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE_ALLOC" });
                                    }
                                }

                                // ----------------------------------------------------------------------
                                // Create SVC_INV_LINE
                                // ----------------------------------------------------------------------
                                // QC2415 start
                                // SVC_INV_LINETMsg svcInvLineTMsg =
                                // getSvcInvLineTMsg(svcContrBllgPk,
                                // svcContrBllgFromDt, svcContrBllgThruDt,
                                // shipToCustCd, svcInvNum, svcInvLinePk,
                                // svcInvLineNum, svcInvChrgTpCd, mdseCd,
                                // mdseNm, mdlId, mdlNm,
                                // baseTaxRate, baseSlsDealAmt,
                                // baseSlsFuncAmt, baseDiscDealAmt,
                                // baseDiscFuncAmt, baseNetDealAmt,
                                // baseNetFuncAmt, baseTaxDealAmt,
                                // baseTaxFuncAmt);
                                SVC_INV_LINETMsg svcInvLineTMsg = getSvcInvLineTMsg(shipToCustCd, svcInvNum, svcInvLinePk, svcInvLineNum, svcInvChrgTpCd, mdlNm,
                                        baseTaxRate, baseSlsDealAmt, baseSlsFuncAmt, baseDiscDealAmt, baseDiscFuncAmt, baseNetDealAmt, baseNetFuncAmt, baseTaxDealAmt, baseTaxFuncAmt, taxCalcGeoCd,
                                        dsContrDtlInfo, dsContrTMsg, svcContrBllgTMsg, svcContrBaseBllgTMsg, null);
                                // QC2415 end

                                // START 2019/03/11 [QC#30675, ADD]
                                if (svcInvLineTMsg == null) {
                                    Key key = new Key();
                                    key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                    key.add("SVC_MACH_MSTR_PK", svcContrBllgTMsg.svcMachMstrPk.getValue());
                                    addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE.SLS_REP_TOC_CD", key.toString());
                                    rollback();
                                    continue SVC_INV;
                                }
                                // END 2019/03/11 [QC#30675, ADD]
                                //Add Start 06/16/2016 <QC#7636>
                                if (minBllgPerFromDt == null || minBllgPerFromDt.compareTo(svcInvLineTMsg.bllgPerFromDt.getValue()) > 0) {
                                    minBllgPerFromDt = svcInvLineTMsg.bllgPerFromDt.getValue();
                                }
                                if (maxBllgPerThruDt == null || maxBllgPerThruDt.compareTo(svcInvLineTMsg.bllgPerThruDt.getValue()) < 0) {
                                    maxBllgPerThruDt = svcInvLineTMsg.bllgPerThruDt.getValue();
                                }
                                //Add End   06/16/2016 <QC#7636>

                                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrPk, svcContrBllgTMsg.dsContrPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrDtlPk, svcContrBllgTMsg.dsContrDtlPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcContrBaseBllgPk, svcContrBaseBllgTMsg.svcContrBaseBllgPk);

                                // add start 2018/08/09 QC#27329-3
                                if (INV_TP.CREDIT_MEMO.equals(svcContrBllgTMsg.invTpCd.getValue()) && hasValue(svcContrBllgTMsg.origSvcInvNum)) {
                                    setOrigSvcInvLineInfo(svcInvLineTMsg, svcContrBllgTMsg.origSvcInvNum.getValue(), svcContrBllgTMsg.dsContrBllgSchdPk.getValue());
                                }
                                // add end 2018/08/09 QC#27329-3

                                S21FastTBLAccessor.insert(svcInvLineTMsg);
                                if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineTMsg.getReturnCode())) {
                                    throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE" });
                                }
                                // START 2017/09/08 M.Kidokoro [QC#20983, ADD]
                                insertSvcInvLineFlg = true;
                                // END 2017/09/08 M.Kidokoro [QC#20983, ADD]

                                // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                // // SVC_INV_LINE_TAX_DTL
                                // createSvcInvLineTaxDtl(svcInvLinePk, (String) dsContrDtlInfo.get("CCY_CD"), taxApiPMsg);
                                // END 2018/05/31 K.Kojima [QC#23685,DEL]

                                lineNum++;

                                // ----------------------------------------------------------------------
                                // Additional Charge
                                // ----------------------------------------------------------------------
                                List<Map<String, BigDecimal>> addlChrgBllgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                                for (Map<String, BigDecimal> addlChrgBllgInfo : addlChrgBllgInfoList) {

                                    BigDecimal addlSvcContrBllgPk = addlChrgBllgInfo.get("SVC_CONTR_BLLG_PK");
                                    SVC_CONTR_BLLGTMsg addlSvcContrBllgTMsg = getSvcContrBllg(addlSvcContrBllgPk);
                                    BigDecimal addlChrgBllgPk = addlChrgBllgInfo.get("SVC_CONTR_ADDL_CHRG_BLLG_PK");
                                    SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg = getSvcContrAddlChrgBllgTMsg(addlChrgBllgPk);
                                    String addlSvcInvLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);
                                    // tax API
                                    BigDecimal taxDealAmt = BigDecimal.ZERO;
                                    BigDecimal taxFuncAmt = BigDecimal.ZERO;
                                    // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                    // // Mod Start 08/31/2016 <QC#13529>
                                    // NWZC036101PMsg addlTaxApiPMsg = null;
                                    // // Mod Start 2018/01/26 QC#23419
                                    // // if (FLG_ON_Y.equals(dsInvTpTMsg.taxCalcFlg.getValue())) {
                                    // if (FLG_ON_Y.equals(baseDsInvTpTMsg.taxCalcFlg.getValue())) {
                                    // // Mod End 2018/01/26 QC#23419
                                    //     // Mod Start 04/04/2016 <QC#6492>
                                    //     // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
                                    //     // addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue());
                                    //     // START 2017/09/27 K.Yamada [QC#21233, MOD]
                                    //     // addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue(), svcInvNum);
                                    //     addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue(), svcInvNum, invDt);
                                    //     // END 2017/09/27 K.Yamada [QC#21233, MOD]
                                    //     // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
                                    // 
                                    //     // Mod End 04/04/2016 <QC#6492>
                                    //     if (S21ApiUtil.isXxMsgId(addlTaxApiPMsg)) {
                                    //         Key key = new Key();
                                    //         key.add("DS_CONTR_PK", dsContrPk);
                                    //         key.add("DS_CONTR_TP_CD", dsContrTMsg.dsContrTpCd.getValue());
                                    //         key.add("SVC_CONFIG_MSTR_PK", svcConfigMstrPk);
                                    //         key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                                    //         // START 2016/12/13 N.Arai [QC#16400, MOD]
                                    //         //key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                                    //         key.add("SVC_CONTR_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrBllgPk.getValue());
                                    //         // END 2016/12/13 N.Arai [QC#16400, MOD]
                                    //         key.add("SVC_INV_NUM", svcInvNum);
                                    //         key.add("INV_DT", invDt);
                                    //         key.add("SELL_TO_CUST_CD", sellToCustTMsg.sellToCustCd.getValue());
                                    //         key.add("SHIP_TO_CUST_CD", shipToCustCd);
                                    //         key.add("CTY_ADDR", shipToCustTMsg.ctyAddr.getValue());
                                    //         key.add("ST_CD", shipToCustTMsg.stCd.getValue());
                                    //         key.add("POST_CD", shipToCustTMsg.postCd.getValue());
                                    //         key.add("SVC_INV_CHRG_TP_CD", svcInvChrgTpCd);
                                    //         key.add("FUNC_AMT", svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue());
                                    // 
                                    //         List<String> msgIdList = S21ApiUtil.getXxMsgIdList(addlTaxApiPMsg);
                                    //         for (String msgId : msgIdList) {
                                    //             addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0407E, "NWZC036101", S21MessageFunc.clspGetMessage(msgId), key.toString());
                                    //         }
                                    //         rollback();
                                    //         continue SVC_INV;
                                    //     }
                                    //     taxFuncAmt = getTaxFuncAmt(addlTaxApiPMsg).setScale(funcCcyAftDeclPntDigitNum.intValueExact(), RoundingMode.HALF_UP);
                                    //     taxDealAmt = exchToDealAmt(actlExchRate, dealCcyAcctArthTpCd, taxFuncAmt, dealCcyAftDeclPntDigitNum);
                                    // }
                                    // // Mod End   08/31/2016 <QC#13529>
                                    // END 2018/05/31 K.Kojima [QC#23685,DEL]

                                    // Create SVC_INV_LINE
                                    //Mod Start 05/25/2016 <QC#7636>
                                    // START 2017/11/17 K.Kojima [QC#21918,MOD]
                                    // SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, addlTaxApiPMsg, taxDealAmt, taxFuncAmt, shipToCustCd);
                                    // START 2018/05/31 K.Kojima [QC#23685,MOD]
                                    // SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, addlTaxApiPMsg, taxDealAmt, taxFuncAmt, shipToCustCd, dsContrTMsg);
                                    SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, taxDealAmt, taxFuncAmt, shipToCustCd, dsContrTMsg);
                                    // END 2018/05/31 K.Kojima [QC#23685,MOD]
                                    // END 2017/11/17 K.Kojima [QC#21918,MOD]
                                    //Mod End   05/25/2016 <QC#7636>
                                    // START 2019/03/11 [QC#30675, ADD]
                                    if (addlSvcInvLineTMsg == null) {
                                        Key key = new Key();
                                        key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                        key.add("SVC_CONTR_ADDL_CHRG_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue());
                                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE.SLS_REP_TOC_CD", key.toString());
                                        rollback();
                                        continue SVC_INV;
                                    }
                                    // END 2019/03/11 [QC#30675, ADD]

                                    // Add Start 08/08/2016 <QC#8293>
                                    invTotDealSlsAmt = invTotDealSlsAmt.add(addlSvcInvLineTMsg.invLineDealSlsAmt.getValue());
                                    invTotFuncSlsAmt = invTotFuncSlsAmt.add(addlSvcInvLineTMsg.invLineFuncSlsAmt.getValue());
                                    invTotDealTaxAmt = invTotDealTaxAmt.add(addlSvcInvLineTMsg.invLineDealTaxAmt.getValue());
                                    invTotFuncTaxAmt = invTotFuncTaxAmt.add(addlSvcInvLineTMsg.invLineFuncTaxAmt.getValue());
                                    invTotDealDiscAmt = invTotDealDiscAmt.add(addlSvcInvLineTMsg.invLineDealDiscAmt.getValue());
                                    invTotFuncDiscAmt = invTotFuncDiscAmt.add(addlSvcInvLineTMsg.invLineFuncDiscAmt.getValue());
                                    invTotDealNetAmt = invTotDealNetAmt.add(addlSvcInvLineTMsg.invLineDealNetAmt.getValue());
                                    invTotFuncNetAmt = invTotFuncNetAmt.add(addlSvcInvLineTMsg.invLineFuncNetAmt.getValue());
                                    // Add End   08/08/2016 <QC#8293>
                                    // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                    // createSvcInvLineTaxDtl(addlSvcInvLineTMsg.svcInvLinePk.getValue(), (String) dsContrDtlInfo.get("CCY_CD"), addlTaxApiPMsg);
                                    // END 2018/05/31 K.Kojima [QC#23685,DEL]

                                    // Add Start 2016/11/10 <QC#15789>
                                    String ajeInvLineAllocCdForAddl = getAjeInvLineAllocCdForAddl(hasDsContrProcAllocForAddl, SVC_INV_CHRG_TP.BASE_CHARGE, svcContrAddlChrgBllgTMsg);
                                    // Add End   2016/11/10 <QC#15789>
                                    List<BigDecimal> addlAllocPkList = getSvcContrBllgAllocPkForAddl(addlChrgBllgPk);
                                    for (int j = 0; j < addlAllocPkList.size(); j++) {
                                        SVC_CONTR_BLLG_ALLOCTMsg svcContrBllgAllocTMsg = getSvcContrBllgAllocTMsg(addlAllocPkList.get(j));

                                        // Mod Start 2016/11/10 <QC#15789>
                                        // Create SVC_INV_LINE_ALLOC
                                        // START 2017/11/29 K.Kojima [QC#21918,MOD]
                                        // createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl);
                                        // START 2019/03/11 [QC#30675, MOD]
                                        // createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl, svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue(), dsContrTMsg.dsContrCatgCd.getValue());
                                        SVC_INV_LINE_ALLOCTMsg addlSvcInvLineAllocTMsg = createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl, svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue(), dsContrTMsg.dsContrCatgCd.getValue());
                                        if (addlSvcInvLineAllocTMsg == null) {
                                            Key key = new Key();
                                            key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                            key.add("SVC_CONTR_ADDL_CHRG_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue());
                                            addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE_ALLOC.TOC_CD", key.toString());
                                            rollback();
                                            continue SVC_INV;
                                        }
                                        // END 2019/03/11 [QC#30675, MOD]
                                        // END 2017/11/29 K.Kojima [QC#21918,MOD]
                                        // Mod End   2016/11/10 <QC#15789>
                                    }
                                    // Create SVC_INV_LINE_ADDL_CHRG
                                    BigDecimal addlSvcInvLinePk = addlSvcInvLineTMsg.svcInvLinePk.getValue();
                                    createSvcInvLineAddlChrg(addlSvcInvLinePk, svcContrBllgPk, svcContrAddlChrgBllgTMsg);

                                    lineNum++;
                                }

                            }
                            // QC2536 start
                        }
                        // QC2536 end

                        // ----------------------------------------------------------------------
                        // Meter Charge
                        // ----------------------------------------------------------------------
                        // QC2536 start
                        if (ZYPConstant.FLG_OFF_N.equals(invSeptBaseUsgFlg) || (ZYPConstant.FLG_ON_Y.equals(invSeptBaseUsgFlg) && ZYPConstant.FLG_ON_Y.equals(mtrBllgFlg))) {
                            // QC2536 end
                            // Add Start 2018/01/26 QC#23419
                            if (hasValue(dsContrTMsg.dsContrEdiCd) && DS_CONTR_EDI.CFS.equals(dsContrTMsg.dsContrEdiCd.getValue())) {
                                if (ZYPConstant.FLG_ON_Y.equals(dsContrTMsg.usgChrgToLeaseCmpyFlg.getValue())) {
                                    // No-AR
                                    usgDsInvTpTMsg = noARDsInvTpTMsg;
                                }
                            }
                            // Add End 2018/01/26 QC#23419
                            // START 2017/08/29 M.Kidokoro [QC#20079, ADD]
                            // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                            // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            // if (isMtrHldForSeparate(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) {
                            // START 2022/02/09 S.Kitamura [QC#59683, MOD]
                            // if (isUnbllblForSeparate(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                            if (isUnbllblForSeparate(allLineTogetherFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                            // END 2022/02/09 S.Kitamura [QC#59683, MOD]
                            // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                                continue;
                            }
                            // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                            // END 2017/08/29 M.Kidokoro [QC#20079, ADD]

                            // QC2973 start
                            List<List<SVC_INV_LINE_ALLOCTMsg>> svcInvLineAllocTMsgListList = new ArrayList<List<SVC_INV_LINE_ALLOCTMsg>>();
                            // QC2973 end

//                            // QC2848 start
//                            Map<String, String> svcContrBllgPkMap = new HashMap<String, String>();
//                            Map<String, SVC_INV_LINETMsg> svcInvLineTMsgMap = new HashMap<String, SVC_INV_LINETMsg>();
//                            BigDecimal svcInvLinePk = null;
//                            // QC2848 end

                            svcInvChrgTpCd = SVC_INV_CHRG_TP.METER_CHARGE;

                            SVC_CONTR_MTR_BLLGTMsgArray svcContrMtrBllgTMsgArray = getSvcContrMtrBllgList(svcContrBllgPk);
                            for (int i = 0; i < svcContrMtrBllgTMsgArray.length(); i++) {
//                                // QC2848 start
//                                if (svcContrBllgPkMap.size() != 0 && svcContrBllgPkMap.containsKey(svcContrBllgPk.toString())) {
//                                    lineNum--;
//                                } else {
//                                    svcInvLinePk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_SQ");
//                                }
//                                // QC2848 end

                                // QC2848 start
                                BigDecimal svcInvLinePk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_SQ");
                                // QC2848 end
                                String svcInvLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);

                                BigDecimal svcInvLineMtrPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_MTR_SQ");

                                SVC_CONTR_MTR_BLLGTMsg svcContrMtrBllgTMsg = svcContrMtrBllgTMsgArray.no(i);

                                BigDecimal totXsMtrChrgDealAmt = BigDecimal.ZERO;
                                BigDecimal totXsMtrChrgFuncAmt = BigDecimal.ZERO;

                                // ----------------------------------------------------------------------
                                // Create SVC_INV_LINE_XS_MTR
                                // ----------------------------------------------------------------------
                                SVC_CONTR_XS_MTR_BLLGTMsgArray svcContrXsMtrBllgTMsgArray = getSvcContrXsMtrBllgList(svcContrMtrBllgTMsg.svcContrMtrBllgPk.getValue());
                                for (int j = 0; j < svcContrXsMtrBllgTMsgArray.length(); j++) {

                                    SVC_CONTR_XS_MTR_BLLGTMsg svcContrXsMtrBllgTMsg = svcContrXsMtrBllgTMsgArray.no(j);

                                    BigDecimal svcInvLineXsMtrPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_XS_MTR_SQ");

                                    BigDecimal xsMtrChrgDealAmt = svcContrXsMtrBllgTMsg.xsMtrChrgDealAmt.getValue();
                                    BigDecimal xsMtrChrgFuncAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, xsMtrChrgDealAmt, funcCcyAftDeclPntDigitNum);

                                    totXsMtrChrgDealAmt = totXsMtrChrgDealAmt.add(xsMtrChrgDealAmt);
                                    totXsMtrChrgFuncAmt = totXsMtrChrgFuncAmt.add(xsMtrChrgFuncAmt);

                                    SVC_INV_LINE_XS_MTRTMsg svcInvLineXsMtrTMsg = new SVC_INV_LINE_XS_MTRTMsg();
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.glblCmpyCd, glblCmpyCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcInvLineXsMtrPk, svcInvLineXsMtrPk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcInvLinePk, svcInvLinePk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcInvNum, svcInvNum);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcInvLineNum, svcInvLineNum);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcInvLineMtrPk, svcInvLineMtrPk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.dsContrBllgMtrPk, svcContrXsMtrBllgTMsg.dsContrBllgMtrPk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.dsContrBllgMtrId, svcContrXsMtrBllgTMsg.dsContrBllgMtrId);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcContrXsMtrBllgPk, svcContrXsMtrBllgTMsg.svcContrXsMtrBllgPk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcContrMtrBllgPk, svcContrXsMtrBllgTMsg.svcContrMtrBllgPk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.contrXsCopyPk, svcContrXsMtrBllgTMsg.contrXsCopyPk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.xsMtrCopyQty, svcContrXsMtrBllgTMsg.xsMtrCopyQty);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.xsMtrChrgDealAmt, xsMtrChrgDealAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.xsMtrChrgFuncAmt, xsMtrChrgFuncAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.ccyCd, svcContrXsMtrBllgTMsg.ccyCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.xsMtrAmtRate, svcContrXsMtrBllgTMsg.xsMtrAmtRate);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.xsMtrFromCopyQty, svcContrXsMtrBllgTMsg.xsMtrFromCopyQty);
                                    // Mod Start 04/07/2016 <QC#6585>
                                    if (hasValue(svcContrXsMtrBllgTMsg.contrXsCopyPk)) {
                                        BigDecimal origXsMtrFromCopy = getOrigXsMtrFormCopyQty(svcContrBllgTMsg.dsContrBllgSchdPk.getValue(), svcContrXsMtrBllgTMsg.contrXsCopyPk.getValue());
                                        ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.origXsMtrFromCopyQty, origXsMtrFromCopy);
                                    }
                                    // Mod End 04/07/2016 <QC#6585>

                                    S21FastTBLAccessor.insert(svcInvLineXsMtrTMsg);
                                    if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineXsMtrTMsg.getReturnCode())) {
                                        throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE_XS_MTR" });
                                    }
                                }

                                // ----------------------------------------------------------------------
                                // Create SVC_INV_LINE_MTR
                                // ----------------------------------------------------------------------
                                SVC_INV_LINE_MTRTMsg svcInvLineMtrTMsg = new SVC_INV_LINE_MTRTMsg();
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.glblCmpyCd, glblCmpyCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcInvLineMtrPk, svcInvLineMtrPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcInvLinePk, svcInvLinePk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcInvNum, svcInvNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcInvLineNum, svcInvLineNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.dsContrBllgMtrPk, svcContrMtrBllgTMsg.dsContrBllgMtrPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.dsContrBllgMtrId, svcContrMtrBllgTMsg.dsContrBllgMtrId);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcContrMtrBllgPk, svcContrMtrBllgTMsg.svcContrMtrBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrChrgDealAmt, totXsMtrChrgDealAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrChrgFuncAmt, totXsMtrChrgFuncAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrEstFlg, svcContrMtrBllgTMsg.mtrEstFlg);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrCopyQty, svcContrMtrBllgTMsg.mtrCopyQty);
                                // QC2302 start
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.totCopyQty, svcContrMtrBllgTMsg.totCopyQty);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.testCopyQty, svcContrMtrBllgTMsg.testCopyQty);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.prevTotCopyQty, svcContrMtrBllgTMsg.prevTotCopyQty);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.bllgCopyQty, svcContrMtrBllgTMsg.bllgCopyQty);
                                // QC2302 end
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mdseCd, svcContrMtrBllgTMsg.mdseCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.ccyCd, svcContrMtrBllgTMsg.ccyCd);

                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.prevPhysMtrReadGrpSq, svcContrMtrBllgTMsg.prevPhysMtrReadGrpSq);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcPhysMtrReadGrpSq, svcContrMtrBllgTMsg.svcPhysMtrReadGrpSq);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.freeCopyCnt, svcContrMtrBllgTMsg.freeCopyCnt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.usgFreeCopyCnt, svcContrMtrBllgTMsg.usgFreeCopyCnt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.xsChrgTpCd, svcContrMtrBllgTMsg.xsChrgTpCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.rollOverRatio, svcContrMtrBllgTMsg.rollOverRatio);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.rollOverCnt, svcContrMtrBllgTMsg.rollOverCnt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.copyInclQty, svcContrMtrBllgTMsg.copyInclQty);
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.aggrAdjCopyQty, svcContrMtrBllgTMsg.aggrAdjCopyQty);
                                // START 04/08/2016 T.Aoyagi [QC#6762, MOD]
                                // START 2016/03/15 T.Aoyagi [QC#3818, MOD]
//                                String mtrLbDescTxt = getMtrLbDescTxt(svcContrMtrBllgTMsg.svcPhysMtrReadGrpSq.getValue(), svcContrMtrBllgTMsg.svcContrBllgPk.getValue());
                                Map<String, String> mtrLbInfo = getMtrLbDescTxt(svcContrMtrBllgTMsg.dsContrBllgMtrPk.getValue());
                                if (mtrLbInfo != null) {
                                // END 2016/03/15 T.Aoyagi [QC#3818, MOD]
                                    ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrLbDescTxt, mtrLbInfo.get("MTR_LB_DESC_TXT"));
                                    ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrLbCd, mtrLbInfo.get("MTR_LB_CD"));
                                }
                                // END 04/08/2016 T.Aoyagi [QC#6762, MOD]
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.contrMtrMultRate, svcContrMtrBllgTMsg.contrMtrMultRate);
                                svcInvLineMtrTMsg.prevMtrReadDt.clear();
                                svcInvLineMtrTMsg.mtrReadDt.clear();

                                S21FastTBLAccessor.insert(svcInvLineMtrTMsg);
                                if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineMtrTMsg.getReturnCode())) {
                                    throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE_MTR" });
                                }

                                // START 2018/04/26 K.Kojima [QC#23630,ADD]
                                insertDsContrBllgMtrUsed(svcInvLineMtrTMsg, svcContrBllgTMsg, svcContrMtrBllgTMsg);
                                // END 2018/04/26 K.Kojima [QC#23630,ADD]

                                BigDecimal mtrNetDealAmt = totXsMtrChrgDealAmt;
                                BigDecimal mtrNetFuncAmt = totXsMtrChrgFuncAmt;

                                // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                // NWZC036101PMsg taxApiPMsg = new NWZC036101PMsg();
                                // END 2018/05/31 K.Kojima [QC#23685,DEL]
                                String taxCalcGeoCd = "";
                                // START 2018/05/31 K.Kojima [QC#23685,MOD]
                                // BigDecimal mtrTaxRate;
                                // BigDecimal mtrTaxFuncAmt;
                                // BigDecimal mtrTaxDealAmt;
                                BigDecimal mtrTaxRate = BigDecimal.ZERO;
                                BigDecimal mtrTaxFuncAmt = BigDecimal.ZERO;
                                BigDecimal mtrTaxDealAmt = BigDecimal.ZERO;
                                // END 2018/05/31 K.Kojima [QC#23685,MOD]

                                // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                // // Mod Start 08/31/2016 <QC#13529>
                                // // if (BigDecimal.ZERO.compareTo(mtrNetFuncAmt) == 0) {
                                // // Mod Start 2018/01/26 QC#23419
                                // // if (BigDecimal.ZERO.compareTo(mtrNetFuncAmt) == 0 || !FLG_ON_Y.equals(dsInvTpTMsg.taxCalcFlg.getValue())) {
                                // if (BigDecimal.ZERO.compareTo(mtrNetFuncAmt) == 0 || !FLG_ON_Y.equals(usgDsInvTpTMsg.taxCalcFlg.getValue())) {
                                // // Mod End 2018/01/26 QC#23419
                                // // Mod End   08/31/2016 <QC#13529>
                                //     mtrTaxRate = BigDecimal.ZERO;
                                //     mtrTaxFuncAmt = BigDecimal.ZERO;
                                //     mtrTaxDealAmt = BigDecimal.ZERO;
                                // } else {
                                //     // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
                                //     // taxApiPMsg = callTaxCalcAPIForUsg(dsContrDtlInfo, svcContrBllgTMsg, mtrNetFuncAmt);
                                //     // START 2017/09/27 K.Yamada [QC#21233, MOD]
                                //     // taxApiPMsg = callTaxCalcAPIForUsg(dsContrDtlInfo, svcContrBllgTMsg, mtrNetFuncAmt, svcInvNum);
                                //     taxApiPMsg = callTaxCalcAPIForUsg(dsContrDtlInfo, svcContrBllgTMsg, mtrNetFuncAmt, svcInvNum, invDt);
                                //     // END 2017/09/27 K.Yamada [QC#21233, MOD]
                                //     // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
                                // 
                                //     if (S21ApiUtil.isXxMsgId(taxApiPMsg)) {
                                //         Key key = new Key();
                                //         key.add("DS_CONTR_PK", dsContrPk);
                                //         key.add("DS_CONTR_TP_CD", dsContrTMsg.dsContrTpCd.getValue());
                                //         key.add("SVC_CONFIG_MSTR_PK", svcConfigMstrPk);
                                //         key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                                //         key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                                //         key.add("SVC_INV_NUM", svcInvNum);
                                //         key.add("INV_DT", invDt);
                                //         key.add("SELL_TO_CUST_CD", sellToCustTMsg.sellToCustCd.getValue());
                                //         key.add("SHIP_TO_CUST_CD", shipToCustCd);
                                //         key.add("CTY_ADDR", shipToCustTMsg.ctyAddr.getValue());
                                //         key.add("ST_CD", shipToCustTMsg.stCd.getValue());
                                //         key.add("POST_CD", shipToCustTMsg.postCd.getValue());
                                //         key.add("SVC_INV_CHRG_TP_CD", svcInvChrgTpCd);
                                //         key.add("MTR_FUNC_AMT", mtrNetFuncAmt);
                                // 
                                //         List<String> msgIdList = S21ApiUtil.getXxMsgIdList(taxApiPMsg);
                                //         for (String msgId : msgIdList) {
                                //             addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0407E, "NWZC036101", S21MessageFunc.clspGetMessage(msgId), key.toString());
                                //         }
                                //         rollback();
                                //         continue SVC_INV;
                                //     }
                                //     taxCalcGeoCd = taxApiPMsg.taxCalculateOutputLine.no(0).taxAreaId.getValue();
                                //     mtrTaxRate = getTaxRate(taxApiPMsg);
                                //     mtrTaxFuncAmt = getTaxFuncAmt(taxApiPMsg).setScale(funcCcyAftDeclPntDigitNum.intValueExact(), RoundingMode.HALF_UP);
                                //     mtrTaxDealAmt = exchToDealAmt(actlExchRate, dealCcyAcctArthTpCd, mtrTaxFuncAmt, dealCcyAftDeclPntDigitNum);
                                // }
                                // END 2018/05/31 K.Kojima [QC#23685,DEL]

                                List<SVC_INV_LINE_ALLOCTMsg> svcInvLineAllocTMsgList = new ArrayList<SVC_INV_LINE_ALLOCTMsg>();

                                BigDecimal mtrDiscDealAmt = BigDecimal.ZERO;
                                BigDecimal mtrDiscFuncAmt = BigDecimal.ZERO;

                                // Add Start 2016/11/10 <QC#15789>
                                String ajeInvLineAllocCd = getAjeInvLineAllocCdForMtr(hasDsContrProcAllocForMtr, dsContrDtlInfo);
                                // Add End   2016/11/10 <QC#15789>
                                SVC_CONTR_BLLG_ALLOCTMsgArray svcContrBllgAllogTMsgArray = getSvcContrMtrBllgAllocList(svcContrMtrBllgTMsg.svcContrMtrBllgPk.getValue());
                                for (int j = 0; j < svcContrBllgAllogTMsgArray.length(); j++) {

                                    SVC_CONTR_BLLG_ALLOCTMsg svcContrBllgAllocTMsg = svcContrBllgAllogTMsgArray.no(j);

                                    BigDecimal allocDealGrsTotPrcAmt = svcContrBllgAllocTMsg.dealGrsTotPrcAmt.getValue();
                                    BigDecimal allocFuncGrsTotPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealGrsTotPrcAmt, funcCcyAftDeclPntDigitNum);
                                    BigDecimal allocDealNetUnitPrcAmt = svcContrBllgAllocTMsg.dealNetUnitPrcAmt.getValue();
                                    BigDecimal allocFuncNetUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealNetUnitPrcAmt, funcCcyAftDeclPntDigitNum);
                                    BigDecimal allocDealGrsUnitPrcAmt = svcContrBllgAllocTMsg.dealGrsUnitPrcAmt.getValue();
                                    BigDecimal allocFuncGrsUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealGrsUnitPrcAmt, funcCcyAftDeclPntDigitNum);
                                    BigDecimal allocInvLineDealNetAmt = svcContrBllgAllocTMsg.invLineDealNetAmt.getValue();
                                    BigDecimal allocInvLineFuncNetAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocInvLineDealNetAmt, funcCcyAftDeclPntDigitNum);
                                    // QC2417 start
                                    // dealGrsTotPrcAmt is not include
                                    // dealDiscUnitPrcAmt.
                                    allocDealGrsTotPrcAmt = allocDealGrsTotPrcAmt.add(svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue());
                                    // funcGrsTotPrcAmt is not include
                                    // funcDiscUnitPrcAmt.
                                    allocFuncGrsTotPrcAmt = allocFuncGrsTotPrcAmt.add(exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue(), funcCcyAftDeclPntDigitNum));
                                    // QC2417 end

                                    BigDecimal allocDealDiscUnitPrcAmt = svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue();
                                    BigDecimal allocFuncDiscUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealDiscUnitPrcAmt, funcCcyAftDeclPntDigitNum);

                                    // SVC_CONTR_MTR_BLLG: DISC_AMT = 0
                                    // SVC_CONTR_XS_MTR_BLLG: DISC_AMT = 0
                                    // but SVC_CONTR_BLLG_ALLOC has
                                    // DISC_AMT
                                    mtrDiscDealAmt = mtrDiscDealAmt.add(allocDealDiscUnitPrcAmt);
                                    mtrDiscFuncAmt = mtrDiscFuncAmt.add(allocFuncDiscUnitPrcAmt);

                                    // QC2973 start
                                    // BigDecimal svcInvLineAllocPk =
                                    // ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_ALLOC_SQ");
                                    // QC2848 start
                                    // String svcInvLineAllocNum =
                                    // String.format(SVC_INV_LINE_ALLOC_NUM_FMT,
                                    // j + 1);
                                    // int num = 0;
                                    // if
                                    // (svcContrBllgPkMap.containsKey(svcContrBllgPk.toString()))
                                    // {
                                    // num =
                                    // Integer.parseInt(svcContrBllgPkMap.get(svcContrBllgPk.toString()))
                                    // + j + 1;
                                    // } else {
                                    // num = j + 1;
                                    // }
                                    // String svcInvLineAllocNum =
                                    // String.format(SVC_INV_LINE_ALLOC_NUM_FMT,
                                    // num);
                                    // QC2848 end
                                    String svcInvLineAllocNum = String.format(SVC_INV_LINE_ALLOC_NUM_FMT, j + 1);
                                    // QC2973 end

                                    SVC_INV_LINE_ALLOCTMsg svcInvLineAllocTMsg = new SVC_INV_LINE_ALLOCTMsg();
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.glblCmpyCd, glblCmpyCd);
                                    // QC2973 start
                                    // ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineAllocPk,
                                    // svcInvLineAllocPk);
                                    // QC2973 end
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLinePk, svcInvLinePk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvNum, svcInvNum);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineNum, svcInvLineNum);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineAllocNum, svcInvLineAllocNum);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.contrPrcAllocTpCd, svcContrBllgAllocTMsg.contrPrcAllocTpCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.intgMdseCd, svcContrBllgAllocTMsg.intgMdseCd);
                                    // START 2017/11/29 K.Kojima [QC#21918,MOD]
                                    // ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.tocCd, svcContrBllgAllocTMsg.tocCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.tocCd, getSalesRep((BigDecimal) dsContrDtlInfo.get("SVC_MACH_MSTR_PK")));
                                    // END 2017/11/29 K.Kojima [QC#21918,MOD]
                                    // START 2019/03/11 [QC#30675, ADD]
                                    if (!hasValue(svcInvLineAllocTMsg.tocCd)) {
                                        Key key = new Key();
                                        key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                        key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE_ALLOC.TOC_CD", key.toString());
                                        rollback();
                                        continue SVC_INV;
                                    }
                                    // END 2019/03/11 [QC#30675, ADD]
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.slsAllocRate, svcContrBllgAllocTMsg.slsAllocRate);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealGrsTotPrcAmt, allocDealGrsTotPrcAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcGrsTotPrcAmt, allocFuncGrsTotPrcAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealNetUnitPrcAmt, allocDealNetUnitPrcAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcNetUnitPrcAmt, allocFuncNetUnitPrcAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealGrsUnitPrcAmt, allocDealGrsUnitPrcAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcGrsUnitPrcAmt, allocFuncGrsUnitPrcAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineDealNetAmt, allocInvLineDealNetAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineFuncNetAmt, allocInvLineFuncNetAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineDealTaxAmt, BigDecimal.ZERO);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineFuncTaxAmt, BigDecimal.ZERO);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealDiscUnitPrcAmt, allocDealDiscUnitPrcAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcDiscUnitPrcAmt, allocFuncDiscUnitPrcAmt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaCmpyCd, svcContrBllgAllocTMsg.coaCmpyCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaAfflCd, svcContrBllgAllocTMsg.coaAfflCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaBrCd, svcContrBllgAllocTMsg.coaBrCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaChCd, svcContrBllgAllocTMsg.coaChCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaCcCd, svcContrBllgAllocTMsg.coaCcCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaAcctCd, svcContrBllgAllocTMsg.coaAcctCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaProdCd, svcContrBllgAllocTMsg.coaProdCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaProjCd, svcContrBllgAllocTMsg.coaProjCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaExtnCd, svcContrBllgAllocTMsg.coaExtnCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.ccyCd, svcContrBllgAllocTMsg.ccyCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrBllgAllocPk, svcContrBllgAllocTMsg.svcContrBllgAllocPk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrBaseBllgPk, svcContrBllgAllocTMsg.svcContrBaseBllgPk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrMtrBllgPk, svcContrBllgAllocTMsg.svcContrMtrBllgPk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrAddlChrgBllgPk, svcContrBllgAllocTMsg.svcContrAddlChrgBllgPk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.trxCd, svcContrBllgAllocTMsg.trxCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.trxRsnCd, svcContrBllgAllocTMsg.trxRsnCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dfrdAcctgRuleCd, svcContrBllgAllocTMsg.dfrdAcctgRuleCd);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dfrdAcctgRuleDurnAot, svcContrBllgAllocTMsg.dfrdAcctgRuleDurnAot);
                                    // Add Start 2016/11/10 <QC#15789>
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.ajeInvLineAllocCd, ajeInvLineAllocCd);
                                    // Add End   2016/11/10 <QC#15789>
                                    // START 2016/06/20 T.Aoyagi [QC#9907, ADD]
                                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineSplTpCd, this.invLineSplTpMap.get(svcContrBllgAllocTMsg.svcContrBllgAllocPk.getValue()));
                                    // END 2016/06/20 T.Aoyagi [QC#9907, ADD]

                                    svcInvLineAllocTMsgList.add(svcInvLineAllocTMsg);
                                }

                                BigDecimal mtrSlsDealAmt = mtrNetDealAmt.add(mtrDiscDealAmt);
                                BigDecimal mtrSlsFuncAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, mtrSlsDealAmt, funcCcyAftDeclPntDigitNum);

                                invTotDealSlsAmt = invTotDealSlsAmt.add(mtrSlsDealAmt);
                                invTotFuncSlsAmt = invTotFuncSlsAmt.add(mtrSlsFuncAmt);
                                invTotDealTaxAmt = invTotDealTaxAmt.add(mtrTaxDealAmt);
                                invTotFuncTaxAmt = invTotFuncTaxAmt.add(mtrTaxFuncAmt);
                                invTotDealDiscAmt = invTotDealDiscAmt.add(mtrDiscDealAmt);
                                invTotFuncDiscAmt = invTotFuncDiscAmt.add(mtrDiscFuncAmt);
                                invTotDealNetAmt = invTotDealNetAmt.add(mtrNetDealAmt);
                                invTotFuncNetAmt = invTotFuncNetAmt.add(mtrNetFuncAmt);

                                // ----------------------------------------------------------------------
                                // Adjusting SVC_INV_LINE_ALLOC Fractions
                                // ----------------------------------------------------------------------
                                adjSvcInvLineAllocFrac(svcInvLineAllocTMsgList, mtrSlsDealAmt, mtrSlsFuncAmt, mtrDiscDealAmt, mtrDiscFuncAmt, mtrNetDealAmt, mtrNetFuncAmt, mtrTaxDealAmt, mtrTaxFuncAmt);

                                // ----------------------------------------------------------------------
                                // Create SVC_INV_LINE_ALLOC
                                // ----------------------------------------------------------------------
                                // QC2973 start
                                // for (SVC_INV_LINE_ALLOCTMsg
                                // svcInvLineAllocTMsg :
                                // svcInvLineAllocTMsgList) {
                                // S21FastTBLAccessor.insert(svcInvLineAllocTMsg);
                                // if
                                // (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineAllocTMsg.getReturnCode()))
                                // {
                                // throw new S21AbendException(NSZM0398E,
                                // new String[] {"SVC_INV_LINE_ALLOC" });
                                // }
                                // }
                                svcInvLineAllocTMsgListList.add(svcInvLineAllocTMsgList);
                                // QC2973 end

                                // ----------------------------------------------------------------------
                                // Create SVC_INV_LINE
                                // ----------------------------------------------------------------------
                                // QC2415 start
                                // SVC_INV_LINETMsg svcInvLineTMsg =
                                // getSvcInvLineTMsg(svcContrBllgPk,
                                // svcContrBllgFromDt, svcContrBllgThruDt,
                                // shipToCustCd, svcInvNum, svcInvLinePk,
                                // svcInvLineNum, svcInvChrgTpCd, mdseCd,
                                // mdseNm, mdlId, mdlNm,
                                // mtrTaxRate, mtrSlsDealAmt,
                                // mtrSlsFuncAmt,
                                // mtrDiscDealAmt, mtrDiscFuncAmt,
                                // mtrNetDealAmt, mtrNetFuncAmt,
                                // mtrTaxDealAmt, mtrTaxFuncAmt);
                                SVC_INV_LINETMsg svcInvLineTMsg = getSvcInvLineTMsg(shipToCustCd, svcInvNum, svcInvLinePk, svcInvLineNum, svcInvChrgTpCd, mdlNm,
                                        mtrTaxRate, mtrSlsDealAmt, mtrSlsFuncAmt, mtrDiscDealAmt, mtrDiscFuncAmt, mtrNetDealAmt, mtrNetFuncAmt, mtrTaxDealAmt, mtrTaxFuncAmt, taxCalcGeoCd,
                                        dsContrDtlInfo, dsContrTMsg, svcContrBllgTMsg, null, svcContrMtrBllgTMsg);
                                // QC2415 end

                                // START 2019/03/11 [QC#30675, ADD]
                                if (svcInvLineTMsg == null) {
                                    Key key = new Key();
                                    key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                    key.add("SVC_MACH_MSTR_PK", svcContrBllgTMsg.svcMachMstrPk.getValue());
                                    addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE.SLS_REP_TOC_CD", key.toString());
                                    rollback();
                                    continue SVC_INV;
                                }
                                // END 2019/03/11 [QC#30675, ADD]
                                //Add Start 06/16/2016 <QC#7636>
                                if (minBllgPerFromDt == null || minBllgPerFromDt.compareTo(svcInvLineTMsg.bllgPerFromDt.getValue()) > 0) {
                                    minBllgPerFromDt = svcInvLineTMsg.bllgPerFromDt.getValue();
                                }
                                if (maxBllgPerThruDt == null || maxBllgPerThruDt.compareTo(svcInvLineTMsg.bllgPerThruDt.getValue()) < 0) {
                                    maxBllgPerThruDt = svcInvLineTMsg.bllgPerThruDt.getValue();
                                }
                                //Add End   06/16/2016 <QC#7636>

                                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrPk, svcContrBllgTMsg.dsContrPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrDtlPk, svcContrBllgTMsg.dsContrDtlPk);
                                svcInvLineTMsg.svcContrBaseBllgPk.clear();

                                // add start 2018/08/09 QC#27329-3
                                if (INV_TP.CREDIT_MEMO.equals(svcContrBllgTMsg.invTpCd.getValue()) && hasValue(svcContrBllgTMsg.origSvcInvNum)) {
                                    setOrigSvcInvLineInfo(svcInvLineTMsg, svcContrBllgTMsg.origSvcInvNum.getValue(), svcContrBllgTMsg.dsContrBllgSchdPk.getValue());
                                }
                                // add end 2018/08/09 QC#27329-3

                               // QC2848 start
                                S21FastTBLAccessor.insert(svcInvLineTMsg);
                                if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineTMsg.getReturnCode())) {
                                    throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE" });
                                }

                                // START 2017/09/08 M.Kidokoro [QC#20983, ADD]
                                insertSvcInvLineFlg = true;
                                // END 2017/09/08 M.Kidokoro [QC#20983, ADD]

//                                if (svcContrBllgPkMap.containsKey(svcContrBllgPk.toString())) {
//                                    int count = Integer.parseInt(svcContrBllgPkMap.get(svcContrBllgPk.toString())) + svcContrBllgAllogTMsgArray.length();
//                                    svcContrBllgPkMap.put(svcContrBllgPk.toString(), String.valueOf(count));
//                                    SVC_INV_LINETMsg updateSvcInvLineTMsg = (SVC_INV_LINETMsg) svcInvLineTMsgMap.get(svcContrBllgPk.toString());
//                                    updateSvcInvLineTMsg(updateSvcInvLineTMsg, svcInvLineTMsg);
//                                } else {
//                                    svcContrBllgPkMap.put(svcContrBllgPk.toString(), String.valueOf(svcContrBllgAllogTMsgArray.length()));
//                                    svcInvLineTMsgMap.put(svcContrBllgPk.toString(), svcInvLineTMsg);
//                                }
//                                // QC2848 end

                                // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                // // SVC_INV_LINE_TAX_DTL
                                // createSvcInvLineTaxDtl(svcInvLinePk, (String) dsContrDtlInfo.get("CCY_CD"), taxApiPMsg);
                                // END 2018/05/31 K.Kojima [QC#23685,DEL]

                                lineNum++;

                                // ----------------------------------------------------------------------
                                // Additional Charge
                                // ----------------------------------------------------------------------
                                List<Map<String, BigDecimal>> addlChrgBllgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                                for (Map<String, BigDecimal> addlChrgBllgInfo : addlChrgBllgInfoList) {

                                    BigDecimal addlSvcContrBllgPk = addlChrgBllgInfo.get("SVC_CONTR_BLLG_PK");
                                    SVC_CONTR_BLLGTMsg addlSvcContrBllgTMsg = getSvcContrBllg(addlSvcContrBllgPk);
                                    BigDecimal addlChrgBllgPk = addlChrgBllgInfo.get("SVC_CONTR_ADDL_CHRG_BLLG_PK");
                                    SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg = getSvcContrAddlChrgBllgTMsg(addlChrgBllgPk);
                                    String addlSvcInvLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);
                                    // tax API
                                    BigDecimal taxDealAmt = BigDecimal.ZERO;
                                    BigDecimal taxFuncAmt = BigDecimal.ZERO;
                                    // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                    // // Mod Start 08/31/2016 <QC#13529>
                                    // NWZC036101PMsg addlTaxApiPMsg = null;
                                    // // Mod Start 2018/01/26 QC#23419
                                    // // if (FLG_ON_Y.equals(dsInvTpTMsg.taxCalcFlg.getValue())) {
                                    // if (FLG_ON_Y.equals(usgDsInvTpTMsg.taxCalcFlg.getValue())) {
                                    // // Mod End 2018/01/26 QC#23419
                                    //     // Mod Start 04/04/2016 <QC#6492>
                                    //     // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
                                    //     // addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue());
                                    //     // START 2017/09/27 K.Yamada [QC#21233, MOD]
                                    //     // addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue(), svcInvNum);
                                    //     addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue(), svcInvNum, invDt);
                                    //     // END 2017/09/27 K.Yamada [QC#21233, MOD]
                                    //     // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
                                    //     // Mod End 04/04/2016 <QC#6492>
                                    //     if (S21ApiUtil.isXxMsgId(addlTaxApiPMsg)) {
                                    //         Key key = new Key();
                                    //         key.add("DS_CONTR_PK", dsContrPk);
                                    //         key.add("DS_CONTR_TP_CD", dsContrTMsg.dsContrTpCd.getValue());
                                    //         key.add("SVC_CONFIG_MSTR_PK", svcConfigMstrPk);
                                    //         key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                                    //         // START 2016/12/13 N.Arai [QC#16400, MOD]
                                    //         //key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                                    //         key.add("SVC_CONTR_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrBllgPk.getValue());
                                    //         // END 2016/12/13 N.Arai [QC#16400, MOD]
                                    //         key.add("SVC_INV_NUM", svcInvNum);
                                    //         key.add("INV_DT", invDt);
                                    //         key.add("SELL_TO_CUST_CD", sellToCustTMsg.sellToCustCd.getValue());
                                    //         key.add("SHIP_TO_CUST_CD", shipToCustCd);
                                    //         key.add("CTY_ADDR", shipToCustTMsg.ctyAddr.getValue());
                                    //         key.add("ST_CD", shipToCustTMsg.stCd.getValue());
                                    //         key.add("POST_CD", shipToCustTMsg.postCd.getValue());
                                    //         key.add("SVC_INV_CHRG_TP_CD", svcInvChrgTpCd);
                                    //         key.add("FUNC_AMT", svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue());
                                    // 
                                    //         List<String> msgIdList = S21ApiUtil.getXxMsgIdList(addlTaxApiPMsg);
                                    //         for (String msgId : msgIdList) {
                                    //             addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0407E, "NWZC036101", S21MessageFunc.clspGetMessage(msgId), key.toString());
                                    //         }
                                    //         rollback();
                                    //         continue SVC_INV;
                                    //     }
                                    //     taxFuncAmt = getTaxFuncAmt(addlTaxApiPMsg).setScale(funcCcyAftDeclPntDigitNum.intValueExact(), RoundingMode.HALF_UP);
                                    //     taxDealAmt = exchToDealAmt(actlExchRate, dealCcyAcctArthTpCd, taxFuncAmt, dealCcyAftDeclPntDigitNum);
                                    // }
                                    // // Mod End   08/31/2016 <QC#13529>
                                    // END 2018/05/31 K.Kojima [QC#23685,DEL]

                                    // Create SVC_INV_LINE
                                    //Mod Start 05/25/2016 <QC#7636>
                                    // START 2017/11/17 K.Kojima [QC#21918,MOD]
                                    // SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, addlTaxApiPMsg, taxDealAmt, taxFuncAmt, shipToCustCd);
                                    // SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, addlTaxApiPMsg, taxDealAmt, taxFuncAmt, shipToCustCd);
                                    // START 2018/05/31 K.Kojima [QC#23685,MOD]
                                    // SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, addlTaxApiPMsg, taxDealAmt, taxFuncAmt, shipToCustCd, dsContrTMsg);
                                    SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, taxDealAmt, taxFuncAmt, shipToCustCd, dsContrTMsg);
                                    // END 2018/05/31 K.Kojima [QC#23685,MOD]
                                    // END 2017/11/17 K.Kojima [QC#21918,MOD]
                                    //Mod End   05/25/2016 <QC#7636>
                                    // START 2019/03/11 [QC#30675, ADD]
                                    if (addlSvcInvLineTMsg == null) {
                                        Key key = new Key();
                                        key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                        key.add("SVC_CONTR_ADDL_CHRG_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue());
                                        addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE.SLS_REP_TOC_CD", key.toString());
                                        rollback();
                                        continue SVC_INV;
                                    }
                                    // END 2019/03/11 [QC#30675, ADD]

                                    // Add Start 08/08/2016 <QC#8293>
                                    invTotDealSlsAmt = invTotDealSlsAmt.add(addlSvcInvLineTMsg.invLineDealSlsAmt.getValue());
                                    invTotFuncSlsAmt = invTotFuncSlsAmt.add(addlSvcInvLineTMsg.invLineFuncSlsAmt.getValue());
                                    invTotDealTaxAmt = invTotDealTaxAmt.add(addlSvcInvLineTMsg.invLineDealTaxAmt.getValue());
                                    invTotFuncTaxAmt = invTotFuncTaxAmt.add(addlSvcInvLineTMsg.invLineFuncTaxAmt.getValue());
                                    invTotDealDiscAmt = invTotDealDiscAmt.add(addlSvcInvLineTMsg.invLineDealDiscAmt.getValue());
                                    invTotFuncDiscAmt = invTotFuncDiscAmt.add(addlSvcInvLineTMsg.invLineFuncDiscAmt.getValue());
                                    invTotDealNetAmt = invTotDealNetAmt.add(addlSvcInvLineTMsg.invLineDealNetAmt.getValue());
                                    invTotFuncNetAmt = invTotFuncNetAmt.add(addlSvcInvLineTMsg.invLineFuncNetAmt.getValue());
                                    // Add End   08/08/2016 <QC#8293>
                                    // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                    // createSvcInvLineTaxDtl(addlSvcInvLineTMsg.svcInvLinePk.getValue(), (String) dsContrDtlInfo.get("CCY_CD"), addlTaxApiPMsg);
                                    // END 2018/05/31 K.Kojima [QC#23685,DEL]

                                    // Add Start 2016/11/10 <QC#15789>
                                    String ajeInvLineAllocCdForAddl = getAjeInvLineAllocCdForAddl(hasDsContrProcAllocForAddl, SVC_INV_CHRG_TP.METER_CHARGE, svcContrAddlChrgBllgTMsg);
                                    // Add End   2016/11/10 <QC#15789>
                                    List<BigDecimal> addlAllocPkList = getSvcContrBllgAllocPkForAddl(addlChrgBllgPk);
                                    for (int j = 0; j < addlAllocPkList.size(); j++) {
                                        SVC_CONTR_BLLG_ALLOCTMsg svcContrBllgAllocTMsg = getSvcContrBllgAllocTMsg(addlAllocPkList.get(j));

                                        // Mod Start 2016/11/10 <QC#15789>
                                        // Create SVC_INV_LINE_ALLOC
                                        // START 2017/11/29 K.Kojima [QC#21918,MOD]
                                        // createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl);
                                        // START 2019/03/11 [QC#30675, MOD]
                                        // createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl, svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue(), dsContrTMsg.dsContrCatgCd.getValue());
                                        SVC_INV_LINE_ALLOCTMsg addlSvcInvLineAllocTMsg = createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl, svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue(), dsContrTMsg.dsContrCatgCd.getValue());
                                        if (addlSvcInvLineAllocTMsg == null) {
                                            Key key = new Key();
                                            key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                            key.add("SVC_CONTR_ADDL_CHRG_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue());
                                            addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE_ALLOC.TOC_CD", key.toString());
                                            rollback();
                                            continue SVC_INV;
                                        }
                                        // END 2019/03/11 [QC#30675, MOD]
                                        // END 2017/11/29 K.Kojima [QC#21918,MOD]
                                        // Mod End   2016/11/10 <QC#15789>
                                    }
                                    // Create SVC_INV_LINE_ADDL_CHRG
                                    BigDecimal addlSvcInvLinePk = addlSvcInvLineTMsg.svcInvLinePk.getValue();
                                    createSvcInvLineAddlChrg(addlSvcInvLinePk, svcContrBllgPk, svcContrAddlChrgBllgTMsg);

                                    lineNum++;
                                }

                            }
                            // QC2973 start
                            List<SVC_INV_LINE_ALLOCTMsg> svcInvLineAllocTMsgList = mergeSvcInvLineAllocTMsg(svcInvLineAllocTMsgListList);
                            for (SVC_INV_LINE_ALLOCTMsg svcInvLineAllocTMsg : svcInvLineAllocTMsgList) {
                                S21FastTBLAccessor.insert(svcInvLineAllocTMsg);
                                if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineAllocTMsg.getReturnCode())) {
                                    throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE_ALLOC" });
                                }
                            }
                            // QC2973 end

//                            // QC2848 start
//                            Iterator<SVC_INV_LINETMsg> ite = svcInvLineTMsgMap.values().iterator();
//                            while (ite.hasNext()) {
//                                SVC_INV_LINETMsg svcInvLineTMsg = ite.next();
//                                S21FastTBLAccessor.insert(svcInvLineTMsg);
//                                if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineTMsg.getReturnCode())) {
//                                    throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE" });
//                                }
//                            }
//                            // QC2848 end

                            // QC2536 start
                        }
                        // QC2536 end
                    }
                    // START 2017/09/08 M.Kidokoro [QC#20983, ADD]
                    if (!insertSvcInvLineFlg) {
                        rollback();
                        continue;
                    }
                    // END 2017/09/08 M.Kidokoro [QC#20983, ADD]

                    // ----------------------------------------------------------------------
                    // SVC_INV
                    // ----------------------------------------------------------------------
                    // Del Start 2018/01/24 QC#23684 Temporarily Fixed
//                    BigDecimal svcInvPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_SQ");
                    // Del End 2018/01/24 QC#23684 Temporarily Fixed

                    // 2(15) Create SVC_INV
                    SVC_INVTMsg svcInvTMsg = new SVC_INVTMsg();
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.glblCmpyCd, glblCmpyCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvPk, svcInvPk);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvNum, svcInvNum);
                    svcInvTMsg.svcSmryInvNum.clear();
                    svcInvTMsg.fsrNum.clear();
                    svcInvTMsg.fsrVisitNum.clear();
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invDt, invDt);

//                    // 2(13) INV_TP
//                    String invTpCd;
//                    if (invTotDealNetAmt.compareTo(BigDecimal.ZERO) < 0) {
//                        invTpCd = INV_TP.CREDIT_MEMO;
//                    } else {
//                        invTpCd = INV_TP.INVOICE;
//                    }
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTpCd, mainSvcContrBllgTMsg.invTpCd);

                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvStsCd, SVC_INV_STS.PRINTED);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvSrcTpCd, SVC_INV_SRC_TP.CONTRACT);
                    //Mod Start 06/16/2016 <QC#7636>
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.bllgPerFromDt, minBllgPerFromDt);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.bllgPerToDt, maxBllgPerThruDt);
                    //Mod End   06/16/2016 <QC#7636>
                    svcInvTMsg.sellToCustCd.clear();
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCustCd, mainSvcContrBllgTMsg.billToCustCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.shipToCustCd, mainShipToCustTMsg.shipToCustCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.dealCcyCd, dsContrTMsg.ccyCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.mdseCd, (String) mainUnitInfo.get("MDSE_CD"));
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcMachMstrPk, (BigDecimal) mainUnitInfo.get("SVC_MACH_MSTR_PK"));
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.mdseNm, (String) mainUnitInfo.get("MDSE_NM"));
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.mdlId, (BigDecimal) mainUnitInfo.get("MDL_ID"));
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.mdlNm, (String) mainUnitInfo.get("MDL_NM"));
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ccyExchRate, acctDlyActlExchRatesTMsg.actlExchRate);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotDealSlsAmt, invTotDealSlsAmt);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotFuncSlsAmt, invTotFuncSlsAmt);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotDealTaxAmt, invTotDealTaxAmt);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotFuncTaxAmt, invTotFuncTaxAmt);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotDealDiscAmt, invTotDealDiscAmt);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotFuncDiscAmt, invTotFuncDiscAmt);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotDealNetAmt, invTotDealNetAmt);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotFuncNetAmt, invTotFuncNetAmt);
                    svcInvTMsg.techCd.clear();
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsContrPk, dsContrPk);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsContrNum, dsContrTMsg.dsContrNum);
                    svcInvTMsg.dsContrDtlPk.clear();
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.serNum, (String) mainUnitInfo.get("SER_NUM"));
                    // add start 2016/07/27 T.Aoyagi QC#10390
                    if (hasValue(mainSvcContrBllgTMsg.svcCrRebilPk)) {
                        setPmtTermInfo(svcInvTMsg, mainSvcContrBllgTMsg);
                    } else {
                    // add end 2016/07/27 T.Aoyagi QC#10390
                        // mod start 2019/05/10 K.Fujimoto QC#50296
                        // ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermCashDiscCd, dsContrTMsg.pmtTermCashDiscCd);
                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermCashDiscCd, pmtTermCashDiscTMsg.pmtTermCashDiscCd);
                        // mod end 2019/05/10 K.Fujimoto QC#50296
                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermCd, pmtTermTMsg.pmtTermCd);
                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermCashDiscDescTxt, pmtTermCashDiscTMsg.pmtTermCashDiscDescTxt);
                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermStartDt, pmtTermStartDt);
                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.invDueDt, invDueDt);
                    // add start 2016/07/27 T.Aoyagi QC#10390
                    }
                    // add end 2016/07/27 T.Aoyagi QC#10390
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.remToLocNm, remToTMsg.locNm);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.remToAddlLocNm, remToTMsg.addlLocNm);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.remId, remToTMsg.remId);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcNm, glblCmpyTMsg.glblCmpyNm);
                    //Del Start 02/04/2016 <QC#3947>
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcBrCd, brTMsg.brCd);
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcFirstLineAddr, brTMsg.firstLineAddr);
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcScdLineAddr, brTMsg.scdLineAddr);
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcThirdLineAddr, brTMsg.thirdLineAddr);
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcFrthLineAddr, brTMsg.frthLineAddr);
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcCtyAddr, brTMsg.ctyAddr);
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcStCd, brTMsg.stCd);
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcProvNm, brTMsg.provNm);
//                    if (ofcCntyTMsg == null) {
//                        svcInvTMsg.ofcCntyNm.clear();
//                    } else {
//                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcCntyNm, ofcCntyTMsg.cntyNm);
//                    }
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcPostCd, brTMsg.postCd);
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcCtryCd, brTMsg.ctryCd);
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcTelNum, brTMsg.telNum);
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcFaxNum, brTMsg.faxNum);
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcLocNm, brTMsg.locNm);
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcAddlLocNm, brTMsg.addlLocNm);
                    //Del End   02/04/2016 <QC#3947>
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToLocNm, sellToCustTMsg.locNm);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToAddlLocNm, sellToCustTMsg.addlLocNm);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToFirstLineAddr, sellToCustTMsg.firstLineAddr);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToScdLineAddr, sellToCustTMsg.scdLineAddr);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToThirdLineAddr, sellToCustTMsg.thirdLineAddr);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToFrthLineAddr, sellToCustTMsg.frthLineAddr);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToCtyAddr, sellToCustTMsg.ctyAddr);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToProvNm, sellToCustTMsg.provNm);
                    if (sellToCntyTMsg == null) {
                        svcInvTMsg.sellToCntyNm.clear();
                    } else {
                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToCntyNm, sellToCntyTMsg.cntyNm);
                    }
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToStCd, sellToCustTMsg.stCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToPostCd, sellToCustTMsg.postCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToCtryCd, sellToCustTMsg.ctryCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToFirstRefCmntTxt, sellToCustTMsg.firstRefCmntTxt);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToScdRefCmntTxt, sellToCustTMsg.scdRefCmntTxt);

                    SVC_CR_REBIL_DTLTMsg svcCrRebilDtlTMsg = getSvcCrRebilDtlTMsg(mainSvcContrBllgTMsg.svcCrRebilDtlPk.getValue());
                    String invPrintStsCd = ZYPConstant.FLG_ON_1;
                    if (svcCrRebilDtlTMsg != null) {
                        if (ZYPConstant.FLG_OFF_N.equals(svcCrRebilDtlTMsg.invPrintFlg)) {
                            invPrintStsCd = PROCESSED_2;
                        }
                    }
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invPrintStsCd, invPrintStsCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invMlSendStsCd, PROCESSED_2);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invEdiSendStsCd, PROCESSED_2);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invFaxSendStsCd, PROCESSED_2);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invEmlSendStsCd, PROCESSED_2);

                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.origSvcInvNum, mainSvcContrBllgTMsg.origSvcInvNum);
                    svcInvTMsg.svcInvRefNum.clear();
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvOmLinkFlg, ZYPConstant.FLG_OFF_N);
                    // Mod Start 2019/01/25 QC#29689
                    // Mod Start 2019/01/21 QC#26928
                    Map<String, Object> crCardPoInfo = getDsContrCrCardPo(mainSvcContrBllgTMsg.dsContrPk.getValue()
                                                                    , mainSvcContrBllgTMsg.dsContrDtlPk.getValue()
                    // START 2016/10/18 T.Kanasaka [QC#13009, MOD]
//                                                                    , mainSvcContrBllgTMsg.dsContrBllgMtrPk.getValue());
                                                                    , mainSvcContrBllgTMsg.dsContrBllgMtrPk.getValue()
                                                                    , dsContrTMsg.pmtTermCashDiscCd.getValue()
                                                                    , mainSvcContrBllgTMsg.svcContrBllgThruDt.getValue()
                    // START 2023/08/30 [QC#61805,ADD]
                                                                    , mainSvcContrBllgTMsg.svcContrBllgFromDt.getValue()
                    // END 2023/08/30 [QC#61805,ADD]
                                                                    , null);
                    // END 2016/10/18 T.Kanasaka [QC#13009, MOD]
                    // Mod End 2019/01/21 QC#26928
                    // Mod End 2019/01/25 QC#29689
                    if (crCardPoInfo != null) {
                        // START 2016/06/15 T.Kanasaka [QC#9869, MOD]
//                        if (dsContrTMsg.custPoNum.getValue().equals((String) crCardPoInfo.get("CUST_PO_NUM"))) {
//                            ZYPEZDItemValueSetter.setValue(svcInvTMsg.custIssPoNum, dsContrTMsg.custPoNum);
//                        }
//                        if (dsContrTMsg.poDt.getValue().equals((String) crCardPoInfo.get("PO_DT"))) {
//                            ZYPEZDItemValueSetter.setValue(svcInvTMsg.custIssPoDt, dsContrTMsg.poDt);
//                        }
                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.custIssPoNum, (String) crCardPoInfo.get("CUST_PO_NUM"));
                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.custIssPoDt, (String) crCardPoInfo.get("PO_DT"));
                        // END 2016/06/15 T.Kanasaka [QC#9869, MOD]
                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.crCardCustRefNum, (String) crCardPoInfo.get("CR_CARD_CUST_REF_NUM"));
                    }

                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.manCratInvFlg, ZYPConstant.FLG_OFF_N);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.slsSmryCratCpltFlg, ZYPConstant.FLG_OFF_N);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsContrCatgCd, dsContrTMsg.dsContrCatgCd);

                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.lineBizTpCd, dsContrTMsg.svcLineBizCd);
                    // Mod Start 08/31/2016 <QC#13529>
//                    DS_CONTR_CLSTMsg dsContrClsTMsg = getDsContrClsTMsg(dsContrTMsg.dsContrClsCd.getValue());
//                    if (dsContrClsTMsg != null) {
//                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsInvTpCd, dsContrClsTMsg.dsInvTpCd);
//                    }
                    // Mod Start 2018/01/26 QC#23419
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsInvTpCd, dsContrClsTMsg.dsInvTpCd);
                    if (!dsInvTpTMsg.dsInvTpCd.getValue().equals(baseDsInvTpTMsg.dsInvTpCd.getValue())) {
                        dsInvTpTMsg = baseDsInvTpTMsg;
                    } else if (!dsInvTpTMsg.dsInvTpCd.getValue().equals(usgDsInvTpTMsg.dsInvTpCd.getValue())) {
                        dsInvTpTMsg = usgDsInvTpTMsg;
                    }
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsInvTpCd, dsInvTpTMsg.dsInvTpCd);
                    // Mod End 2018/01/26 QC#23419
                    // Mod End   08/31/2016 <QC#13529>
                    Map<String, Object> billToCust = getBillToCust(sellToCustTMsg.sellToCustCd.getValue());
                    if (billToCust != null) {
                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCustAcctCd, (String) billToCust.get("SELL_TO_CUST_CD"));
                    }

                    // START 2018/07/25 K.Kitachi [QC#17068, MOD]
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ctacPsnPk, (BigDecimal) contrDtlInfoList.get(0).get("CTAC_PSN_PK"));
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ctacPsnPk, (BigDecimal) dsContrDtlInfoList.get(0).get("CTAC_PSN_PK"));
                    // END 2018/07/25 K.Kitachi [QC#17068, MOD]
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsAcctNum, dsContrTMsg.dsAcctNum);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcCrRebilPk, mainSvcContrBllgTMsg.svcCrRebilPk);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcCrRebilDtlPk, mainSvcContrBllgTMsg.svcCrRebilDtlPk);
                    SVC_CR_REBILTMsg svcCrRebilTMsg = getSvcCrRebilTMsg(mainSvcContrBllgTMsg.svcCrRebilPk.getValue());
                    if (svcCrRebilTMsg != null) {
                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.custCareTktNum, svcCrRebilTMsg.custIncdtId);
                    }
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToLocNm, billToCustTMsg.locNm);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToAddlLocNm, billToCustTMsg.addlLocNm);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToFirstLineAddr, billToCustTMsg.firstLineAddr);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToScdLineAddr, billToCustTMsg.scdLineAddr);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToThirdLineAddr, billToCustTMsg.thirdLineAddr);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToFrthLineAddr, billToCustTMsg.frthLineAddr);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCtyAddr, billToCustTMsg.ctyAddr);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToProvNm, billToCustTMsg.provNm);
                    if (billToCntyTMsg != null) {
                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCntyNm, billToCntyTMsg.cntyNm);
                    }
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToStCd, billToCustTMsg.stCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToPostCd, billToCustTMsg.postCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCtryCd, billToCustTMsg.ctryCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToFirstRefCmntTxt, billToCustTMsg.firstRefCmntTxt);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToScdRefCmntTxt, billToCustTMsg.firstRefCmntTxt);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.slsRepTocCd, dsContrTMsg.tocCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.shipToCustAcctCd, mainShipToCustTMsg.sellToCustCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvOmLinkStsCd, "0");
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.prcAllocByMachQtyFlg, dsContrTMsg.prcAllocByMachQtyFlg);

                    // START 05/10/2016 O.Okuma [QC#8107, ADD]
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.cfsLinkStsCd, CFS_LINK_STS.IN_COMPLETED);
                    // END 05/10/2016 O.Okuma [QC#8107, ADD]

                    // START 2018/05/31 K.Kojima [QC#23865,ADD]
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.tempSvcInvNumFlg, ZYPConstant.FLG_ON_Y);
                    // END 2018/05/31 K.Kojima [QC#23865,ADD]

                    // add start 2018/08/09 QC#27329-3
                    if (INV_TP.CREDIT_MEMO.equals(mainSvcContrBllgTMsg.invTpCd.getValue()) && hasValue(mainSvcContrBllgTMsg.origSvcInvNum)) {
                        setOrigSvcInvInfo(svcInvTMsg, mainSvcContrBllgTMsg.origSvcInvNum.getValue());
                    }
                    // add end 2018/08/09 QC#27329-3
                    // START 2022/02/09 S.Kitamura [QC#59683, ADD]
                    String contrLinkNum = rs.getString("CONTR_LINK_NUM");
                    if (ZYPCommonFunc.hasValue(contrLinkNum) && ZYPConstant.FLG_ON_Y.equals(allLineTogetherFlg)) {
                        if (DS_INV_TGTR_TP.BILL_ALL_BASE_TOGETHER_AND_ALL_USAGE_TOGETHER.equals(dsInvTgtrTpCd)) {
                            if (ZYPConstant.FLG_ON_Y.equals(baseBllgFlg)) {
                                contrLinkNum = contrLinkNum + "B";
                            } else if (ZYPConstant.FLG_ON_Y.equals(mtrBllgFlg)) {
                                contrLinkNum = contrLinkNum + "U";
                            }
                        }
                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.contrLinkNum, contrLinkNum);
                    }
                    // END 2022/02/09 S.Kitamura [QC#59683, ADD]

                    // START 2024/01/31 H.Iinuma [QC#61468,ADD]
                    if (hasValue(svcInvTMsg.svcCrRebilPk) && hasValue(svcInvTMsg.origSvcInvNum) && INV_TP.INVOICE.equals(svcInvTMsg.invTpCd.getValue())) {
                        List<FRT_CHRG_REPL_INFOTMsg> frtChrgReplInfoTMsgList = getFrtChrgReplInfoTMsgList(svcInvTMsg.origSvcInvNum.getValue());
                        for (FRT_CHRG_REPL_INFOTMsg frtChrgReplInfoTMsg : frtChrgReplInfoTMsgList) {
                            Map<String, Object> origSvcInvLine = getOrigSvcInvLineForFc(frtChrgReplInfoTMsg.svcInvNum.getValue(), frtChrgReplInfoTMsg.svcInvLineNum.getValue());
                            if (hasValue((BigDecimal) origSvcInvLine.get("SVC_INV_LINE_PK")) && !checkSvcInvLineForFcExists(svcInvNum, (BigDecimal) origSvcInvLine.get("SVC_MACH_MSTR_PK"))) {
                                SVC_INV_LINETMsg rebilSvcInvLineTMsg = createSvcInvLineForFc(origSvcInvLine);
                                BigDecimal dsContrBllgSchdPk = getDsContrBllgSchdPkForFc(svcInvNum, (BigDecimal) origSvcInvLine.get("SVC_MACH_MSTR_PK"));
                                ZYPEZDItemValueSetter.setValue(rebilSvcInvLineTMsg.svcInvNum, svcInvNum);
                                BigDecimal svcInvLinePk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_SQ");
                                String svcInvLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);
                                ZYPEZDItemValueSetter.setValue(rebilSvcInvLineTMsg.svcInvLinePk, svcInvLinePk);
                                ZYPEZDItemValueSetter.setValue(rebilSvcInvLineTMsg.svcInvLineNum, svcInvLineNum);
                                ZYPEZDItemValueSetter.setValue(rebilSvcInvLineTMsg.dsContrBllgSchdPk, dsContrBllgSchdPk);
                                S21FastTBLAccessor.insert(rebilSvcInvLineTMsg);
                                if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(rebilSvcInvLineTMsg.getReturnCode())) {
                                    throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE" });
                                }
                                ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.glblCmpyCd, glblCmpyCd);
                                ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.svcInvNum, svcInvNum);
                                ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.svcInvLineNum, svcInvLineNum);
                                ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.frtChrgReplStsCd, FRT_CHRG_REPL_STS.GENERATED);
                                S21FastTBLAccessor.insert(frtChrgReplInfoTMsg);
                                if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(frtChrgReplInfoTMsg.getReturnCode())) {
                                    throw new S21AbendException(NSZM0398E, new String[] {"FRT_CHRG_REPL_INFO" });
                                }
                                lineNum++;
                            }
                        }
                    } else {
                        List<Map<String, Object>> svcInvLineInfoList = getSvcInvLineInfoList(svcInvNum);
                        for (Map<String, Object> svcInvLineInfo : svcInvLineInfoList) {
                            if (!checkSvcInvLineForFcExists(svcInvNum, (BigDecimal) svcInvLineInfo.get("SVC_MACH_MSTR_PK"))) {
                                String bllgPerFromDt = null;
                                String bllgPerThruDt = null;
                                SVC_INV_LINETMsg svcInvLineTMsg = new SVC_INV_LINETMsg();
                                if (SVC_INV_CHRG_TP.METER_CHARGE.equals(svcInvLineInfo.get("SVC_INV_CHRG_TP_CD"))) {
                                    if (DS_CONTR_DTL_TP.BASE_AND_USAGE.equals(svcInvLineInfo.get("DS_CONTR_DTL_TP_CD")) && BLLG_TMG_TP.ADVANCE.equals(svcInvLineInfo.get("BASE_BLLG_TMG_CD"))
                                            && svcInvLineInfo.get("CONTR_EFF_THRU_DT").equals(svcInvLineInfo.get("BLLG_PER_THRU_DT"))) {
                                        List<Map<String, Object>> baseSvcInvLineList = getBaseSvcInvLineList(dsContrPk, (BigDecimal) svcInvLineInfo.get("SVC_MACH_MSTR_PK"));
                                        bllgPerFromDt = (String) baseSvcInvLineList.get(0).get("BLLG_PER_FROM_DT");
                                        bllgPerThruDt = (String) baseSvcInvLineList.get(0).get("BLLG_PER_THRU_DT");
                                        List<Map<String, Object>> mtrSvcInvLineList = getMtrSvcInvLineList(dsContrPk, (BigDecimal) svcInvLineInfo.get("SVC_MACH_MSTR_PK"));
                                        svcInvLineTMsg = createSvcInvLineForFc(mtrSvcInvLineList.get(0));
                                        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerFromDt, bllgPerFromDt);
                                        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerThruDt, bllgPerThruDt);
                                    }
                                } else if (SVC_INV_CHRG_TP.BASE_CHARGE.equals(svcInvLineInfo.get("SVC_INV_CHRG_TP_CD"))) {
                                    if (BLLG_TMG_TP.ADVANCE.equals(svcInvLineInfo.get("BASE_BLLG_TMG_CD"))) {
                                        List<Map<String, Object>> baseSvcInvLineList = getBaseSvcInvLineList(dsContrPk, (BigDecimal) svcInvLineInfo.get("SVC_MACH_MSTR_PK"));
                                        if (baseSvcInvLineList.size() > 1) {
                                            bllgPerFromDt = (String) baseSvcInvLineList.get(1).get("BLLG_PER_FROM_DT");
                                            bllgPerThruDt = (String) baseSvcInvLineList.get(1).get("BLLG_PER_THRU_DT");
                                            svcInvLineTMsg = createSvcInvLineForFc(baseSvcInvLineList.get(0));
                                            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerFromDt, bllgPerFromDt);
                                            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerThruDt, bllgPerThruDt);
                                        }
                                    } else if (BLLG_TMG_TP.ARREARS.equals(svcInvLineInfo.get("BASE_BLLG_TMG_CD"))) {
                                        List<Map<String, Object>> baseSvcInvLineList = getBaseSvcInvLineList(dsContrPk, (BigDecimal) svcInvLineInfo.get("SVC_MACH_MSTR_PK"));
                                        bllgPerFromDt = (String) baseSvcInvLineList.get(0).get("BLLG_PER_FROM_DT");
                                        bllgPerThruDt = (String) baseSvcInvLineList.get(0).get("BLLG_PER_THRU_DT");
                                        svcInvLineTMsg = createSvcInvLineForFc(baseSvcInvLineList.get(0));
                                    }
                                }
                                if (bllgPerFromDt != null && bllgPerThruDt != null) {
                                    if (checkCpoExists(dsContrTMsg.dsContrNum.getValue(), (BigDecimal) svcInvLineInfo.get("SVC_MACH_MSTR_PK"), bllgPerFromDt, bllgPerThruDt)) {
                                        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvNum, svcInvNum);
                                        BigDecimal svcInvLinePk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_SQ");
                                        String svcInvLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);
                                        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLinePk, svcInvLinePk);
                                        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLineNum, svcInvLineNum);
                                        S21FastTBLAccessor.insert(svcInvLineTMsg);
                                        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineTMsg.getReturnCode())) {
                                            throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE" });
                                        }
                                        FRT_CHRG_REPL_INFOTMsg frtChrgReplInfoTMsg = new FRT_CHRG_REPL_INFOTMsg();
                                        ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.glblCmpyCd, glblCmpyCd);
                                        ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.svcInvNum, svcInvNum);
                                        ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.svcInvLineNum, svcInvLineNum);
                                        ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.frtChrgReplStsCd, FRT_CHRG_REPL_STS.GENERATED);
                                        S21FastTBLAccessor.insert(frtChrgReplInfoTMsg);
                                        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(frtChrgReplInfoTMsg.getReturnCode())) {
                                            throw new S21AbendException(NSZM0398E, new String[] {"FRT_CHRG_REPL_INFO" });
                                        }
                                        lineNum++;
                                    }
                                }
                            }
                        }
                    }
                    // END 2024/01/31 H.Iinuma [QC#61468,ADD]

                    S21FastTBLAccessor.insert(svcInvTMsg);
                    if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvTMsg.getReturnCode())) {
                        throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV" });
                    }

                    for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
                        // START 2017/09/05 M.Kidokoro [QC#20079, ADD]
                        // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                        // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                        // if (isMtrHldForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) {
                        // START 2022/02/09 S.Kitamura [QC#59683, MOD]
                        // if (isUnbllblForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                        if (isUnbllblForTogether(allLineTogetherFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                        // END 2022/02/09 S.Kitamura [QC#59683, MOD]
                        // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            continue;
                        }
                        // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                        // if (isMtrHldForSeparate(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) {
                        //     if (ZYPConstant.FLG_ON_Y.equals((String) dsContrDtlInfo.get("USG_CHRG_FLG"))) {
                        //         continue;
                        //     }
                        // }
                        // START 2022/02/09 S.Kitamura [QC#59683, MOD]
                        // if (isUnbllblForSeparate(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                        if (isUnbllblForSeparate(allLineTogetherFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                        // END 2022/02/09 S.Kitamura [QC#59683, MOD]
                            continue;
                        }
                        // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                        // END 2017/09/05 M.Kidokoro [QC#20079, ADD]
                        // 7(5) Update SVC_CONTR_BLLG
                        BigDecimal svcContrBllgPk = (BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK");
                        SVC_CONTR_BLLGTMsg svcContrBllgTMsg = getSvcContrBllg(svcContrBllgPk);
                        // START 2019/11/08 K.Kitachi [QC#54368, ADD]
                        String grpSvcInvKey = createGrpSvcInvKey(svcContrBllgTMsg);
                        if(skipGrpSvcInvKeyList.contains(grpSvcInvKey)){
                            continue;
                        }
                        // END 2019/11/08 K.Kitachi [QC#54368, ADD]
                        ZYPEZDItemValueSetter.setValue(svcContrBllgTMsg.bllgCpltStsCd, BLLG_CPLT_STS.COMPLETED);
                        S21FastTBLAccessor.update(svcContrBllgTMsg);
                        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcContrBllgTMsg.getReturnCode())) {
                            Key key = new Key();
                            key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                            throw new S21AbendException(NSZM0399E, new String[] {"SVC_CONTR_BLLG", key.toString() });
                        }

                        // Additional Charge
                        List<Map<String, BigDecimal>> addlChrgBllgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                        for (Map<String, BigDecimal> addlChrgBllgInfo : addlChrgBllgInfoList) {

                            BigDecimal addlSvcContrBllgPk = addlChrgBllgInfo.get("SVC_CONTR_BLLG_PK");
                            SVC_CONTR_BLLGTMsg addlSvcContrBllgTMsg = getSvcContrBllg(addlSvcContrBllgPk);
                            ZYPEZDItemValueSetter.setValue(addlSvcContrBllgTMsg.bllgCpltStsCd, BLLG_CPLT_STS.COMPLETED);
                            S21FastTBLAccessor.update(addlSvcContrBllgTMsg);
                            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(addlSvcContrBllgTMsg.getReturnCode())) {
                                Key key = new Key();
                                key.add("SVC_CONTR_BLLG_PK", addlSvcContrBllgPk);
                                throw new S21AbendException(NSZM0399E, new String[] {"SVC_CONTR_BLLG", key.toString() });
                            }
                        }

                        // 7(6) Update DS_CONTR_DTL
                        baseBllgFlg = (String) dsContrDtlInfo.get("BASE_BLLG_FLG");
                        mtrBllgFlg = (String) dsContrDtlInfo.get("MTR_BLLG_FLG");
                        boolean reProcFlg = ZYPConstant.FLG_ON_Y.equals(svcContrBllgTMsg.bllgReProcFlg.getValue());

                        DS_CONTR_DTLTMsg dsContrDtlTMsg = getDsContrDtl(svcContrBllgTMsg.dsContrDtlPk.getValue());
                        if (!reProcFlg && ZYPConstant.FLG_ON_Y.equals(baseBllgFlg)) {
                            // QC2379 start
                            // ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.baseBllgLastBllgDt,
                            // svcContrBllgTMsg.baseBllgLastBllgDt);
                            if (ZYPCommonFunc.hasValue(dsContrDtlTMsg.baseBllgLastBllgDt)) {
                                if (ZYPDateUtil.compare(dsContrDtlTMsg.baseBllgLastBllgDt.getValue(), svcContrBllgTMsg.baseBllgNextBllgDt.getValue()) < 0) {
                                    ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.baseBllgLastBllgDt, svcContrBllgTMsg.baseBllgNextBllgDt);
                                }
                            } else {
                                ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.baseBllgLastBllgDt, svcContrBllgTMsg.baseBllgNextBllgDt);
                            }

                            // QC2379 end
                            if (ZYPCommonFunc.hasValue(dsContrDtlTMsg.baseInvUpToDt)) {
                                if (ZYPDateUtil.compare(dsContrDtlTMsg.baseInvUpToDt.getValue(), svcContrBllgTMsg.baseBllgInvUpToDt.getValue()) < 0) {
                                    ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.baseInvUpToDt, svcContrBllgTMsg.baseBllgInvUpToDt);
                                }
                            } else {
                                ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.baseInvUpToDt, svcContrBllgTMsg.baseBllgInvUpToDt);
                            }
                        }

                        if (!reProcFlg && ZYPConstant.FLG_ON_Y.equals(mtrBllgFlg)) {
                            // QC2379 start
                            // ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.mtrBllgLastBllgDt,
                            // svcContrBllgTMsg.mtrBllgLastBllgDt);
                            if (ZYPCommonFunc.hasValue(dsContrDtlTMsg.mtrBllgLastBllgDt)) {
                                if (ZYPDateUtil.compare(dsContrDtlTMsg.mtrBllgLastBllgDt.getValue(), svcContrBllgTMsg.mtrBllgNextBllgDt.getValue()) < 0) {
                                    ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.mtrBllgLastBllgDt, svcContrBllgTMsg.mtrBllgNextBllgDt);
                                }
                            } else {
                                ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.mtrBllgLastBllgDt, svcContrBllgTMsg.mtrBllgNextBllgDt);
                            }

                            // QC2379 end
                            if (ZYPCommonFunc.hasValue(dsContrDtlTMsg.mtrInvUpToDt)) {
                                if (ZYPDateUtil.compare(dsContrDtlTMsg.mtrInvUpToDt.getValue(), svcContrBllgTMsg.mtrBllgInvUpToDt.getValue()) < 0) {
                                    ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.mtrInvUpToDt, svcContrBllgTMsg.mtrBllgInvUpToDt);
                                }
                            } else {
                                ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.mtrInvUpToDt, svcContrBllgTMsg.mtrBllgInvUpToDt);
                            }
                        }

                        S21FastTBLAccessor.update(dsContrDtlTMsg);
                        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(dsContrDtlTMsg.getReturnCode())) {
                            Key key = new Key();
                            key.add("DS_CONTR_DTL_PK", dsContrDtlTMsg.dsContrDtlPk.getValue());
                            throw new S21AbendException(NSZM0399E, new String[] {"DS_CONTR_DTL", key.toString() });
                        }

                        // Update SVC_PHYS_MTR_READ
                        SVC_CONTR_MTR_BLLGTMsgArray svcContrMtrBllgTMsgArray = getSvcContrMtrBllgList(svcContrBllgPk);
                        for (int i = 0; i < svcContrMtrBllgTMsgArray.length(); i++) {

                            SVC_CONTR_MTR_BLLGTMsg svcContrMtrBllgTMsg = svcContrMtrBllgTMsgArray.no(i);

//                            String maxInvMtrReadDt = getMaxInvMtrReadDt(svcContrBllgTMsg.dsContrDtlPk.getValue(), svcContrBllgTMsg.svcMachMstrPk.getValue(), svcContrMtrBllgTMsg.dsContrBllgMtrPk.getValue(), svcContrMtrBllgTMsg.dsContrBllgMtrId
//                                    .getValue(), svcContrBllgTMsg.bllgReProcFlg.getValue(), svcContrMtrBllgTMsg.mtrBllgThruDt.getValue());
//
//                            String mtrBllgFromDt = null;
//                            if (ZYPCommonFunc.hasValue(maxInvMtrReadDt)) {
//                                mtrBllgFromDt = ZYPDateUtil.addDays(maxInvMtrReadDt, 1);
//                            } else {
//                                mtrBllgFromDt = svcContrMtrBllgTMsg.mtrBllgFromDt.getValue();
//                            }

                            List<BigDecimal> svcPhysMtrReadPkList = getInvProcSvcPhysMtrRead(svcContrMtrBllgTMsg.dsContrBllgMtrPk.getValue(), svcContrMtrBllgTMsg.dsContrBllgMtrId.getValue(), svcContrBllgTMsg.svcMachMstrPk.getValue(),
                                    svcContrBllgTMsg.dsContrDtlPk.getValue(), svcContrMtrBllgTMsg.svcPhysMtrReadGrpSq.getValue());

                            for (BigDecimal svcPhysMtrReadPk : svcPhysMtrReadPkList) {
                                SVC_PHYS_MTR_READTMsg svcPhysMtrReadTMsg = getSvcPhysMtrRead(svcPhysMtrReadPk);
                                if (svcPhysMtrReadTMsg == null) {
                                    Key key = new Key();
                                    key.add("SVC_PHYS_MTR_READ_PK", svcPhysMtrReadPk);
                                    key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                                    // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "SVC_PHYS_MTR_READ", key.toString());
                                    addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1092E, key.toString());
                                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                                    rollback();
                                    continue SVC_INV;
                                } else {
                                    ZYPEZDItemValueSetter.setValue(svcPhysMtrReadTMsg.invProcFlg, ZYPConstant.FLG_ON_Y);
                                    ZYPEZDItemValueSetter.setValue(svcPhysMtrReadTMsg.svcInvNum, svcInvNum);
                                    ZYPEZDItemValueSetter.setValue(svcPhysMtrReadTMsg.invDt, invDt);
                                    S21FastTBLAccessor.update(svcPhysMtrReadTMsg);
                                    if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcPhysMtrReadTMsg.getReturnCode())) {
                                        Key key = new Key();
                                        key.add("SVC_PHYS_MTR_READ_PK", svcPhysMtrReadPk);
                                        throw new S21AbendException(NSZM0399E, new String[] {"SVC_PHYS_MTR_READ", key.toString() });
                                    }
                                }
                            }
                        }
                    }

                    for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
                        // START 2017/09/05 M.Kidokoro [QC#20079, ADD]
                        // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                        // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                        // if (isMtrHldForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) {
                        // START 2022/02/09 S.Kitamura [QC#59683, MOD]
                        // if (isUnbllblForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                        if (isUnbllblForTogether(allLineTogetherFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                        // END 2022/02/09 S.Kitamura [QC#59683, MOD]
                        // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            continue;
                        }
                        // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                        // END 2017/09/05 M.Kidokoro [QC#20079, ADD]

                        SVC_CONTR_BLLGTMsg svcContrBllgTMsg = getSvcContrBllg((BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK"));
                        BigDecimal svcContrBllgPk = svcContrBllgTMsg.svcContrBllgPk.getValue();
                        // START 2019/11/08 K.Kitachi [QC#54368, ADD]
                        String grpSvcInvKey = createGrpSvcInvKey(svcContrBllgTMsg);
                        if(skipGrpSvcInvKeyList.contains(grpSvcInvKey)){
                            continue;
                        }
                        // END 2019/11/08 K.Kitachi [QC#54368, ADD]

                        Map<String, Object> svcInvLineMap = getSvcInvLine(svcContrBllgTMsg.dsContrBllgSchdPk.getValue());

                        // Base Charge
                        if (ZYPConstant.FLG_ON_Y.equals(svcContrBllgTMsg.baseChrgFlg.getValue())) {

                            // START 2023/03/24 E.Sanchez [QC#61325, ADD]
                            if (isUnbllblForSeparate(allLineTogetherFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                                continue;
                            }
                            // END 2023/03/24 E.Sanchez [QC#61325, ADD]

                            // Update DS_CONTR_BLLG_SCHD
                            updateDsContrBllgSchd(svcContrBllgTMsg, svcInvTMsg, svcInvLineMap);

                            List<Map<String, BigDecimal>> addlChrgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                            for (Map<String, BigDecimal> addlChrgInfo : addlChrgInfoList) {
                                BigDecimal addlChrgPk = (BigDecimal) addlChrgInfo.get("SVC_CONTR_ADDL_CHRG_BLLG_PK");
                                SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg = getSvcContrAddlChrgBllgTMsg(addlChrgPk);
                                SVC_CONTR_BLLGTMsg addlSvcContrBllgTMsg = getSvcContrBllg(svcContrAddlChrgBllgTMsg.svcContrBllgPk.getValue());

                                // Update DS_CONTR_ADDL_CHRG
                                updateDsContrAddlChrg(addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg);
                            }
                        }

                        // Usage Charge
                        if (ZYPConstant.FLG_ON_Y.equals(svcContrBllgTMsg.usgChrgFlg.getValue())) {
                            // START 2017/09/05 M.Kidokoro [QC#20079, ADD]
                            // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                            // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            // if (isMtrHldForSeparate(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) {
                            // START 2022/02/09 S.Kitamura [QC#59683, MOD]
                            // if (isUnbllblForSeparate(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                            if (isUnbllblForSeparate(allLineTogetherFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                            // END 2022/02/09 S.Kitamura [QC#59683, MOD]
                            // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                                continue;
                            }
                            // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                            // END 2017/09/05 M.Kidokoro [QC#20079, ADD]
                            updateDsContrBllgSchd(svcContrBllgTMsg, svcInvTMsg, svcInvLineMap);

                            SVC_CONTR_MTR_BLLGTMsgArray svcContrMtrBllgTMsgArray = getSvcContrMtrBllgList(svcContrBllgPk);
                            for (int i = 0; i < svcContrMtrBllgTMsgArray.getValidCount(); i++) {
                                SVC_CONTR_MTR_BLLGTMsg svcContrMtrBllgTMsg = svcContrMtrBllgTMsgArray.no(i);

                                // Update DS_CONTR_BLLG_SCHD
                                updateDsContrBllgMtr(svcContrBllgTMsg, svcContrMtrBllgTMsg);

                                List<Map<String, BigDecimal>> addlChrgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                                for (Map<String, BigDecimal> addlChrgInfo : addlChrgInfoList) {
                                    BigDecimal addlChrgPk = (BigDecimal) addlChrgInfo.get("SVC_CONTR_ADDL_CHRG_BLLG_PK");
                                    SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg = getSvcContrAddlChrgBllgTMsg(addlChrgPk);
                                    SVC_CONTR_BLLGTMsg addlSvcContrBllgTMsg = getSvcContrBllg(svcContrAddlChrgBllgTMsg.svcContrBllgPk.getValue());

                                    // Update DS_CONTR_ADDL_CHRG
                                    updateDsContrAddlChrg(addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg);
                                }
                            }
                        }
                    }

                    // START 2017/09/06 M.Kidokoro [QC#20079, MOD]
                    // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                    // START 2019/11/08 K.Kitachi [QC#54368, MOD]
//                    archiveProcessForRegular(dsContrDtlInfoList, invSeptBaseUsgFlg, svcCrRebilPk);]
                    // START 2022/02/09 S.Kitamura [QC#59683, MOD]
                    // archiveProcessForRegular(dsContrDtlInfoList, invSeptBaseUsgFlg, svcCrRebilPk, skipGrpSvcInvKeyList);
                    archiveProcessForRegular(dsContrDtlInfoList, allLineTogetherFlg, svcCrRebilPk, skipGrpSvcInvKeyList);
                    // END 2022/02/09 S.Kitamura [QC#59683, MOD]
                    // END 2019/11/08 K.Kitachi [QC#54368, MOD]
                    // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                    // END 2017/09/06 M.Kidokoro [QC#20079, MOD]

                    // START 04/11/2016 T.Aoyagi [QC#6510, ADD]
                    if (!callCrRebilApi(DS_CONTR_CATG.REGULAR, svcInvKey, svcInvTMsg)) {
                        rollback();
                        continue SVC_INV;
                    }
                    // END 04/11/2016 T.Aoyagi [QC#6510, ADD]

                    svcInvCnt++;

                    commit();
                }
            }

            normCnt = normCnt + svcInvCnt;

            Set<String> svcInvErrKey = getRegSvcInvErrKey();
            for (String svcInvKey : svcInvErrKey) {
                String[] keys = parseRegSvcInvKey(svcInvKey);
                // QC2536 start
                // List<Map<String, Object>> dsContrDtlInfoList =
                // getRegDsContrDtlInfo(new BigDecimal(keys[0]), new
                // BigDecimal(keys[1]));
                // START 04/12/2016 T.Aoyagi [QC#6829, MOD]
                // mod start 2018/07/05 QC#27114
                //List<Map<String, Object>> dsContrDtlInfoList = getRegDsContrDtlInfo(new BigDecimal(keys[0]), keys[1], keys[2], keys[3], keys[4]);
                // END 04/12/2016 T.Aoyagi [QC#6829, MOD]
                // QC2536 end
                BigDecimal svcCrRebilPk = null;
                if (ZYPCommonFunc.hasValue(keys[5]) && !keys[5].equals("null")) {
                    svcCrRebilPk = new BigDecimal(keys[5]);
                }
                List<Map<String, Object>> dsContrDtlInfoList = getRegDsContrDtlInfo(new BigDecimal(keys[0]), keys[1], keys[2], keys[3], keys[4], svcCrRebilPk);
                // mod end 2018/07/05 QC#27114
                for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
                    BigDecimal svcContrBllgPk = (BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK");
                    SVC_CONTR_BLLGTMsg svcContrBllgTMsg = getSvcContrBllg(svcContrBllgPk);
                    ZYPEZDItemValueSetter.setValue(svcContrBllgTMsg.bllgCpltStsCd, BLLG_CPLT_STS.ERROR);
                    S21FastTBLAccessor.update(svcContrBllgTMsg);
                    if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcContrBllgTMsg.getReturnCode())) {
                        Key key = new Key();
                        key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                        throw new S21AbendException(NSZM0399E, new String[] {"SVC_CONTR_BLLG", key.toString() });
                    }
                }
            }

            commit();
        } catch (SQLException e) {
            sqlExceptionHandler(e);
        } finally {
            S21SsmLowLevelCodingClient.closeResource(ps, rs);
        }
    }

    /**
     * Create Service Invoice For Fleet
     */
    protected void createFleetSvcInv() {

        int svcInvCnt = 0;

        PreparedStatement ps = null;
        ResultSet rs = null;
        try {

            ps = getFleetSvcInvKey();
            rs = ps.executeQuery();
            // mod start 2017/01/19 CSA QC#16645
            // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
            // List<BigDecimal> dsContrPkList = new ArrayList<BigDecimal>();
            List<String> dsContrSkipKeyList = new ArrayList<String>();
            // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
            // mod end 2017/01/19 CSA QC#16645
            SVC_INV: while (rs.next()) {

                BigDecimal dsContrPk = rs.getBigDecimal("DS_CONTR_PK");
                // mod start 2017/01/19 CSA QC#16645
                // START 2017/10/19 K.Kojima [QC#21468,21177,DEL]
                // if (dsContrPkList.contains(dsContrPk)) {
                //     continue SVC_INV;
                // }
                // END 2017/10/19 K.Kojima [QC#21468,21177,DEL]
                // mod end 2017/01/19 CSA QC#16645
                // QC2536 start
                String baseBllgFlg = rs.getString("BASE_BLLG_FLG");
                String mtrBllgFlg = rs.getString("MTR_BLLG_FLG");
                String invSeptBaseUsgFlg = rs.getString("INV_SEPT_BASE_USG_FLG");
                // QC2536 end

                // START 2017/10/19 K.Kojima [QC#21468,21177,ADD]
                String dsContrSkipKey = createDsContrSkipKey(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg);
                if (dsContrSkipKeyList.contains(dsContrSkipKey)) {
                    continue SVC_INV;
                }
                // END 2017/10/19 K.Kojima [QC#21468,21177,ADD]

                // START 2017/09/28 M.Kidokoro [QC#21286, ADD]
                BigDecimal svcCrRebilPk = rs.getBigDecimal("SVC_CR_REBIL_PK");
                BigDecimal svcCrRebilDtlPk = rs.getBigDecimal("SVC_CR_REBIL_DTL_PK");
                // END 2017/09/28 M.Kidokoro [QC#21286, ADD]

                // QC2536 start
                // String svcInvKey = createFleetSvcInvKey(dsContrPk);
                // START 04/12/2016 T.Aoyagi [QC#6829, MOD]
                String invTpCd = rs.getString("INV_TP_CD");
                // Mod Start 12/16/2016 <QC#16646>
                String billToCustCd = rs.getString("BILL_TO_CUST_CD");
                // START 2018/07/25 K.Kitachi [QC#17068, ADD]
                BigDecimal ctacPsnPk = rs.getBigDecimal("CTAC_PSN_PK");
                // END 2018/07/25 K.Kitachi [QC#17068, ADD]
                // START 2017/09/28 M.Kidokoro [QC#21286, MOD]
//                String svcInvKey = createFleetSvcInvKey(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg, invTpCd, billToCustCd);
                // START 2018/07/25 K.Kitachi [QC#17068, MOD]
//                String svcInvKey = createFleetSvcInvKey(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg, invTpCd, billToCustCd, svcCrRebilPk, svcCrRebilDtlPk);
                String svcInvKey = createFleetSvcInvKey(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg, invTpCd, billToCustCd, svcCrRebilPk, svcCrRebilDtlPk, ctacPsnPk);
                // END 2018/07/25 K.Kitachi [QC#17068, MOD]
                // END 2017/09/28 M.Kidokoro [QC#21286, MOD]
                // END 04/12/2016 T.Aoyagi [QC#6829, MOD]
                // QC2536 end

                // START 2017/09/11 K.Kitachi [QC#20446, ADD]
                // START 2017/09/28 M.Kidokoro [QC#21286, DEL]
//                BigDecimal svcCrRebilPk = rs.getBigDecimal("SVC_CR_REBIL_PK");
                // END 2017/09/28 M.Kidokoro [QC#21286, DEL]
                // END 2017/09/11 K.Kitachi [QC#20446, ADD]

                // QC2536 start
                // List<Map<String, Object>> dsContrDtlInfoList =
                // getFleetDsContrDtlInfo(dsContrPk);
                // START 04/12/2016 T.Aoyagi [QC#6829, MOD]
                // Mod Start 08/08/2016 <QC#8293>
                String nextBllgDt = rs.getString("NEXT_BLLG_DT");
                // Mod Start 12/16/2016 <QC#16646>
                // START 2017/09/28 M.Kidokoro [QC#21286, MOD]
//                List<Map<String, Object>> dsContrDtlInfoList = getFleetDsContrDtlInfo(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg, invTpCd, nextBllgDt, billToCustCd);
                // START 2018/07/25 K.Kitachi [QC#17068, MOD]
//                List<Map<String, Object>> dsContrDtlInfoList = getFleetDsContrDtlInfo(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg, invTpCd, nextBllgDt, billToCustCd, svcCrRebilPk, svcCrRebilDtlPk);
                List<Map<String, Object>> dsContrDtlInfoList = getFleetDsContrDtlInfo(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg, invTpCd, nextBllgDt, billToCustCd, svcCrRebilPk, svcCrRebilDtlPk, ctacPsnPk);
                // END 2018/07/25 K.Kitachi [QC#17068, MOD]
                // END 2017/09/28 M.Kidokoro [QC#21286, MOD]
                // Mod End   12/16/2016 <QC#16646>
                // Mod End   08/08/2016 <QC#8293>
                // END 04/12/2016 T.Aoyagi [QC#6829, MOD]
                // QC2536 end

                if (dsContrDtlInfoList.isEmpty()) {
                    Key key = new Key();
                    key.add("DS_CONTR_PK", dsContrPk);
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "DS_CONTR_DTL", key.toString());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1094E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                // START 2018/04/02 K.Kitachi [QC#24973, ADD]
                // START 2019/10/29 K.Kitachi [QC#54203, MOD]
//                setMdlInfo(dsContrDtlInfoList);
                setContrDtlInfoList(dsContrDtlInfoList, DS_CONTR_CATG.FLEET);
                // END 2019/10/29 K.Kitachi [QC#54203, MOD]
                // END 2018/04/02 K.Kitachi [QC#24973, ADD]

                //Add Start 05/25/2016 <QC#8591>
                // Check billable flag
                // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                // START 2017/09/14 K.Kim [QC#20040, MOD]
                // if (!ZYPCommonFunc.hasValue(svcCrRebilPk) && !checkBllblFlg(dsContrPk, svcInvKey, dsContrDtlInfoList, DS_CONTR_CATG.FLEET)) {
                if (!ZYPCommonFunc.hasValue(svcCrRebilPk) && !checkBllblFlg(dsContrPk, svcInvKey, dsContrDtlInfoList, DS_CONTR_CATG.FLEET, invTpCd)) {
                // END 2017/09/14 K.Kim [QC#20040, MOD]
                // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                    rollback();
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }
                //Add End   05/25/2016 <QC#8591>

                // ----------------------------------------------------------------------
                // Recalc SvcContrBllgAlloc
                // ----------------------------------------------------------------------
                // START 2016/06/20 T.Aoyagi [QC#9907, ADD]
                this.invLineSplTpMap = new HashMap<BigDecimal, String>();
                // END 2016/06/20 T.Aoyagi [QC#9907, ADD]
                //Mod Start 05/27/2016 <QC#8335>
                if (!recalcSvcAlloc(dsContrDtlInfoList, svcInvKey)) {
                    rollback();
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }
                //Mod End   05/27/2016 <QC#8335>

                BigDecimal mainSvcContrBllgPk = (BigDecimal) dsContrDtlInfoList.get(0).get("SVC_CONTR_BLLG_PK");

                SVC_CONTR_BLLGTMsg mainSvcContrBllgTMsg = getSvcContrBllg(mainSvcContrBllgPk);
                if (mainSvcContrBllgTMsg == null) {
                    Key key = new Key();
                    key.add("SVC_CONTR_BLLG_PK", mainSvcContrBllgPk);
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "SVC_CONTR_BLLG", key.toString());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1078E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    rollback();
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                // 2(1) Get DS_CONTR
                DS_CONTRTMsg dsContrTMsg = getDsContr(dsContrPk);
                if (dsContrTMsg == null) {
                    Key key = new Key();
                    key.add("DS_CONTR_PK", dsContrPk);
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "DS_CONTR", key.toString());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1079E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                // 2(2) Get PMT_TERM_CASH_DISC
                if (!ZYPCommonFunc.hasValue(dsContrTMsg.pmtTermCashDiscCd)) {
                    Key key = new Key();
                    key.add("DS_CONTR_PK", dsContrPk);
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "DS_CONTR.PMT_TERM_CASH_DISC_CD", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                // mod start 2019/05/10 K.Fujimoto QC#50296
                PMT_TERM_CASH_DISCTMsg pmtTermCashDiscTMsg;
                if (!hasValue(mainSvcContrBllgTMsg.svcCrRebilPk) && mainSvcContrBllgTMsg.invTpCd.getValue().equals(INV_TP.CREDIT_MEMO)) {
                    pmtTermCashDiscTMsg = getPmtTermCashDisc(PMT_TERM_CASH_DISC.BALANCE_DUE);
                } else {
                    pmtTermCashDiscTMsg = getPmtTermCashDisc(dsContrTMsg.pmtTermCashDiscCd.getValue());
                } 
                // PMT_TERM_CASH_DISCTMsg pmtTermCashDiscTMsg = getPmtTermCashDisc(dsContrTMsg.pmtTermCashDiscCd.getValue());
                // mod end 2019/05/10 K.Fujimoto QC#50296
                if (pmtTermCashDiscTMsg == null) {
                    Key key = new Key();
                    key.add("PMT_TERM_CASH_DISC_CD", dsContrTMsg.pmtTermCashDiscCd.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "PMT_TERM_CASH_DISC", key.toString());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1080E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                // 2(3) Get PMT_TERM
                if (!ZYPCommonFunc.hasValue(pmtTermCashDiscTMsg.pmtTermCd)) {
                    Key key = new Key();
                    key.add("PMT_TERM_CASH_DISC_CD", dsContrTMsg.pmtTermCashDiscCd.getValue());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "PMT_TERM_CASH_DISC.PMT_TERM_CD", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                PMT_TERMTMsg pmtTermTMsg = getPmtTerm(pmtTermCashDiscTMsg.pmtTermCd.getValue());
                if (pmtTermTMsg == null) {
                    Key key = new Key();
                    key.add("PMT_TERM_CD", pmtTermCashDiscTMsg.pmtTermCd.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "PMT_TERM", key.toString());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1081E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                String invDt = slsDt;
                String pmtTermStartDt = invDt;
                String invDueDt = ZYPDateUtil.addDays(pmtTermStartDt, pmtTermTMsg.pmtTermAot.getValueInt());

                // 2(4) Get BILL_TO_CUST by SELL_TO_CUST_CD
                // Mod Start 12/26/2016 <QC#16646>
                SELL_TO_CUSTTMsg sellToCustTMsg = getSellToCust(mainSvcContrBllgTMsg.billToCustCd.getValue());
                if (sellToCustTMsg == null) {
                    Key key = new Key();
                    key.add("SELL_TO_CUST_CD", mainSvcContrBllgTMsg.billToCustCd.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "SELL_TO_CUST", key.toString());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1082E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }
                // Mod End   12/26/2016 <QC#16646>

                // 2(5) Get GLBL_CMPY
                GLBL_CMPYTMsg glblCmpyTMsg = getGlblCmpy();
                if (glblCmpyTMsg == null) {
                    Key key = new Key();
                    key.add("GLBL_CMPY_CD", glblCmpyCd);
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "GLBL_CMPY", key.toString());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1083E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                if (!ZYPCommonFunc.hasValue(glblCmpyTMsg.stdCcyCd)) {
                    Key key = new Key();
                    key.add("GLBL_CMPY_CD", glblCmpyCd);
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "GLBL_CMPY.STD_CCY_CD", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                if (!ZYPCommonFunc.hasValue(glblCmpyTMsg.ctryCd)) {
                    Key key = new Key();
                    key.add("GLBL_CMPY_CD", glblCmpyCd);
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "GLBL_CMPY.CTRY_CD", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                CCYTMsg funcCcyTMsg = getCcy(glblCmpyTMsg.stdCcyCd.getValue());
                if (funcCcyTMsg == null) {
                    Key key = new Key();
                    key.add("CCY_CD", glblCmpyTMsg.stdCcyCd.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "CCY", key.toString());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1084E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                BigDecimal funcCcyAftDeclPntDigitNum = funcCcyTMsg.aftDeclPntDigitNum.getValue();
                if (!ZYPCommonFunc.hasValue(funcCcyAftDeclPntDigitNum)) {
                    Key key = new Key();
                    key.add("CCY_CD", funcCcyTMsg.ccyCd.getValue());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "CCY.AFT_DECL_PNT_DIGIT_NUM", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                //Del Start 02/04/2016 <QC#3947>
                // 2(6) Get CUST_CR_PRFL, BR, CNTY
//                CUST_CR_PRFLTMsg custCrPrflTMsg = getCustCrPrfl(sellToCustTMsg.billToCustCd.getValue());
//                if (custCrPrflTMsg == null) {
//                    Key key = new Key();
//                    key.add("SELL_TO_CUST_CD", dsContrTMsg.sellToCustCd.getValue());
//                    key.add("BILL_TO_CUST_CD", sellToCustTMsg.billToCustCd.getValue());
//                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "CUST_CR_PRFL", key.toString());
//                    continue SVC_INV;
//                }
//
//                if (!ZYPCommonFunc.hasValue(custCrPrflTMsg.brCd)) {
//                    Key key = new Key();
//                    key.add("SELL_TO_CUST_CD", dsContrTMsg.sellToCustCd.getValue());
//                    key.add("BILL_TO_CUST_CD", sellToCustTMsg.billToCustCd.getValue());
//                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "CUST_CR_PRFL.BR_CD", key.toString());
//                    continue SVC_INV;
//                }
//
//                BRTMsg brTMsg = getBr(custCrPrflTMsg.brCd.getValue());
//                if (brTMsg == null) {
//                    Key key = new Key();
//                    key.add("SELL_TO_CUST_CD", dsContrTMsg.sellToCustCd.getValue());
//                    key.add("BILL_TO_CUST_CD", sellToCustTMsg.billToCustCd.getValue());
//                    key.add("BR_CD", custCrPrflTMsg.brCd.getValue());
//                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "BR", key.toString());
//                    continue SVC_INV;
//                }
//
//                CNTYTMsg ofcCntyTMsg = null;
//                if (ZYPCommonFunc.hasValue(brTMsg.cntyPk)) {
//                    ofcCntyTMsg = getCnty(brTMsg.cntyPk.getValue());
//                }
                //Del End   02/04/2016 <QC#3947>

                // 2(7) Get BILL_TO_CUST, REM_TO
                BILL_TO_CUSTTMsg billToCustTMsg = getBillToCustTMsg(mainSvcContrBllgTMsg.billToCustCd.getValue());
                if (billToCustTMsg == null) {
                    Key key = new Key();
                    key.add("SELL_TO_CUST_CD", mainSvcContrBllgTMsg.dsAcctNum.getValue());
                    key.add("BILL_TO_CUST_CD", mainSvcContrBllgTMsg.billToCustCd.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "BILL_TO_CUST", key.toString());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1085E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                CNTYTMsg billToCntyTMsg = null;
                if (ZYPCommonFunc.hasValue(billToCustTMsg.cntyPk)) {
                    billToCntyTMsg = getCnty(billToCustTMsg.cntyPk.getValue());
                }

                if (!ZYPCommonFunc.hasValue(billToCustTMsg.remId)) {
                    Key key = new Key();
                    key.add("SELL_TO_CUST_CD", mainSvcContrBllgTMsg.dsAcctNum.getValue());
                    key.add("BILL_TO_CUST_CD", mainSvcContrBllgTMsg.billToCustCd.getValue());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "BILL_TO_CUST.REM_ID", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                REM_TOTMsg remToTMsg = getRemTo(billToCustTMsg.remId.getValue());
                if (remToTMsg == null) {
                    Key key = new Key();
                    key.add("SELL_TO_CUST_CD", mainSvcContrBllgTMsg.dsAcctNum.getValue());
                    key.add("BILL_TO_CUST_CD", mainSvcContrBllgTMsg.billToCustCd.getValue());
                    key.add("REM_ID", billToCustTMsg.remId.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "REM_TO", key.toString());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1086E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                // 2(8) Get SELL_TO_CUST, CNTY
                CNTYTMsg sellToCntyTMsg = null;
                if (ZYPCommonFunc.hasValue(sellToCustTMsg.cntyPk)) {
                    sellToCntyTMsg = getCnty(sellToCustTMsg.cntyPk.getValue());
                }

                // 2(9) Get ACCT_DLY_ACTL_EXCH_RATES
                ACCT_DLY_ACTL_EXCH_RATESTMsg acctDlyActlExchRatesTMsg = getAcctDlyActlExchRates(dsContrTMsg.ccyCd.getValue(), slsDt);
                if (acctDlyActlExchRatesTMsg == null) {
                    Key key = new Key();
                    key.add("CCY_CD", dsContrTMsg.ccyCd.getValue());
                    key.add("ACTL_EXCH_RATE_ENT_DT", slsDt);
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "ACCT_DLY_ACTL_EXCH_RATES", key.toString());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1087E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                if (!ZYPCommonFunc.hasValue(acctDlyActlExchRatesTMsg.actlExchRate)) {
                    Key key = new Key();
                    key.add("CCY_CD", acctDlyActlExchRatesTMsg.ccyCd.getValue());
                    key.add("ACTL_EXCH_RATE_ENT_DT", acctDlyActlExchRatesTMsg.actlExchRateEntDt.getValue());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "ACCT_DLY_ACTL_EXCH_RATES.ACTL_EXCH_RATE", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                if (BigDecimal.ZERO.compareTo(acctDlyActlExchRatesTMsg.actlExchRate.getValue()) >= 0) {
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0097E);
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                BigDecimal actlExchRate = acctDlyActlExchRatesTMsg.actlExchRate.getValue();

                //Del Start 03/18/2016 <QC#5720>
//                // 2(10) Get DS_CONTR_INV_DELY
//                DS_CONTR_INV_DELYTMsgArray dsContrInvDelyTMsgArray = getDsContrInvDely(dsContrPk);
//                if (dsContrInvDelyTMsgArray.length() == 0) {
//                    Key key = new Key();
//                    key.add("DS_CONTR_PK", dsContrPk);
//                    // Just a warning. Continue processing this
//                    // invoice.
//                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 2, NSZM0397W, "DS_CONTR_INV_DELY", key.toString());
//                }
                //Del End 03/18/2016 <QC#5720>

                // 2(11) Get ACCT_ARTH_TP_CD
                CCYTMsg dealCcyTMsg = getCcy(dsContrTMsg.ccyCd.getValue());
                if (dealCcyTMsg == null) {
                    Key key = new Key();
                    key.add("CCY_CD", dsContrTMsg.ccyCd.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "CCY", key.toString());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1084E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                String dealCcyAcctArthTpCd = dealCcyTMsg.acctArthTpCd.getValue();
                if (!ZYPCommonFunc.hasValue(dealCcyAcctArthTpCd)) {
                    Key key = new Key();
                    key.add("CCY_CD", dealCcyTMsg.ccyCd.getValue());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "CCY.ACCT_ARTH_TP_CD", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                if (!ACCT_ARTH_TP_DIVIDE.equals(dealCcyAcctArthTpCd) && !ACCT_ARTH_TP_MULTIPLY.equals(dealCcyAcctArthTpCd)) {
                    Key key = new Key();
                    key.add("CCY_CD", dealCcyTMsg.ccyCd.getValue());
                    key.add("ACCT_ARTH_TP_CD", dealCcyTMsg.acctArthTpCd.getValue());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0395E, key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                BigDecimal dealCcyAftDeclPntDigitNum = dealCcyTMsg.aftDeclPntDigitNum.getValue();
                if (!ZYPCommonFunc.hasValue(dealCcyAftDeclPntDigitNum)) {
                    Key key = new Key();
                    key.add("CCY_CD", dealCcyTMsg.ccyCd.getValue());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "CCY.AFT_DECL_PNT_DIGIT_NUM", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                // START 2016/10/04 T.Kanasaka [QC#9905, MOD]
//                String mainShipToCustCd = getDefShipToCd(mainSvcContrBllgTMsg.dsAcctNum.getValue());
                // START 2018/02/02 K.Kojima [QC#22242,MOD]
                // String mainShipToCustCd = getFleetDefaultShipToCustCd(dsContrDtlInfoList.get(0));
                String mainShipToCustCd = getFleetShipToCustCd(dsContrDtlInfoList);
                // END 2018/02/02 K.Kojima [QC#22242,MOD]
                // END 2016/10/04 T.Kanasaka [QC#9905, MOD]
                SHIP_TO_CUSTTMsg mainShipToCustTMsg = getShipToCust(mainShipToCustCd);
                // START QC#53265 K.Fujimoto[ADD]
                if (mainShipToCustTMsg == null) {
                    Key key = new Key();
                    key.add("SHIP_TO_CUST_CD", mainShipToCustCd);
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1088E, key.toString());
                    rollback();
                    continue SVC_INV;
                }

                SELL_TO_CUSTTMsg sellToCustTMsgForShipTo = getSellToCustForShipToCust(mainShipToCustTMsg.shipToCustCd.getValue());
                if (sellToCustTMsgForShipTo == null) {
                    Key key = new Key();
                    key.add("SELL_TO_CUST_CD(SHIP_TO_CUST)", mainShipToCustTMsg.shipToCustCd.getValue());
                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1082E, key.toString());
                    continue SVC_INV;
                }
                // END   QC#53265 K.Fujimoto[ADD]

                // Add Start 08/31/2016 <QC#13529>
                DS_CONTR_CLSTMsg dsContrClsTMsg = getDsContrClsTMsg(dsContrTMsg.dsContrClsCd.getValue());
                if (dsContrClsTMsg == null) {
                    Key key = new Key();
                    key.add("DS_CONTR_CLS_CD", dsContrTMsg.dsContrClsCd.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "DS_CONTR_CLS", key.toString());
                    addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1089E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                DS_INV_TPTMsg dsInvTpTMsg = getDsInvTp(dsContrClsTMsg.dsInvTpCd.getValue());
                if (dsInvTpTMsg == null) {
                    Key key = new Key();
                    key.add("DS_INV_TP_CD", dsContrClsTMsg.dsInvTpCd.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "DS_INV_TP", key.toString());
                    addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1090E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }
                // Add End   08/31/2016 <QC#13529>
                // Add Start 2018/01/26 QC#23419
                DS_INV_TPTMsg baseDsInvTpTMsg = dsInvTpTMsg;
                DS_INV_TPTMsg usgDsInvTpTMsg = dsInvTpTMsg;
                DS_INV_TPTMsg noARDsInvTpTMsg = getDsInvTp(DS_INV_TP.INVOICE_OKS_NO_AR);
                if (noARDsInvTpTMsg == null) {
                    Key key = new Key();
                    key.add("DS_INV_TP_CD", DS_INV_TP.INVOICE_OKS_NO_AR);
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "DS_INV_TP", key.toString());
                    addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1090E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    continue SVC_INV;
                }
                // Add End 2018/01/26 QC#23419

                // START 2018/11/05 K.Kitachi [QC#28627, ADD]
                // mod start 2019/10/21 QC#53521
                //if (!ZYPCommonFunc.hasValue(svcCrRebilPk) && !checkLinkContr(svcInvKey, DS_CONTR_CATG.FLEET, rs.getString("CONTR_LINK_NUM"), mainSvcContrBllgTMsg.svcContrBllgThruDt.getValue())) {
                //    rollback();
                //    dsContrSkipKeyList.add(dsContrSkipKey);
                //    continue SVC_INV;
                //}
                if (!ZYPCommonFunc.hasValue(svcCrRebilPk)) {
                    List<String> checkList = new ArrayList<String>();
                    for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
                        String contrLinkNum = rs.getString("CONTR_LINK_NUM");
                        String usgChrgFlg = (String) dsContrDtlInfo.get("USG_CHRG_FLG");
                        String mtrBllgNextBllgDt = "";
                        if (ZYPConstant.FLG_ON_Y.equals(usgChrgFlg)) {
                            mtrBllgNextBllgDt = (String) dsContrDtlInfo.get("MTR_BLLG_NEXT_BLLG_DT");
                        }
                        if (!checkList.contains(contrLinkNum + usgChrgFlg + mtrBllgNextBllgDt)) {
                            checkList.add(contrLinkNum + usgChrgFlg + mtrBllgNextBllgDt);
                            String ngStatus = checkLinkContr(svcInvKey, DS_CONTR_CATG.FLEET, contrLinkNum, mtrBllgNextBllgDt);
                            if (hasValue(ngStatus)) {
                                rollback();
                                dsContrSkipKeyList.add(dsContrSkipKey);
                                continue SVC_INV;
                            }
                        }
                    }
                }
                // mod end 2019/10/21 QC#53521
                // END 2018/11/05 K.Kitachi [QC#28627, ADD]

                // 2(12) Calculate Total Amount
                BigDecimal invTotDealSlsAmt = BigDecimal.ZERO;
                BigDecimal invTotFuncSlsAmt = BigDecimal.ZERO;
                BigDecimal invTotDealTaxAmt = BigDecimal.ZERO;
                BigDecimal invTotFuncTaxAmt = BigDecimal.ZERO;
                BigDecimal invTotDealDiscAmt = BigDecimal.ZERO;
                BigDecimal invTotFuncDiscAmt = BigDecimal.ZERO;
                BigDecimal invTotDealNetAmt = BigDecimal.ZERO;
                BigDecimal invTotFuncNetAmt = BigDecimal.ZERO;

                SVC_INV_LINETMsg fleetLineSvcInvLineTMsg = new SVC_INV_LINETMsg();
                // START 2017/11/22 E.Kameishi [QC#19735, MOD]
                // Mod Start 08/31/2016 <QC#13529>
//                String svcInvNum = ZYPExtnNumbering.getUniqueID(glblCmpyCd, "SVC_BLLG_INV_NUM");
                //String svcInvNum = ZYPExtnNumbering.getUniqueID(glblCmpyCd, dsInvTpTMsg.autoSeqCd.getValue());
                // Mod Start 2018/01/24 QC#23684 Temporarily Fixed
                BigDecimal svcInvPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_SQ");
//                String svcInvNum = ZYPMaxTenDigitsNumbering.getUniqueID(glblCmpyCd, dsInvTpTMsg.autoSeqCd.getValue());
                String svcInvNum = svcInvPk.toPlainString();
                // Mod End 2018/01/24 QC#23684 Temporarily Fixed
                // Mod End   08/31/2016 <QC#13529>
                // END 2017/11/22 E.Kameishi [QC#19735, MOD]
                int listIdx = 0;
                int lineNum = 1;

                // 3(1) Get DS_CONTR_DTL
                for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
                    // START 2017/08/29 M.Kidokoro [QC#20079, ADD]
                    // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // if (isMtrHldForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) {
                    if (isUnbllblForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                        continue;
                    }
                    // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                    // END 2017/08/29 M.Kidokoro [QC#20079, ADD]

                    DS_CONTR_DTL_TPTMsg dsContrDtlTpTMsg = getDsContrDtlTp((String) dsContrDtlInfo.get("DS_CONTR_DTL_TP_CD"));

                    String fleetLineFlg = dsContrDtlTpTMsg.fleetLineFlg.getValue();
                    String splyLineFlg = dsContrDtlTpTMsg.splyLineFlg.getValue();

                    BigDecimal svcContrBllgPk = (BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK");

                    SVC_CONTR_BLLGTMsg svcContrBllgTMsg = getSvcContrBllg(svcContrBllgPk);
                    if (svcContrBllgTMsg == null) {
                        Key key = new Key();
                        key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "SVC_CONTR_BLLG", key.toString());
                        addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1078E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        rollback();
                        // mod start 2017/01/19 CSA QC#16645
                        // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                        // dsContrPkList.add(dsContrPk);
                        dsContrSkipKeyList.add(dsContrSkipKey);
                        // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                        // mod end 2017/01/19 CSA QC#16645
                        continue SVC_INV;
                    }

                    // START 2019/11/08 K.Kitachi [QC#54368, ADD]
                    boolean poReq = NSXC001001ContrValidation.checkPoRequired(this.glblCmpyCd, this.slsDt, svcContrBllgTMsg.dsAcctNum.getValue(), svcContrBllgTMsg.billToCustCd.getValue(), ONBATCH_TYPE.BATCH);
                    if (poReq) {
                        if (!isExistsPoInclBllgPeriod(svcContrBllgPk)) {
                            String svcContrBllgFromDt = ZYPDateUtil.formatEzd8ToDisp(svcContrBllgTMsg.svcContrBllgFromDt.getValue());
                            String svcContrBllgThruDt = ZYPDateUtil.formatEzd8ToDisp(svcContrBllgTMsg.svcContrBllgThruDt.getValue());
                            Key key = new Key();
                            key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                            addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0751W, svcContrBllgFromDt, svcContrBllgThruDt, key.toString());
                            rollback();
                            dsContrSkipKeyList.add(dsContrSkipKey);
                            continue SVC_INV;
                        }
                    }
                    if (!ZYPCommonFunc.hasValue(svcCrRebilPk)) {
                        String contrLinkNum = rs.getString("CONTR_LINK_NUM");
                        if (!checkPoPeriodForLinkContr(dsContrPk, contrLinkNum, svcContrBllgPk, svcContrBllgTMsg.baseChrgFlg.getValue())) {
                            addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0753W, contrLinkNum);
                            rollback();
                            dsContrSkipKeyList.add(dsContrSkipKey);
                            continue SVC_INV;
                        }
                    }
                    // END 2019/11/08 K.Kitachi [QC#54368, ADD]

                    // Add Start 2016/11/10 <QC#15789>
                    BigDecimal dsContrDtlPk = (BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK");
                    boolean hasDsContrProcAllocForBase = hasDsContrProcAlloc(dsContrPk, dsContrDtlPk, SVC_INV_CHRG_TP.BASE_CHARGE);
                    boolean hasDsContrProcAllocForMtr = hasDsContrProcAlloc(dsContrPk, dsContrDtlPk, SVC_INV_CHRG_TP.METER_CHARGE);
                    boolean hasDsContrProcAllocForAddl = hasDsContrProcAlloc(dsContrPk, dsContrDtlPk, SVC_INV_CHRG_TP.ADDITIONAL_CHARGE);
                    // Add End   2016/11/10 <QC#15789>

                    //Del Start 05/25/2016 <QC#8591>
//                    // Check billable flag
//                    if (!checkBllblFlg(svcContrBllgTMsg, dsContrTMsg, dsContrDtlInfo, svcInvKey)) {
//                        rollback();
//                        continue SVC_INV;
//                    }
                    //Del End   05/25/2016 <QC#8591>

                    //Mod Start 07/08/2016 <QC#8293>
//                    // Del Start 03/29/2016 <QC#5993>
                    if (ZYPConstant.FLG_OFF_N.equals(invSeptBaseUsgFlg)) {
                        // START 2019/10/09 [QC#54058,MOD]
                        // boolean result = existBaseUsgChrg(dsContrDtlInfo, dsContrDtlInfoList, svcContrBllgTMsg.baseChrgFlg.getValue());
                        boolean result = existBaseUsgChrg(dsContrDtlInfo, dsContrDtlInfoList, svcContrBllgTMsg.baseChrgFlg.getValue(), svcContrBllgTMsg.invTpCd.getValue());
                        // END 2019/10/09 [QC#54058,MOD]
                        if (!result) {
                            String msgParam = "Base Charge";
                            if (ZYPConstant.FLG_ON_Y.equals(svcContrBllgTMsg.baseChrgFlg.getValue())) {
                                msgParam = "Usage Charge";
                            }
                            Key key = new Key();
                            key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
                            key.add("SER_NUM", (String) dsContrDtlInfo.get("SER_NUM"));
                            key.add("SVC_MACH_MSTR_PK", (BigDecimal) dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                            addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 2, NSAM0412W, msgParam, key.toString());
                            rollback();
                            // mod start 2017/01/19 CSA QC#16645
                            // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            // dsContrPkList.add(dsContrPk);
                            dsContrSkipKeyList.add(dsContrSkipKey);
                            // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            // mod end 2017/01/19 CSA QC#16645
                            continue SVC_INV;
                        }
                    }
//                    // Del End   03/29/2016 <QC#5993>
                    //Mod End   07/08/2016 <QC#8293>

                    // SHIP_TO_CUST_CD
                    SHIP_TO_CUSTTMsg shipToCustTMsg;

                    if (ZYPConstant.FLG_ON_Y.equals(fleetLineFlg)) {
                        shipToCustTMsg = null;
                    } else {
                        String shipToCustCd = (String) dsContrDtlInfo.get("CUR_LOC_NUM");
                        shipToCustTMsg = getShipToCust(shipToCustCd);
                        if (shipToCustTMsg == null) {
                            Key key = new Key();
                            key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                            key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                            key.add("SHIP_TO_CUST_CD", shipToCustCd);
                            // START 2016/12/13 N.Arai [QC#16400, MOD]
                            // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "SHIP_TO_CUST_CD", key.toString());
                            addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1088E, key.toString());
                            // END 2016/12/13 N.Arai [QC#16400, MOD]
                            rollback();
                            // mod start 2017/01/19 CSA QC#16645
                            // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            // dsContrPkList.add(dsContrPk);
                            dsContrSkipKeyList.add(dsContrSkipKey);
                            // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            // mod end 2017/01/19 CSA QC#16645
                            continue SVC_INV;
                        }
                    }

                    // START 2017/06/29 K.Kitachi [QC#19666, MOD]
//                    if (ZYPConstant.FLG_ON_Y.equals(fleetLineFlg)) {
//                        if (!ZYPCommonFunc.hasValue(sellToCustTMsg.ctryCd)) {
//                            Key key = new Key();
//                            key.add("SELL_TO_CUST_CD", sellToCustTMsg.sellToCustCd.getValue());
//                            addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "SELL_TO_CUST.CTRY_CD", key.toString());
//                            rollback();
//                            // mod start 2017/01/19 CSA QC#16645
//                            dsContrPkList.add(dsContrPk);
//                            // mod end 2017/01/19 CSA QC#16645
//                            continue SVC_INV;
//                        }
//                    } else {
                    if (!ZYPConstant.FLG_ON_Y.equals(fleetLineFlg)) {
                        if (!ZYPCommonFunc.hasValue(shipToCustTMsg.ctryCd)) {
                            Key key = new Key();
                            key.add("SHIP_TO_CUST_CD", shipToCustTMsg.shipToCustCd.getValue());
                            addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "SHIP_TO_CUST.CTRY_CD", key.toString());
                            rollback();
                            // mod start 2017/01/19 CSA QC#16645
                            // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            // dsContrPkList.add(dsContrPk);
                            dsContrSkipKeyList.add(dsContrSkipKey);
                            // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            // mod end 2017/01/19 CSA QC#16645
                            continue SVC_INV;
                        }
                    }
                    // END 2017/06/29 K.Kitachi [QC#19666, MOD]

                    // 3(4) Get MDSE
                    if (!ZYPConstant.FLG_ON_Y.equals(fleetLineFlg)) {
                        MDSETMsg mdseTMsg = getMdse((String) dsContrDtlInfo.get("MDSE_CD"));
                        if (mdseTMsg == null) {
                            Key key = new Key();
                            key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                            key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                            key.add("MDSE_CD", dsContrDtlInfo.get("MDSE_CD"));
                            // START 2016/12/13 N.Arai [QC#16400, MOD]
                            // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "MDSE", key.toString());
                            addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1091E, key.toString());
                            // END 2016/12/13 N.Arai [QC#16400, MOD]
                            rollback();
                            // mod start 2017/01/19 CSA QC#16645
                            // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            // dsContrPkList.add(dsContrPk);
                            dsContrSkipKeyList.add(dsContrSkipKey);
                            // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            // mod end 2017/01/19 CSA QC#16645
                            continue SVC_INV;
                        }
                    }

                    // QC2415 start
                    // String svcContrBllgFromDt = (String)
                    // dsContrDtlInfo.get("SVC_CONTR_BLLG_FROM_DT");
                    // String svcContrBllgThruDt = (String)
                    // dsContrDtlInfo.get("SVC_CONTR_BLLG_THRU_DT");
                    // QC2415 end
                    String mdlNm;
                    //MOD Start 02/04/2016 <QC#4112>
//                    if (ZYPConstant.FLG_ON_Y.equals(fleetLineFlg)) {
//                        mdlNm = null;
//                    } else {
//                        // 3(5) Get MDL_MDSE_RELN_V
//                        Map<String, Object> mdlMdseInfo = getMdlMdseInfo((String) dsContrDtlInfo.get("MDSE_CD"));
//                        if (mdlMdseInfo == null) {
//                            Key key = new Key();
//                            key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
//                            key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
//                            key.add("MDSE_CD", dsContrDtlInfo.get("MDSE_CD"));
//                            addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "MDL_NM", key.toString());
//                            rollback();
//                            continue SVC_INV;
//                        }
//                        mdlNm = (String) mdlMdseInfo.get("MDL_NM");
//                    }
                    mdlNm = (String) dsContrDtlInfo.get("MDL_NM");
                    //MOD End   02/04/2016 <QC#4112>

                    // ----------------------------------------------------------------------
                    // Base Charge
                    // ----------------------------------------------------------------------
                    String svcInvChrgTpCd = null;

                    // QC2536 start
                    if (ZYPConstant.FLG_OFF_N.equals(invSeptBaseUsgFlg) || (ZYPConstant.FLG_ON_Y.equals(invSeptBaseUsgFlg) && ZYPConstant.FLG_ON_Y.equals(baseBllgFlg))) {
                        // QC2536 end
                        // Add Start 2018/01/26 QC#23419
                        if (hasValue(dsContrTMsg.dsContrEdiCd) && DS_CONTR_EDI.CFS.equals(dsContrTMsg.dsContrEdiCd.getValue())) {
                            if (ZYPConstant.FLG_ON_Y.equals(dsContrTMsg.baseChrgToLeaseCmpyFlg.getValue())) {
                                // No-AR
                                baseDsInvTpTMsg = noARDsInvTpTMsg;
                            }
                        }
                        // Add End 2018/01/26 QC#23419
                        svcInvChrgTpCd = SVC_INV_CHRG_TP.BASE_CHARGE;

                        SVC_CONTR_BASE_BLLGTMsgArray svcContrBaseBllgTMsgArray = getSvcContrBaseBllgList(svcContrBllgPk);
                        for (int i = 0; i < svcContrBaseBllgTMsgArray.length(); i++) {

                            BigDecimal svcInvLinePk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_SQ");
                            String svcInvLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);

                            SVC_CONTR_BASE_BLLGTMsg svcContrBaseBllgTMsg = svcContrBaseBllgTMsgArray.no(i);

                            BigDecimal baseNetDealAmt = svcContrBaseBllgTMsg.baseDealAmt.getValue();
                            BigDecimal baseNetFuncAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, baseNetDealAmt, funcCcyAftDeclPntDigitNum);
                            BigDecimal baseDiscDealAmt = svcContrBaseBllgTMsg.baseDiscDealAmt.getValue();
                            BigDecimal baseDiscFuncAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, baseDiscDealAmt, funcCcyAftDeclPntDigitNum);
                            BigDecimal baseSlsDealAmt = baseNetDealAmt.add(baseDiscDealAmt);
                            BigDecimal baseSlsFuncAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, baseSlsDealAmt, funcCcyAftDeclPntDigitNum);

                            // START 2018/05/31 K.Kojima [QC#23685,DEL]
                            // NWZC036101PMsg taxApiPMsg = new NWZC036101PMsg();
                            // END 2018/05/31 K.Kojima [QC#23685,DEL]
                            String taxCalcGeoCd = "";
                            // START 2018/05/31 K.Kojima [QC#23685,MOD]
                            // BigDecimal baseTaxRate;
                            // BigDecimal baseTaxFuncAmt;
                            // BigDecimal baseTaxDealAmt;
                            BigDecimal baseTaxRate = BigDecimal.ZERO;
                            BigDecimal baseTaxFuncAmt = BigDecimal.ZERO;
                            BigDecimal baseTaxDealAmt = BigDecimal.ZERO;
                            // END 2018/05/31 K.Kojima [QC#23685,MOD]

                            // START 2018/05/31 K.Kojima [QC#23685,DEL]
                            // // Mod Start 08/31/2016 <QC#13529>
                            // // if (BigDecimal.ZERO.compareTo(baseNetFuncAmt) == 0) {
                            // // Mod Start 2018/01/26 QC#23419
                            // // if (BigDecimal.ZERO.compareTo(baseNetFuncAmt) == 0 || !FLG_ON_Y.equals(dsInvTpTMsg.taxCalcFlg.getValue())) {
                            // if (BigDecimal.ZERO.compareTo(baseNetFuncAmt) == 0 || !FLG_ON_Y.equals(baseDsInvTpTMsg.taxCalcFlg.getValue())) {
                            // // Mod End 2018/01/26 QC#23419
                            // // Mod End   08/31/2016 <QC#13529>
                            //     baseTaxRate = BigDecimal.ZERO;
                            //     baseTaxFuncAmt = BigDecimal.ZERO;
                            //     baseTaxDealAmt = BigDecimal.ZERO;
                            // } else {
                            //     // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
                            //     // taxApiPMsg = callTaxCalcAPIForBase(dsContrDtlInfo, svcContrBllgTMsg, baseNetFuncAmt);
                            //     // START 2017/09/27 K.Yamada [QC#21233, MOD]
                            //     // taxApiPMsg = callTaxCalcAPIForBase(dsContrDtlInfo, svcContrBllgTMsg, baseNetFuncAmt, svcInvNum);
                            //     taxApiPMsg = callTaxCalcAPIForBase(dsContrDtlInfo, svcContrBllgTMsg, baseNetFuncAmt, svcInvNum, invDt);
                            //     // END 2017/09/27 K.Yamada [QC#21233, MOD]
                            //     // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
                            //     if (S21ApiUtil.isXxMsgId(taxApiPMsg)) {
                            // 
                            //         Key key = new Key();
                            //         key.add("DS_CONTR_PK", dsContrPk);
                            //         key.add("DS_CONTR_TP_CD", dsContrTMsg.dsContrTpCd.getValue());
                            //         key.add("DS_CONTR_DTL_TP_CD", dsContrDtlTpTMsg.dsContrDtlTpCd.getValue());
                            //         key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                            //         key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                            //         key.add("SVC_INV_NUM", svcInvNum);
                            //         key.add("INV_DT", invDt);
                            //         key.add("SELL_TO_CUST_CD", sellToCustTMsg.sellToCustCd.getValue());
                            // 
                            //         if (ZYPConstant.FLG_ON_Y.equals(fleetLineFlg)) {
                            //             key.add("CTY_ADDR", sellToCustTMsg.ctyAddr.getValue());
                            //             key.add("ST_CD", sellToCustTMsg.stCd.getValue());
                            //             key.add("POST_CD", sellToCustTMsg.postCd.getValue());
                            //         } else {
                            //             key.add("SHIP_TO_CUST_CD", shipToCustTMsg.shipToCustCd.getValue());
                            //             key.add("CTY_ADDR", shipToCustTMsg.ctyAddr.getValue());
                            //             key.add("ST_CD", shipToCustTMsg.stCd.getValue());
                            //             key.add("POST_CD", shipToCustTMsg.postCd.getValue());
                            //         }
                            // 
                            //         key.add("SVC_INV_CHRG_TP_CD", svcInvChrgTpCd);
                            //         key.add("BASE_FUNC_AMT", baseNetFuncAmt);
                            // 
                            //         List<String> msgIdList = S21ApiUtil.getXxMsgIdList(taxApiPMsg);
                            //         for (String msgId : msgIdList) {
                            //             addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0407E, "NWZC036101", S21MessageFunc.clspGetMessage(msgId), key.toString());
                            //         }
                            //         rollback();
                            //         // mod start 2017/01/19 CSA QC#16645
                            //         // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            //         // dsContrPkList.add(dsContrPk);
                            //         dsContrSkipKeyList.add(dsContrSkipKey);
                            //         // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            //         // mod end 2017/01/19 CSA QC#16645
                            //         continue SVC_INV;
                            //     }
                            //     taxCalcGeoCd = taxApiPMsg.taxCalculateOutputLine.no(0).taxAreaId.getValue();
                            //     baseTaxRate = getTaxRate(taxApiPMsg);
                            //     baseTaxFuncAmt = getTaxFuncAmt(taxApiPMsg).setScale(funcCcyAftDeclPntDigitNum.intValueExact(), RoundingMode.HALF_UP);
                            //     baseTaxDealAmt = exchToDealAmt(actlExchRate, dealCcyAcctArthTpCd, baseTaxFuncAmt, dealCcyAftDeclPntDigitNum);
                            // }
                            // END 2018/05/31 K.Kojima [QC#23685,DEL]

                            invTotDealSlsAmt = invTotDealSlsAmt.add(baseSlsDealAmt);
                            invTotFuncSlsAmt = invTotFuncSlsAmt.add(baseSlsFuncAmt);
                            invTotDealTaxAmt = invTotDealTaxAmt.add(baseTaxDealAmt);
                            invTotFuncTaxAmt = invTotFuncTaxAmt.add(baseTaxFuncAmt);
                            invTotDealDiscAmt = invTotDealDiscAmt.add(baseDiscDealAmt);
                            invTotFuncDiscAmt = invTotFuncDiscAmt.add(baseDiscFuncAmt);
                            invTotDealNetAmt = invTotDealNetAmt.add(baseNetDealAmt);
                            invTotFuncNetAmt = invTotFuncNetAmt.add(baseNetFuncAmt);

                            List<SVC_INV_LINE_ALLOCTMsg> svcInvLineAllocTMsgList = new ArrayList<SVC_INV_LINE_ALLOCTMsg>();

                            // Add Start 2016/11/10 <QC#15789>
                            String ajeInvLineAllocCd = getAjeInvLineAllocCdForBase(hasDsContrProcAllocForBase, dsContrDtlInfo);
                            // Add End   2016/11/10 <QC#15789>
                            SVC_CONTR_BLLG_ALLOCTMsgArray svcContrBllgAllocTMsgArray = getSvcContrBaseBllgAllocList(svcContrBaseBllgTMsg.svcContrBaseBllgPk.getValue());
                            for (int j = 0; j < svcContrBllgAllocTMsgArray.length(); j++) {

                                SVC_CONTR_BLLG_ALLOCTMsg svcContrBllgAllocTMsg = svcContrBllgAllocTMsgArray.no(j);

                                BigDecimal allocDealGrsTotPrcAmt = svcContrBllgAllocTMsg.dealGrsTotPrcAmt.getValue();
                                BigDecimal allocFuncGrsTotPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealGrsTotPrcAmt, funcCcyAftDeclPntDigitNum);
                                BigDecimal allocDealNetUnitPrcAmt = svcContrBllgAllocTMsg.dealNetUnitPrcAmt.getValue();
                                BigDecimal allocFuncNetUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealNetUnitPrcAmt, funcCcyAftDeclPntDigitNum);
                                BigDecimal allocDealGrsUnitPrcAmt = svcContrBllgAllocTMsg.dealGrsUnitPrcAmt.getValue();
                                BigDecimal allocFuncGrsUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealGrsUnitPrcAmt, funcCcyAftDeclPntDigitNum);
                                BigDecimal allocInvLineDealNetAmt = svcContrBllgAllocTMsg.invLineDealNetAmt.getValue();
                                BigDecimal allocInvLineFuncNetAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocInvLineDealNetAmt, funcCcyAftDeclPntDigitNum);
                                // QC2417 start
                                // dealGrsTotPrcAmt is not include
                                // dealDiscUnitPrcAmt.
                                allocDealGrsTotPrcAmt = allocDealGrsTotPrcAmt.add(svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue());
                                // funcGrsTotPrcAmt is not include
                                // funcDiscUnitPrcAmt.
                                allocFuncGrsTotPrcAmt = allocFuncGrsTotPrcAmt.add(exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue(), funcCcyAftDeclPntDigitNum));
                                // QC2417 end

                                BigDecimal allocDealDiscUnitPrcAmt = svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue();
                                BigDecimal allocFuncDiscUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealDiscUnitPrcAmt, funcCcyAftDeclPntDigitNum);

                                BigDecimal svcInvLineAllocPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_ALLOC_SQ");
                                String svcInvLineAllocNum = String.format(SVC_INV_LINE_ALLOC_NUM_FMT, j + 1);

                                SVC_INV_LINE_ALLOCTMsg svcInvLineAllocTMsg = new SVC_INV_LINE_ALLOCTMsg();
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.glblCmpyCd, glblCmpyCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineAllocPk, svcInvLineAllocPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLinePk, svcInvLinePk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvNum, svcInvNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineNum, svcInvLineNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineAllocNum, svcInvLineAllocNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.contrPrcAllocTpCd, svcContrBllgAllocTMsg.contrPrcAllocTpCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.intgMdseCd, svcContrBllgAllocTMsg.intgMdseCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.tocCd, svcContrBllgAllocTMsg.tocCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.slsAllocRate, svcContrBllgAllocTMsg.slsAllocRate);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealGrsTotPrcAmt, allocDealGrsTotPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcGrsTotPrcAmt, allocFuncGrsTotPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealNetUnitPrcAmt, allocDealNetUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcNetUnitPrcAmt, allocFuncNetUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealGrsUnitPrcAmt, allocDealGrsUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcGrsUnitPrcAmt, allocFuncGrsUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineDealNetAmt, allocInvLineDealNetAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineFuncNetAmt, allocInvLineFuncNetAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineDealTaxAmt, BigDecimal.ZERO);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineFuncTaxAmt, BigDecimal.ZERO);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealDiscUnitPrcAmt, allocDealDiscUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcDiscUnitPrcAmt, allocFuncDiscUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaCmpyCd, svcContrBllgAllocTMsg.coaCmpyCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaAfflCd, svcContrBllgAllocTMsg.coaAfflCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaBrCd, svcContrBllgAllocTMsg.coaBrCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaChCd, svcContrBllgAllocTMsg.coaChCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaCcCd, svcContrBllgAllocTMsg.coaCcCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaAcctCd, svcContrBllgAllocTMsg.coaAcctCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaProdCd, svcContrBllgAllocTMsg.coaProdCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaProjCd, svcContrBllgAllocTMsg.coaProjCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaExtnCd, svcContrBllgAllocTMsg.coaExtnCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.ccyCd, svcContrBllgAllocTMsg.ccyCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrBllgAllocPk, svcContrBllgAllocTMsg.svcContrBllgAllocPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrBaseBllgPk, svcContrBllgAllocTMsg.svcContrBaseBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrMtrBllgPk, svcContrBllgAllocTMsg.svcContrMtrBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrAddlChrgBllgPk, svcContrBllgAllocTMsg.svcContrAddlChrgBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.trxCd, svcContrBllgAllocTMsg.trxCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.trxRsnCd, svcContrBllgAllocTMsg.trxRsnCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dfrdAcctgRuleCd, svcContrBllgAllocTMsg.dfrdAcctgRuleCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dfrdAcctgRuleDurnAot, svcContrBllgAllocTMsg.dfrdAcctgRuleDurnAot);
                                // Add Start 2016/11/10 <QC#15789>
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.ajeInvLineAllocCd, ajeInvLineAllocCd);
                                // Add End   2016/11/10 <QC#15789>
                                // START 2016/06/20 T.Aoyagi [QC#9907, ADD]
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineSplTpCd, this.invLineSplTpMap.get(svcContrBllgAllocTMsg.svcContrBllgAllocPk.getValue()));
                                // END 2016/06/20 T.Aoyagi [QC#9907, ADD]

                                svcInvLineAllocTMsgList.add(svcInvLineAllocTMsg);
                            }

                            // ----------------------------------------------------------------------
                            // Adjusting SVC_INV_LINE_ALLOC Fractions
                            // ----------------------------------------------------------------------
                            adjSvcInvLineAllocFrac(svcInvLineAllocTMsgList, baseSlsDealAmt, baseSlsFuncAmt, baseDiscDealAmt, baseDiscFuncAmt, baseNetDealAmt, baseNetFuncAmt, baseTaxDealAmt, baseTaxFuncAmt);

                            // ----------------------------------------------------------------------
                            // Create SVC_INV_LINE_ALLOC
                            // ----------------------------------------------------------------------
                            if (ZYPConstant.FLG_ON_Y.equals(fleetLineFlg) || ZYPConstant.FLG_ON_Y.equals(splyLineFlg)) {
                                for (SVC_INV_LINE_ALLOCTMsg svcInvLineAllocTMsg : svcInvLineAllocTMsgList) {
                                    S21FastTBLAccessor.insert(svcInvLineAllocTMsg);
                                    if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineAllocTMsg.getReturnCode())) {
                                        throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE_ALLOC" });
                                    }
                                }
                            }

                            // ----------------------------------------------------------------------
                            // Create SVC_INV_LINE
                            // ----------------------------------------------------------------------
                            String custCd;
                            if (ZYPConstant.FLG_ON_Y.equals(fleetLineFlg)) {
                                //Mod Start 07/05/2016 <QC#9438>
//                                custCd = sellToCustTMsg.sellToCustCd.getValue();
                                // START 2018/02/02 K.Kojima [QC#22242,MOD]
                                // custCd = getFleetDefaultShipToCustCd(dsContrDtlInfo);
                                custCd = getFleetShipToCustCd(dsContrDtlInfoList);
                                // END 2018/02/02 K.Kojima [QC#22242,MOD]
                                if (custCd == null) {
                                    Key key = new Key();
                                    key.add("DS_CONTR_PK", dsContrPk);
                                    key.add("DS_CONTR_DTL_TP_CD", dsContrDtlTpTMsg.dsContrDtlTpCd.getValue());
                                    key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                                    key.add("INV_DT", invDt);
                                    key.add("SELL_TO_CUST_CD", sellToCustTMsg.sellToCustCd.getValue());
                                    key.add("SVC_INV_CHRG_TP_CD", svcInvChrgTpCd);
                                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                                    // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "Default Ship To", key.toString());
                                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1093E, key.toString());
                                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                                    rollback();
                                    // mod start 2017/01/19 CSA QC#16645
                                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                                    // dsContrPkList.add(dsContrPk);
                                    dsContrSkipKeyList.add(dsContrSkipKey);
                                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                                    // mod end 2017/01/19 CSA QC#16645
                                    continue SVC_INV;
                                }
                                //Mod End   07/05/2016 <QC#9438>
                            } else {
                                custCd = shipToCustTMsg.shipToCustCd.getValue();
                            }

                            SVC_INV_LINETMsg svcInvLineTMsg = getSvcInvLineTMsg(custCd, svcInvNum, svcInvLinePk, svcInvLineNum, svcInvChrgTpCd, mdlNm,
                                    baseTaxRate, baseSlsDealAmt, baseSlsFuncAmt, baseDiscDealAmt, baseDiscFuncAmt, baseNetDealAmt, baseNetFuncAmt, baseTaxDealAmt, baseTaxFuncAmt, taxCalcGeoCd,
                                    dsContrDtlInfo, dsContrTMsg, svcContrBllgTMsg, svcContrBaseBllgTMsg, null);
                            // QC2415 end

                            // START 2019/03/11 [QC#30675, ADD]
                            if (svcInvLineTMsg == null) {
                                Key key = new Key();
                                key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                key.add("SVC_MACH_MSTR_PK", svcContrBllgTMsg.svcMachMstrPk.getValue());
                                addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE.SLS_REP_TOC_CD", key.toString());
                                rollback();
                                continue SVC_INV;
                            }
                            // END 2019/03/11 [QC#30675, ADD]
                            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrPk, svcContrBllgTMsg.dsContrPk);
                            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrDtlPk, svcContrBllgTMsg.dsContrDtlPk);
                            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcContrBaseBllgPk, svcContrBaseBllgTMsg.svcContrBaseBllgPk);

                            // add start 2018/08/09 QC#27329-3
                            if (INV_TP.CREDIT_MEMO.equals(svcContrBllgTMsg.invTpCd.getValue()) && hasValue(svcContrBllgTMsg.origSvcInvNum)) {
                                setOrigSvcInvLineInfo(svcInvLineTMsg, svcContrBllgTMsg.origSvcInvNum.getValue(), svcContrBllgTMsg.dsContrBllgSchdPk.getValue());
                            }
                            // add end 2018/08/09 QC#27329-3

                            S21FastTBLAccessor.insert(svcInvLineTMsg);
                            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineTMsg.getReturnCode())) {
                                throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE" });
                            }

                            if (ZYPConstant.FLG_ON_Y.equals(fleetLineFlg)) {
                                fleetLineSvcInvLineTMsg = svcInvLineTMsg;
                            }

                            // START 2018/05/31 K.Kojima [QC#23685,DEL]
                            // // SVC_INV_LINE_TAX_DTL
                            // createSvcInvLineTaxDtl(svcInvLinePk, (String) dsContrDtlInfo.get("CCY_CD"), taxApiPMsg);
                            // END 2018/05/31 K.Kojima [QC#23685,DEL]

                            lineNum++;

                            // ----------------------------------------------------------------------
                            // Additional Charge
                            // ----------------------------------------------------------------------
                            List<Map<String, BigDecimal>> addlChrgBllgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                            for (Map<String, BigDecimal> addlChrgBllgInfo : addlChrgBllgInfoList) {

                                BigDecimal addlSvcContrBllgPk = addlChrgBllgInfo.get("SVC_CONTR_BLLG_PK");
                                SVC_CONTR_BLLGTMsg addlSvcContrBllgTMsg = getSvcContrBllg(addlSvcContrBllgPk);
                                BigDecimal addlChrgBllgPk = addlChrgBllgInfo.get("SVC_CONTR_ADDL_CHRG_BLLG_PK");
                                SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg = getSvcContrAddlChrgBllgTMsg(addlChrgBllgPk);
                                String addlSvcInvLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);
                                // tax API
                                BigDecimal taxDealAmt = BigDecimal.ZERO;
                                BigDecimal taxFuncAmt = BigDecimal.ZERO;
                                // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                // // Mod Start 08/31/2016 <QC#13529>
                                // NWZC036101PMsg addlTaxApiPMsg = null;
                                // // Mod Start 2018/01/26 QC#23419
                                // // if (FLG_ON_Y.equals(dsInvTpTMsg.taxCalcFlg.getValue())) {
                                // if (FLG_ON_Y.equals(baseDsInvTpTMsg.taxCalcFlg.getValue())) {
                                // // Mod End 2018/01/26 QC#23419
                                //     // Mod Start 04/04/2016 <QC#6492>
                                //     // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
                                //     // addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue());
                                //     // START 2017/09/27 K.Yamada [QC#21233, MOD]
                                //     // addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue(), svcInvNum);
                                //     addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue(), svcInvNum, invDt);
                                //     // END 2017/09/27 K.Yamada [QC#21233, MOD]
                                //     // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
                                //     // Mod End 04/04/2016 <QC#6492>
                                //     if (S21ApiUtil.isXxMsgId(addlTaxApiPMsg)) {
                                //         Key key = new Key();
                                //         key.add("DS_CONTR_PK", dsContrPk);
                                //         key.add("DS_CONTR_TP_CD", dsContrTMsg.dsContrTpCd.getValue());
                                // 
                                //         key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                                //         // START 2016/12/13 N.Arai [QC#16400, MOD]
                                //         //key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                                //         key.add("SVC_CONTR_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrBllgPk.getValue());
                                //         // END 2016/12/13 N.Arai [QC#16400, MOD]
                                //         key.add("SVC_INV_NUM", svcInvNum);
                                //         key.add("INV_DT", invDt);
                                //         key.add("SELL_TO_CUST_CD", sellToCustTMsg.sellToCustCd.getValue());
                                //         key.add("SHIP_TO_CUST_CD", custCd);
                                //         // Mod Start 04/04/2016 <QC#6492>
                                //         // key.add("CTY_ADDR", shipToCustTMsg.ctyAddr.getValue());
                                //         // key.add("ST_CD", shipToCustTMsg.stCd.getValue());
                                //         // key.add("POST_CD", shipToCustTMsg.postCd.getValue());
                                //         if (ZYPConstant.FLG_ON_Y.equals(fleetLineFlg)) {
                                //             key.add("CTY_ADDR", sellToCustTMsg.ctyAddr.getValue());
                                //             key.add("ST_CD", sellToCustTMsg.stCd.getValue());
                                //             key.add("POST_CD", sellToCustTMsg.postCd.getValue());
                                //         } else {
                                //             key.add("CTY_ADDR", shipToCustTMsg.ctyAddr.getValue());
                                //             key.add("ST_CD", shipToCustTMsg.stCd.getValue());
                                //             key.add("POST_CD", shipToCustTMsg.postCd.getValue());
                                //         }
                                //         // Mod End 04/04/2016 <QC#6492>
                                //         key.add("SVC_INV_CHRG_TP_CD", svcInvChrgTpCd);
                                //         key.add("FUNC_AMT", svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue());
                                // 
                                //         List<String> msgIdList = S21ApiUtil.getXxMsgIdList(addlTaxApiPMsg);
                                //         for (String msgId : msgIdList) {
                                //             addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0407E, "NWZC036101", S21MessageFunc.clspGetMessage(msgId), key.toString());
                                //         }
                                //         rollback();
                                //         // mod start 2017/01/19 CSA QC#16645
                                //         // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                                //         // dsContrPkList.add(dsContrPk);
                                //         dsContrSkipKeyList.add(dsContrSkipKey);
                                //         // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                                //         // mod end 2017/01/19 CSA QC#16645
                                //         continue SVC_INV;
                                //     }
                                //     taxFuncAmt = getTaxFuncAmt(addlTaxApiPMsg).setScale(funcCcyAftDeclPntDigitNum.intValueExact(), RoundingMode.HALF_UP);
                                //     taxDealAmt = exchToDealAmt(actlExchRate, dealCcyAcctArthTpCd, taxFuncAmt, dealCcyAftDeclPntDigitNum);
                                // }
                                // // Mod End   08/31/2016 <QC#13529>
                                // END 2018/05/31 K.Kojima [QC#23685,DEL]

                                // Create SVC_INV_LINE
                                //Mod Start 05/25/2016 <QC#7636>
                                // START 2017/11/17 K.Kojima [QC#21918,MOD]
                                // SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, addlTaxApiPMsg, taxDealAmt, taxFuncAmt, custCd);
                                // START 2018/05/31 K.Kojima [QC#23685,MOD]
                                // SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, addlTaxApiPMsg, taxDealAmt, taxFuncAmt, custCd, dsContrTMsg);
                                SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, taxDealAmt, taxFuncAmt, custCd, dsContrTMsg);
                                // END 2018/05/31 K.Kojima [QC#23685,MOD]
                                // END 2017/11/17 K.Kojima [QC#21918,MOD]
                                //Mod End   05/25/2016 <QC#7636>
                                // START 2019/03/11 [QC#30675, ADD]
                                if (addlSvcInvLineTMsg == null) {
                                    Key key = new Key();
                                    key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                    key.add("SVC_CONTR_ADDL_CHRG_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue());
                                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE.SLS_REP_TOC_CD", key.toString());
                                    rollback();
                                    continue SVC_INV;
                                }
                                // END 2019/03/11 [QC#30675, ADD]

                                // Add Start 08/08/2016 <QC#8293>
                                invTotDealSlsAmt = invTotDealSlsAmt.add(addlSvcInvLineTMsg.invLineDealSlsAmt.getValue());
                                invTotFuncSlsAmt = invTotFuncSlsAmt.add(addlSvcInvLineTMsg.invLineFuncSlsAmt.getValue());
                                invTotDealTaxAmt = invTotDealTaxAmt.add(addlSvcInvLineTMsg.invLineDealTaxAmt.getValue());
                                invTotFuncTaxAmt = invTotFuncTaxAmt.add(addlSvcInvLineTMsg.invLineFuncTaxAmt.getValue());
                                invTotDealDiscAmt = invTotDealDiscAmt.add(addlSvcInvLineTMsg.invLineDealDiscAmt.getValue());
                                invTotFuncDiscAmt = invTotFuncDiscAmt.add(addlSvcInvLineTMsg.invLineFuncDiscAmt.getValue());
                                invTotDealNetAmt = invTotDealNetAmt.add(addlSvcInvLineTMsg.invLineDealNetAmt.getValue());
                                invTotFuncNetAmt = invTotFuncNetAmt.add(addlSvcInvLineTMsg.invLineFuncNetAmt.getValue());
                                // Add End   08/08/2016 <QC#8293>
                                // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                // createSvcInvLineTaxDtl(addlSvcInvLineTMsg.svcInvLinePk.getValue(), (String) dsContrDtlInfo.get("CCY_CD"), addlTaxApiPMsg);
                                // END 2018/05/31 K.Kojima [QC#23685,DEL]

                                // Add Start 2016/11/10 <QC#15789>
                                String ajeInvLineAllocCdForAddl = getAjeInvLineAllocCdForAddl(hasDsContrProcAllocForAddl, SVC_INV_CHRG_TP.BASE_CHARGE, svcContrAddlChrgBllgTMsg);
                                // Add End   2016/11/10 <QC#15789>

                                List<BigDecimal> addlAllocPkList = getSvcContrBllgAllocPkForAddl(addlChrgBllgPk);
                                for (int j = 0; j < addlAllocPkList.size(); j++) {
                                    SVC_CONTR_BLLG_ALLOCTMsg svcContrBllgAllocTMsg = getSvcContrBllgAllocTMsg(addlAllocPkList.get(j));

                                    // Mod Start 2016/11/10 <QC#15789>
                                    // Create SVC_INV_LINE_ALLOC
                                    // START 2017/11/29 K.Kojima [QC#21918,MOD]
                                    // createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl);
                                    // START 2019/03/11 [QC#30675, MOD]
                                    // createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl, svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue(), dsContrTMsg.dsContrCatgCd.getValue());
                                    SVC_INV_LINE_ALLOCTMsg addlSvcInvLineAllocTMsg = createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl, svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue(), dsContrTMsg.dsContrCatgCd.getValue());
                                    if (addlSvcInvLineAllocTMsg == null) {
                                        Key key = new Key();
                                        key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                        key.add("SVC_CONTR_ADDL_CHRG_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue());
                                        addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE_ALLOC.TOC_CD", key.toString());
                                        rollback();
                                        continue SVC_INV;
                                    }
                                    // END 2019/03/11 [QC#30675, MOD]
                                    // END 2017/11/29 K.Kojima [QC#21918,MOD]
                                    // Mod End   2016/11/10 <QC#15789>
                                }
                                // Create SVC_INV_LINE_ADDL_CHRG
                                BigDecimal addlSvcInvLinePk = addlSvcInvLineTMsg.svcInvLinePk.getValue();
                                createSvcInvLineAddlChrg(addlSvcInvLinePk, svcContrBllgPk, svcContrAddlChrgBllgTMsg);

                                lineNum++;
                            }

                            // last line
                            if (listIdx == dsContrDtlInfoList.size() - 1 && fleetLineSvcInvLineTMsg != null) {

                                if (!existUsgCharge(dsContrDtlInfoList)) {
                                    List<Map<String, Object>> fleetMachInfoList = getFleetMachInfo(dsContrPk, baseBllgFlg);

                                    for (Map<String, Object> fleetMachInfo : fleetMachInfoList) {

                                        String fleetLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);
                                        // Create Fleet Machine
                                        SVC_INV_LINETMsg fleetMachSvcInvLineTMsg = createSvcInvLineForFleetMachBase(fleetMachInfo, fleetLineSvcInvLineTMsg, custCd, fleetLineNum);

                                        S21FastTBLAccessor.insert(fleetMachSvcInvLineTMsg);
                                        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineTMsg.getReturnCode())) {
                                            throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE" });
                                        }
                                        lineNum++;
                                    }
                                }
                            }

                        }
                        // QC2536 start
                    }
                    // QC2536 end

                    // ----------------------------------------------------------------------
                    // Meter Charge
                    // ----------------------------------------------------------------------
                    // QC2536 start
                    if (ZYPConstant.FLG_OFF_N.equals(invSeptBaseUsgFlg) || (ZYPConstant.FLG_ON_Y.equals(invSeptBaseUsgFlg) && ZYPConstant.FLG_ON_Y.equals(mtrBllgFlg))) {
                        // QC2536 end
                        // Add Start 2018/01/26 QC#23419
                        if (hasValue(dsContrTMsg.dsContrEdiCd) && DS_CONTR_EDI.CFS.equals(dsContrTMsg.dsContrEdiCd.getValue())) {
                            if (ZYPConstant.FLG_ON_Y.equals(dsContrTMsg.usgChrgToLeaseCmpyFlg.getValue())) {
                                // No-AR
                                usgDsInvTpTMsg = noARDsInvTpTMsg;
                            }
                        }
                        // Add End 2018/01/26 QC#23419
                        // START 2017/08/29 M.Kidokoro [QC#20079, ADD]
                        // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                        // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                        // if (isMtrHldForSeparate(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) 
                        if (isUnbllblForSeparate(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                        // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            continue;
                        }
                        // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                        // END 2017/08/29 M.Kidokoro [QC#20079, ADD]

                        // QC2973 start
                        List<List<SVC_INV_LINE_ALLOCTMsg>> svcInvLineAllocTMsgListList = new ArrayList<List<SVC_INV_LINE_ALLOCTMsg>>();
                        // QC2973 end

//                        // QC2848 start
//                        Map<String, String> svcContrBllgPkMap = new HashMap<String, String>();
//                        Map<String, SVC_INV_LINETMsg> svcInvLineTMsgMap = new HashMap<String, SVC_INV_LINETMsg>();
//                        BigDecimal svcInvLinePk = null;
//                        // QC2848 end

                        svcInvChrgTpCd = SVC_INV_CHRG_TP.METER_CHARGE;

                        SVC_CONTR_MTR_BLLGTMsgArray svcContrMtrBllgTMsgArray = getSvcContrMtrBllgList(svcContrBllgPk);
                        for (int i = 0; i < svcContrMtrBllgTMsgArray.length(); i++) {
//                            // QC2848 start
//                            if (svcContrBllgPkMap.size() != 0 && svcContrBllgPkMap.containsKey(svcContrBllgPk.toString())) {
//                                lineNum--;
//                            } else {
//                                svcInvLinePk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_SQ");
//                            }
//                            // QC2848 end

                            // QC2848 start
                            BigDecimal svcInvLinePk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_SQ");
                            // QC2848 end
                            String svcInvLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);

                            BigDecimal svcInvLineMtrPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_MTR_SQ");

                            SVC_CONTR_MTR_BLLGTMsg svcContrMtrBllgTMsg = svcContrMtrBllgTMsgArray.no(i);

                            BigDecimal totXsMtrChrgDealAmt = BigDecimal.ZERO;
                            BigDecimal totXsMtrChrgFuncAmt = BigDecimal.ZERO;

                            // ----------------------------------------------------------------------
                            // Create SVC_INV_LINE_XS_MTR
                            // ----------------------------------------------------------------------
                            SVC_CONTR_XS_MTR_BLLGTMsgArray svcContrXsMtrBllgTMsgArray = getSvcContrXsMtrBllgList(svcContrMtrBllgTMsg.svcContrMtrBllgPk.getValue());
                            for (int j = 0; j < svcContrXsMtrBllgTMsgArray.length(); j++) {

                                SVC_CONTR_XS_MTR_BLLGTMsg svcContrXsMtrBllgTMsg = svcContrXsMtrBllgTMsgArray.no(j);

                                BigDecimal svcInvLineXsMtrPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_XS_MTR_SQ");

                                BigDecimal xsMtrChrgDealAmt = svcContrXsMtrBllgTMsg.xsMtrChrgDealAmt.getValue();
                                BigDecimal xsMtrChrgFuncAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, xsMtrChrgDealAmt, funcCcyAftDeclPntDigitNum);

                                totXsMtrChrgDealAmt = totXsMtrChrgDealAmt.add(xsMtrChrgDealAmt);
                                totXsMtrChrgFuncAmt = totXsMtrChrgFuncAmt.add(xsMtrChrgFuncAmt);

                                SVC_INV_LINE_XS_MTRTMsg svcInvLineXsMtrTMsg = new SVC_INV_LINE_XS_MTRTMsg();
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.glblCmpyCd, glblCmpyCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcInvLineXsMtrPk, svcInvLineXsMtrPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcInvLinePk, svcInvLinePk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcInvNum, svcInvNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcInvLineNum, svcInvLineNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcInvLineMtrPk, svcInvLineMtrPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.dsContrBllgMtrPk, svcContrXsMtrBllgTMsg.dsContrBllgMtrPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.dsContrBllgMtrId, svcContrXsMtrBllgTMsg.dsContrBllgMtrId);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcContrXsMtrBllgPk, svcContrXsMtrBllgTMsg.svcContrXsMtrBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcContrMtrBllgPk, svcContrXsMtrBllgTMsg.svcContrMtrBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.contrXsCopyPk, svcContrXsMtrBllgTMsg.contrXsCopyPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.xsMtrCopyQty, svcContrXsMtrBllgTMsg.xsMtrCopyQty);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.xsMtrChrgDealAmt, xsMtrChrgDealAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.xsMtrChrgFuncAmt, xsMtrChrgFuncAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.ccyCd, svcContrXsMtrBllgTMsg.ccyCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.xsMtrAmtRate, svcContrXsMtrBllgTMsg.xsMtrAmtRate);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.xsMtrFromCopyQty, svcContrXsMtrBllgTMsg.xsMtrFromCopyQty);
                                // Mod Start 04/07/2016 <QC#6585>
                                if (hasValue(svcContrXsMtrBllgTMsg.contrXsCopyPk)) {
                                    BigDecimal origXsMtrFromCopy = getOrigXsMtrFormCopyQty(svcContrBllgTMsg.dsContrBllgSchdPk.getValue(), svcContrXsMtrBllgTMsg.contrXsCopyPk.getValue());
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.origXsMtrFromCopyQty, origXsMtrFromCopy);
                                }
                                // Mod End 04/07/2016 <QC#6585>

                                S21FastTBLAccessor.insert(svcInvLineXsMtrTMsg);
                                if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineXsMtrTMsg.getReturnCode())) {
                                    throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE_XS_MTR" });
                                }
                            }

                            // ----------------------------------------------------------------------
                            // Create SVC_INV_LINE_MTR
                            // ----------------------------------------------------------------------
                            SVC_INV_LINE_MTRTMsg svcInvLineMtrTMsg = new SVC_INV_LINE_MTRTMsg();
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.glblCmpyCd, glblCmpyCd);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcInvLineMtrPk, svcInvLineMtrPk);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcInvLinePk, svcInvLinePk);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcInvNum, svcInvNum);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcInvLineNum, svcInvLineNum);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.dsContrBllgMtrPk, svcContrMtrBllgTMsg.dsContrBllgMtrPk);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.dsContrBllgMtrId, svcContrMtrBllgTMsg.dsContrBllgMtrId);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcContrMtrBllgPk, svcContrMtrBllgTMsg.svcContrMtrBllgPk);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrChrgDealAmt, totXsMtrChrgDealAmt);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrChrgFuncAmt, totXsMtrChrgFuncAmt);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrEstFlg, svcContrMtrBllgTMsg.mtrEstFlg);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrCopyQty, svcContrMtrBllgTMsg.mtrCopyQty);
                            // QC2302 start
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.totCopyQty, svcContrMtrBllgTMsg.totCopyQty);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.testCopyQty, svcContrMtrBllgTMsg.testCopyQty);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.prevTotCopyQty, svcContrMtrBllgTMsg.prevTotCopyQty);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.bllgCopyQty, svcContrMtrBllgTMsg.bllgCopyQty);
                            // QC2302 end
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mdseCd, svcContrMtrBllgTMsg.mdseCd);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.ccyCd, svcContrMtrBllgTMsg.ccyCd);

                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.prevPhysMtrReadGrpSq, svcContrMtrBllgTMsg.prevPhysMtrReadGrpSq);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcPhysMtrReadGrpSq, svcContrMtrBllgTMsg.svcPhysMtrReadGrpSq);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.freeCopyCnt, svcContrMtrBllgTMsg.freeCopyCnt);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.usgFreeCopyCnt, svcContrMtrBllgTMsg.usgFreeCopyCnt);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.xsChrgTpCd, svcContrMtrBllgTMsg.xsChrgTpCd);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.rollOverRatio, svcContrMtrBllgTMsg.rollOverRatio);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.rollOverCnt, svcContrMtrBllgTMsg.rollOverCnt);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.copyInclQty, svcContrMtrBllgTMsg.copyInclQty);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.aggrAdjCopyQty, svcContrMtrBllgTMsg.aggrAdjCopyQty);
                            // START 04/08/2016 T.Aoyagi [QC#6762, MOD]
                            // START 2016/03/15 T.Aoyagi [QC#3818, MOD]
//                            String mtrLbDescTxt = getMtrLbDescTxt(svcContrMtrBllgTMsg.svcPhysMtrReadGrpSq.getValue(), svcContrMtrBllgTMsg.svcContrBllgPk.getValue());
                            Map<String, String> mtrLbInfo = getMtrLbDescTxt(svcContrMtrBllgTMsg.dsContrBllgMtrPk.getValue());
                            if (mtrLbInfo != null) {
                            // END 2016/03/15 T.Aoyagi [QC#3818, MOD]
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrLbDescTxt, mtrLbInfo.get("MTR_LB_DESC_TXT"));
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrLbCd, mtrLbInfo.get("MTR_LB_CD"));
                            }
                            // END 04/08/2016 T.Aoyagi [QC#6762, MOD]
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.contrMtrMultRate, svcContrMtrBllgTMsg.contrMtrMultRate);
                            svcInvLineMtrTMsg.prevMtrReadDt.clear();
                            svcInvLineMtrTMsg.mtrReadDt.clear();

                            S21FastTBLAccessor.insert(svcInvLineMtrTMsg);
                            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineMtrTMsg.getReturnCode())) {
                                throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE_MTR" });
                            }

                            // START 2018/04/26 K.Kojima [QC#23630,ADD]
                            insertDsContrBllgMtrUsed(svcInvLineMtrTMsg, svcContrBllgTMsg, svcContrMtrBllgTMsg);
                            // END 2018/04/26 K.Kojima [QC#23630,ADD]

                            BigDecimal mtrNetDealAmt = totXsMtrChrgDealAmt;
                            BigDecimal mtrNetFuncAmt = totXsMtrChrgFuncAmt;

                            // START 2018/05/31 K.Kojima [QC#23685,DEL]
                            // NWZC036101PMsg taxApiPMsg = new NWZC036101PMsg();
                            // END 2018/05/31 K.Kojima [QC#23685,DEL]
                            String taxCalcGeoCd = "";
                            // START 2018/05/31 K.Kojima [QC#23685,MOD]
                            // BigDecimal mtrTaxRate;
                            // BigDecimal mtrTaxFuncAmt;
                            // BigDecimal mtrTaxDealAmt;
                            BigDecimal mtrTaxRate = BigDecimal.ZERO;
                            BigDecimal mtrTaxFuncAmt = BigDecimal.ZERO;
                            BigDecimal mtrTaxDealAmt = BigDecimal.ZERO;
                            // END 2018/05/31 K.Kojima [QC#23685,MOD]

                            // START 2018/05/31 K.Kojima [QC#23685,DEL]
                            // // Mod Start 08/31/2016 <QC#13529>
                            // // if (BigDecimal.ZERO.compareTo(mtrNetFuncAmt) == 0) {
                            // // Mod Start 2018/01/26 QC#23419
                            // // if (BigDecimal.ZERO.compareTo(mtrNetFuncAmt) == 0 || !FLG_ON_Y.equals(dsInvTpTMsg.taxCalcFlg.getValue())) {
                            // if (BigDecimal.ZERO.compareTo(mtrNetFuncAmt) == 0 || !FLG_ON_Y.equals(usgDsInvTpTMsg.taxCalcFlg.getValue())) {
                            // // Mod End 2018/01/26 QC#23419
                            // // Mod End   08/31/2016 <QC#13529>
                            //     mtrTaxRate = BigDecimal.ZERO;
                            //     mtrTaxFuncAmt = BigDecimal.ZERO;
                            //     mtrTaxDealAmt = BigDecimal.ZERO;
                            // } else {
                            //     // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
                            //     // taxApiPMsg = callTaxCalcAPIForUsg(dsContrDtlInfo, svcContrBllgTMsg, mtrNetFuncAmt);
                            //     // START 2017/09/27 K.Yamada [QC#21233, MOD]
                            //     // taxApiPMsg = callTaxCalcAPIForUsg(dsContrDtlInfo, svcContrBllgTMsg, mtrNetFuncAmt, svcInvNum);
                            //     taxApiPMsg = callTaxCalcAPIForUsg(dsContrDtlInfo, svcContrBllgTMsg, mtrNetFuncAmt, svcInvNum, invDt);
                            //     // END 2017/09/27 K.Yamada [QC#21233, MOD]
                            //     // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
                            // 
                            //     if (S21ApiUtil.isXxMsgId(taxApiPMsg)) {
                            // 
                            //         Key key = new Key();
                            //         key.add("DS_CONTR_PK", dsContrPk);
                            //         key.add("DS_CONTR_TP_CD", dsContrTMsg.dsContrTpCd.getValue());
                            //         key.add("DS_CONTR_DTL_TP_CD", dsContrDtlTpTMsg.dsContrDtlTpCd.getValue());
                            //         key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                            //         key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                            //         key.add("SVC_INV_NUM", svcInvNum);
                            //         key.add("INV_DT", invDt);
                            //         key.add("SELL_TO_CUST_CD", sellToCustTMsg.sellToCustCd.getValue());
                            //         if (ZYPConstant.FLG_ON_Y.equals(fleetLineFlg)) {
                            //             key.add("CTY_ADDR", sellToCustTMsg.ctyAddr.getValue());
                            //             key.add("ST_CD", sellToCustTMsg.stCd.getValue());
                            //             key.add("POST_CD", sellToCustTMsg.postCd.getValue());
                            //         } else {
                            //             key.add("SHIP_TO_CUST_CD", shipToCustTMsg.shipToCustCd.getValue());
                            //             key.add("CTY_ADDR", shipToCustTMsg.ctyAddr.getValue());
                            //             key.add("ST_CD", shipToCustTMsg.stCd.getValue());
                            //             key.add("POST_CD", shipToCustTMsg.postCd.getValue());
                            //         }
                            //         key.add("SVC_INV_CHRG_TP_CD", svcInvChrgTpCd);
                            //         key.add("MTR_FUNC_AMT", mtrNetFuncAmt);
                            // 
                            //         List<String> msgIdList = S21ApiUtil.getXxMsgIdList(taxApiPMsg);
                            //         for (String msgId : msgIdList) {
                            //             addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0407E, "NWZC036101", S21MessageFunc.clspGetMessage(msgId), key.toString());
                            //         }
                            // 
                            //         rollback();
                            //         // mod start 2017/01/19 CSA QC#16645
                            //         // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            //         // dsContrPkList.add(dsContrPk);
                            //         dsContrSkipKeyList.add(dsContrSkipKey);
                            //         // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            //         // mod end 2017/01/19 CSA QC#16645
                            //         continue SVC_INV;
                            //     }
                            //     taxCalcGeoCd = taxApiPMsg.taxCalculateOutputLine.no(0).taxAreaId.getValue();
                            //     mtrTaxRate = getTaxRate(taxApiPMsg);
                            //     mtrTaxFuncAmt = getTaxFuncAmt(taxApiPMsg).setScale(funcCcyAftDeclPntDigitNum.intValueExact(), RoundingMode.HALF_UP);
                            //     mtrTaxDealAmt = exchToDealAmt(actlExchRate, dealCcyAcctArthTpCd, mtrTaxFuncAmt, dealCcyAftDeclPntDigitNum);
                            // }
                            // END 2018/05/31 K.Kojima [QC#23685,DEL]

                            List<SVC_INV_LINE_ALLOCTMsg> svcInvLineAllocTMsgList = new ArrayList<SVC_INV_LINE_ALLOCTMsg>();

                            BigDecimal mtrDiscDealAmt = BigDecimal.ZERO;
                            BigDecimal mtrDiscFuncAmt = BigDecimal.ZERO;

                            // Add Start 2016/11/10 <QC#15789>
                            String ajeInvLineAllocCd = getAjeInvLineAllocCdForMtr(hasDsContrProcAllocForMtr, dsContrDtlInfo);
                            // Add End   2016/11/10 <QC#15789>
                            SVC_CONTR_BLLG_ALLOCTMsgArray svcContrBllgAllogTMsgArray = getSvcContrMtrBllgAllocList(svcContrMtrBllgTMsg.svcContrMtrBllgPk.getValue());
                            for (int j = 0; j < svcContrBllgAllogTMsgArray.length(); j++) {

                                SVC_CONTR_BLLG_ALLOCTMsg svcContrBllgAllocTMsg = svcContrBllgAllogTMsgArray.no(j);

                                BigDecimal allocDealGrsTotPrcAmt = svcContrBllgAllocTMsg.dealGrsTotPrcAmt.getValue();
                                BigDecimal allocFuncGrsTotPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealGrsTotPrcAmt, funcCcyAftDeclPntDigitNum);
                                BigDecimal allocDealNetUnitPrcAmt = svcContrBllgAllocTMsg.dealNetUnitPrcAmt.getValue();
                                BigDecimal allocFuncNetUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealNetUnitPrcAmt, funcCcyAftDeclPntDigitNum);
                                BigDecimal allocDealGrsUnitPrcAmt = svcContrBllgAllocTMsg.dealGrsUnitPrcAmt.getValue();
                                BigDecimal allocFuncGrsUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealGrsUnitPrcAmt, funcCcyAftDeclPntDigitNum);
                                BigDecimal allocInvLineDealNetAmt = svcContrBllgAllocTMsg.invLineDealNetAmt.getValue();
                                BigDecimal allocInvLineFuncNetAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocInvLineDealNetAmt, funcCcyAftDeclPntDigitNum);
                                // QC2417 start
                                // dealGrsTotPrcAmt is not include
                                // dealDiscUnitPrcAmt.
                                allocDealGrsTotPrcAmt = allocDealGrsTotPrcAmt.add(svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue());
                                // funcGrsTotPrcAmt is not include
                                // funcDiscUnitPrcAmt.
                                allocFuncGrsTotPrcAmt = allocFuncGrsTotPrcAmt.add(exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue(), funcCcyAftDeclPntDigitNum));
                                // QC2417 end

                                BigDecimal allocDealDiscUnitPrcAmt = svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue();
                                BigDecimal allocFuncDiscUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealDiscUnitPrcAmt, funcCcyAftDeclPntDigitNum);

                                // SVC_CONTR_MTR_BLLG: DISC_AMT = 0
                                // SVC_CONTR_XS_MTR_BLLG: DISC_AMT = 0
                                // but SVC_CONTR_BLLG_ALLOC has
                                // DISC_AMT
                                mtrDiscDealAmt = mtrDiscDealAmt.add(allocDealDiscUnitPrcAmt);
                                mtrDiscFuncAmt = mtrDiscFuncAmt.add(allocFuncDiscUnitPrcAmt);

                                // QC2973 start
                                // BigDecimal svcInvLineAllocPk =
                                // ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_ALLOC_SQ");
                                // QC2848 start
                                // String svcInvLineAllocNum =
                                // String.format(SVC_INV_LINE_ALLOC_NUM_FMT,
                                // j + 1);
                                // int num = 0;
                                // if
                                // (svcContrBllgPkMap.containsKey(svcContrBllgPk.toString()))
                                // {
                                // num =
                                // Integer.parseInt(svcContrBllgPkMap.get(svcContrBllgPk.toString()))
                                // + j + 1;
                                // } else {
                                // num = j + 1;
                                // }
                                // String svcInvLineAllocNum =
                                // String.format(SVC_INV_LINE_ALLOC_NUM_FMT,
                                // num);
                                // QC2848 end
                                String svcInvLineAllocNum = String.format(SVC_INV_LINE_ALLOC_NUM_FMT, j + 1);
                                // QC2973 end

                                SVC_INV_LINE_ALLOCTMsg svcInvLineAllocTMsg = new SVC_INV_LINE_ALLOCTMsg();
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.glblCmpyCd, glblCmpyCd);
                                // QC2973 start
                                // ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineAllocPk,
                                // svcInvLineAllocPk);
                                // QC2973 end
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLinePk, svcInvLinePk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvNum, svcInvNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineNum, svcInvLineNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineAllocNum, svcInvLineAllocNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.contrPrcAllocTpCd, svcContrBllgAllocTMsg.contrPrcAllocTpCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.intgMdseCd, svcContrBllgAllocTMsg.intgMdseCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.tocCd, svcContrBllgAllocTMsg.tocCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.slsAllocRate, svcContrBllgAllocTMsg.slsAllocRate);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealGrsTotPrcAmt, allocDealGrsTotPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcGrsTotPrcAmt, allocFuncGrsTotPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealNetUnitPrcAmt, allocDealNetUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcNetUnitPrcAmt, allocFuncNetUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealGrsUnitPrcAmt, allocDealGrsUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcGrsUnitPrcAmt, allocFuncGrsUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineDealNetAmt, allocInvLineDealNetAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineFuncNetAmt, allocInvLineFuncNetAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineDealTaxAmt, BigDecimal.ZERO);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineFuncTaxAmt, BigDecimal.ZERO);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealDiscUnitPrcAmt, allocDealDiscUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcDiscUnitPrcAmt, allocFuncDiscUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaCmpyCd, svcContrBllgAllocTMsg.coaCmpyCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaAfflCd, svcContrBllgAllocTMsg.coaAfflCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaBrCd, svcContrBllgAllocTMsg.coaBrCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaChCd, svcContrBllgAllocTMsg.coaChCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaCcCd, svcContrBllgAllocTMsg.coaCcCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaAcctCd, svcContrBllgAllocTMsg.coaAcctCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaProdCd, svcContrBllgAllocTMsg.coaProdCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaProjCd, svcContrBllgAllocTMsg.coaProjCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaExtnCd, svcContrBllgAllocTMsg.coaExtnCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.ccyCd, svcContrBllgAllocTMsg.ccyCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrBllgAllocPk, svcContrBllgAllocTMsg.svcContrBllgAllocPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrBaseBllgPk, svcContrBllgAllocTMsg.svcContrBaseBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrMtrBllgPk, svcContrBllgAllocTMsg.svcContrMtrBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrAddlChrgBllgPk, svcContrBllgAllocTMsg.svcContrAddlChrgBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.trxCd, svcContrBllgAllocTMsg.trxCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.trxRsnCd, svcContrBllgAllocTMsg.trxRsnCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dfrdAcctgRuleCd, svcContrBllgAllocTMsg.dfrdAcctgRuleCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dfrdAcctgRuleDurnAot, svcContrBllgAllocTMsg.dfrdAcctgRuleDurnAot);
                                // Add Start 2016/11/10 <QC#15789>
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.ajeInvLineAllocCd, ajeInvLineAllocCd);
                                // Add End   2016/11/10 <QC#15789>
                                // START 2016/06/20 T.Aoyagi [QC#9907, ADD]
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineSplTpCd, this.invLineSplTpMap.get(svcContrBllgAllocTMsg.svcContrBllgAllocPk.getValue()));
                                // END 2016/06/20 T.Aoyagi [QC#9907, ADD]

                                svcInvLineAllocTMsgList.add(svcInvLineAllocTMsg);
                            }

                            BigDecimal mtrSlsDealAmt = mtrNetDealAmt.add(mtrDiscDealAmt);
                            BigDecimal mtrSlsFuncAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, mtrSlsDealAmt, funcCcyAftDeclPntDigitNum);

                            invTotDealSlsAmt = invTotDealSlsAmt.add(mtrSlsDealAmt);
                            invTotFuncSlsAmt = invTotFuncSlsAmt.add(mtrSlsFuncAmt);
                            invTotDealTaxAmt = invTotDealTaxAmt.add(mtrTaxDealAmt);
                            invTotFuncTaxAmt = invTotFuncTaxAmt.add(mtrTaxFuncAmt);
                            invTotDealDiscAmt = invTotDealDiscAmt.add(mtrDiscDealAmt);
                            invTotFuncDiscAmt = invTotFuncDiscAmt.add(mtrDiscFuncAmt);
                            invTotDealNetAmt = invTotDealNetAmt.add(mtrNetDealAmt);
                            invTotFuncNetAmt = invTotFuncNetAmt.add(mtrNetFuncAmt);

                            // ----------------------------------------------------------------------
                            // Adjusting SVC_INV_LINE_ALLOC Fractions
                            // ----------------------------------------------------------------------
                            adjSvcInvLineAllocFrac(svcInvLineAllocTMsgList, mtrSlsDealAmt, mtrSlsFuncAmt, mtrDiscDealAmt, mtrDiscFuncAmt, mtrNetDealAmt, mtrNetFuncAmt, mtrTaxDealAmt, mtrTaxFuncAmt);

                            // ----------------------------------------------------------------------
                            // Create SVC_INV_LINE_ALLOC
                            // ----------------------------------------------------------------------
                            // QC2973 start
                            // if
                            // (ZYPConstant.FLG_ON_Y.equals(fleetLineFlg)
                            // ||
                            // ZYPConstant.FLG_ON_Y.equals(splyLineFlg))
                            // {
                            // for (SVC_INV_LINE_ALLOCTMsg
                            // svcInvLineAllocTMsg :
                            // svcInvLineAllocTMsgList) {
                            // S21FastTBLAccessor.insert(svcInvLineAllocTMsg);
                            // if
                            // (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineAllocTMsg.getReturnCode()))
                            // {
                            // throw new S21AbendException(NSZM0398E,
                            // new String[] {"SVC_INV_LINE_ALLOC" });
                            // }
                            // }
                            // }
                            svcInvLineAllocTMsgListList.add(svcInvLineAllocTMsgList);
                            // QC2973 end

                            // ----------------------------------------------------------------------
                            // Create SVC_INV_LINE
                            // ----------------------------------------------------------------------
                            String custCd;
                            if (ZYPConstant.FLG_ON_Y.equals(fleetLineFlg)) {
                                //Mod Start 07/05/2016 <QC#9438>
//                                custCd = sellToCustTMsg.sellToCustCd.getValue();
                                // START 2018/02/02 K.Kojima [QC#22242,MOD]
                                // custCd = getFleetDefaultShipToCustCd(dsContrDtlInfo);
                                custCd = getFleetShipToCustCd(dsContrDtlInfoList);
                                // END 2018/02/02 K.Kojima [QC#22242,MOD]
                                if (custCd == null) {
                                    Key key = new Key();
                                    key.add("DS_CONTR_PK", dsContrPk);
                                    key.add("DS_CONTR_DTL_TP_CD", dsContrDtlTpTMsg.dsContrDtlTpCd.getValue());
                                    key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                                    key.add("INV_DT", invDt);
                                    key.add("SELL_TO_CUST_CD", sellToCustTMsg.sellToCustCd.getValue());
                                    key.add("SVC_INV_CHRG_TP_CD", svcInvChrgTpCd);
                                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                                    // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "Default Ship To", key.toString());
                                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1093E, key.toString());
                                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                                    rollback();
                                    // mod start 2017/01/19 CSA QC#16645
                                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                                    // dsContrPkList.add(dsContrPk);
                                    dsContrSkipKeyList.add(dsContrSkipKey);
                                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                                    // mod end 2017/01/19 CSA QC#16645
                                    continue SVC_INV;
                                }
                                //Mod End   07/05/2016 <QC#9438>
                            } else {
                                custCd = shipToCustTMsg.shipToCustCd.getValue();
                            }

                            SVC_INV_LINETMsg svcInvLineTMsg = getSvcInvLineTMsg(custCd, svcInvNum, svcInvLinePk, svcInvLineNum, svcInvChrgTpCd, mdlNm,
                                    mtrTaxRate, mtrSlsDealAmt, mtrSlsFuncAmt, mtrDiscDealAmt, mtrDiscFuncAmt, mtrNetDealAmt, mtrNetFuncAmt, mtrTaxDealAmt, mtrTaxFuncAmt, taxCalcGeoCd,
                                    dsContrDtlInfo, dsContrTMsg, svcContrBllgTMsg, null, svcContrMtrBllgTMsg);
                            // QC2415 end

                            // START 2019/03/11 [QC#30675, ADD]
                            if (svcInvLineTMsg == null) {
                                Key key = new Key();
                                key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                key.add("SVC_MACH_MSTR_PK", svcContrBllgTMsg.svcMachMstrPk.getValue());
                                addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE.SLS_REP_TOC_CD", key.toString());
                                rollback();
                                continue SVC_INV;
                            }
                            // END 2019/03/11 [QC#30675, ADD]
                            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrPk, svcContrBllgTMsg.dsContrPk);
                            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrDtlPk, svcContrBllgTMsg.dsContrDtlPk);
                            svcInvLineTMsg.svcContrBaseBllgPk.clear();

                            // add start 2018/08/09 QC#27329-3
                            if (INV_TP.CREDIT_MEMO.equals(svcContrBllgTMsg.invTpCd.getValue()) && hasValue(svcContrBllgTMsg.origSvcInvNum)) {
                                setOrigSvcInvLineInfo(svcInvLineTMsg, svcContrBllgTMsg.origSvcInvNum.getValue(), svcContrBllgTMsg.dsContrBllgSchdPk.getValue());
                            }
                            // add end 2018/08/09 QC#27329-3

//                            // QC2848 start
                            S21FastTBLAccessor.insert(svcInvLineTMsg);
                            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineTMsg.getReturnCode())) {
                                throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE" });
                            }
//                            if (svcContrBllgPkMap.containsKey(svcContrBllgPk.toString())) {
//                                int count = Integer.parseInt(svcContrBllgPkMap.get(svcContrBllgPk.toString())) + svcContrBllgAllogTMsgArray.length();
//                                svcContrBllgPkMap.put(svcContrBllgPk.toString(), String.valueOf(count));
//                                SVC_INV_LINETMsg updateSvcInvLineTMsg = (SVC_INV_LINETMsg) svcInvLineTMsgMap.get(svcContrBllgPk.toString());
//                                updateSvcInvLineTMsg(updateSvcInvLineTMsg, svcInvLineTMsg);
//                            } else {
//                                svcContrBllgPkMap.put(svcContrBllgPk.toString(), String.valueOf(svcContrBllgAllogTMsgArray.length()));
//                                svcInvLineTMsgMap.put(svcContrBllgPk.toString(), svcInvLineTMsg);
//                            }
//                            // QC2848 end

                            // START 2018/05/31 K.Kojima [QC#23685,DEL]
                            // // SVC_INV_LINE_TAX_DTL
                            // createSvcInvLineTaxDtl(svcInvLinePk, (String) dsContrDtlInfo.get("CCY_CD"), taxApiPMsg);
                            // END 2018/05/31 K.Kojima [QC#23685,DEL]

                            lineNum++;

                            // ----------------------------------------------------------------------
                            // Additional Charge
                            // ----------------------------------------------------------------------
                            List<Map<String, BigDecimal>> addlChrgBllgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                            for (Map<String, BigDecimal> addlChrgBllgInfo : addlChrgBllgInfoList) {

                                BigDecimal addlSvcContrBllgPk = addlChrgBllgInfo.get("SVC_CONTR_BLLG_PK");
                                SVC_CONTR_BLLGTMsg addlSvcContrBllgTMsg = getSvcContrBllg(addlSvcContrBllgPk);
                                BigDecimal addlChrgBllgPk = addlChrgBllgInfo.get("SVC_CONTR_ADDL_CHRG_BLLG_PK");
                                SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg = getSvcContrAddlChrgBllgTMsg(addlChrgBllgPk);
                                String addlSvcInvLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);
                                // tax API
                                BigDecimal taxDealAmt = BigDecimal.ZERO;
                                BigDecimal taxFuncAmt = BigDecimal.ZERO;
                                // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                // // Mod Start 08/31/2016 <QC#13529>
                                // NWZC036101PMsg addlTaxApiPMsg = null;
                                // // Mod Start 2018/01/26 QC#23419
                                // // if (FLG_ON_Y.equals(dsInvTpTMsg.taxCalcFlg.getValue())) {
                                // if (FLG_ON_Y.equals(usgDsInvTpTMsg.taxCalcFlg.getValue())) {
                                // // Mod End 2018/01/26 QC#23419
                                //     // Mod Start 04/04/2016 <QC#6492>
                                //     // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
                                //     // addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue());
                                //     // START 2017/09/27 K.Yamada [QC#21233, MOD]
                                //     // addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue(), svcInvNum);
                                //     addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue(), svcInvNum, invDt);
                                //     // END 2017/09/27 K.Yamada [QC#21233, MOD]
                                //     // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
                                //     // Mod End 04/04/2016 <QC#6492>
                                //     if (S21ApiUtil.isXxMsgId(addlTaxApiPMsg)) {
                                //         Key key = new Key();
                                //         key.add("DS_CONTR_PK", dsContrPk);
                                //         key.add("DS_CONTR_TP_CD", dsContrTMsg.dsContrTpCd.getValue());
                                // 
                                //         key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                                //         // START 2016/12/13 N.Arai [QC#16400, MOD]
                                //         //key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                                //         key.add("SVC_CONTR_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrBllgPk.getValue());
                                //         // END 2016/12/13 N.Arai [QC#16400, MOD]
                                //         key.add("SVC_INV_NUM", svcInvNum);
                                //         key.add("INV_DT", invDt);
                                //         key.add("SELL_TO_CUST_CD", sellToCustTMsg.sellToCustCd.getValue());
                                //         key.add("SHIP_TO_CUST_CD", custCd);
                                //         // Mod Start 04/04/2016 <QC#6492>
                                //         // key.add("CTY_ADDR", shipToCustTMsg.ctyAddr.getValue());
                                //         // key.add("ST_CD", shipToCustTMsg.stCd.getValue());
                                //         // key.add("POST_CD", shipToCustTMsg.postCd.getValue());
                                //         if (ZYPConstant.FLG_ON_Y.equals(fleetLineFlg)) {
                                //             key.add("CTY_ADDR", sellToCustTMsg.ctyAddr.getValue());
                                //             key.add("ST_CD", sellToCustTMsg.stCd.getValue());
                                //             key.add("POST_CD", sellToCustTMsg.postCd.getValue());
                                //         } else {
                                //             key.add("CTY_ADDR", shipToCustTMsg.ctyAddr.getValue());
                                //             key.add("ST_CD", shipToCustTMsg.stCd.getValue());
                                //             key.add("POST_CD", shipToCustTMsg.postCd.getValue());
                                //         }
                                //         // Mod End 04/04/2016 <QC#6492>
                                //         key.add("SVC_INV_CHRG_TP_CD", svcInvChrgTpCd);
                                //         key.add("FUNC_AMT", svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue());
                                // 
                                //         List<String> msgIdList = S21ApiUtil.getXxMsgIdList(addlTaxApiPMsg);
                                //         for (String msgId : msgIdList) {
                                //             addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0407E, "NWZC036101", S21MessageFunc.clspGetMessage(msgId), key.toString());
                                //         }
                                //         rollback();
                                //         // mod start 2017/01/19 CSA QC#16645
                                //         // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                                //         // dsContrPkList.add(dsContrPk);
                                //         dsContrSkipKeyList.add(dsContrSkipKey);
                                //         // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                                //         // mod end 2017/01/19 CSA QC#16645
                                //         continue SVC_INV;
                                //     }
                                //     taxFuncAmt = getTaxFuncAmt(addlTaxApiPMsg).setScale(funcCcyAftDeclPntDigitNum.intValueExact(), RoundingMode.HALF_UP);
                                //     taxDealAmt = exchToDealAmt(actlExchRate, dealCcyAcctArthTpCd, taxFuncAmt, dealCcyAftDeclPntDigitNum);
                                // }
                                // // Mod End   08/31/2016 <QC#13529>
                                // END 2018/05/31 K.Kojima [QC#23685,DEL]

                                // Create SVC_INV_LINE
                                //Mod Start 05/25/2016 <QC#7636>
                                // START 2017/11/17 K.Kojima [QC#21918,MOD]
                                // SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, addlTaxApiPMsg, taxDealAmt, taxFuncAmt, custCd);
                                // START 2018/05/31 K.Kojima [QC#23685,MOD]
                                // SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, addlTaxApiPMsg, taxDealAmt, taxFuncAmt, custCd, dsContrTMsg);
                                SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, taxDealAmt, taxFuncAmt, custCd, dsContrTMsg);
                                // END 2018/05/31 K.Kojima [QC#23685,MOD]
                                // END 2017/11/17 K.Kojima [QC#21918,MOD]
                                //Mod End   05/25/2016 <QC#7636>
                                // START 2019/03/11 [QC#30675, ADD]
                                if (addlSvcInvLineTMsg == null) {
                                    Key key = new Key();
                                    key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                    key.add("SVC_CONTR_ADDL_CHRG_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue());
                                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE.SLS_REP_TOC_CD", key.toString());
                                    rollback();
                                    continue SVC_INV;
                                }
                                // END 2019/03/11 [QC#30675, ADD]

                                // Add Start 08/08/2016 <QC#8293>
                                invTotDealSlsAmt = invTotDealSlsAmt.add(addlSvcInvLineTMsg.invLineDealSlsAmt.getValue());
                                invTotFuncSlsAmt = invTotFuncSlsAmt.add(addlSvcInvLineTMsg.invLineFuncSlsAmt.getValue());
                                invTotDealTaxAmt = invTotDealTaxAmt.add(addlSvcInvLineTMsg.invLineDealTaxAmt.getValue());
                                invTotFuncTaxAmt = invTotFuncTaxAmt.add(addlSvcInvLineTMsg.invLineFuncTaxAmt.getValue());
                                invTotDealDiscAmt = invTotDealDiscAmt.add(addlSvcInvLineTMsg.invLineDealDiscAmt.getValue());
                                invTotFuncDiscAmt = invTotFuncDiscAmt.add(addlSvcInvLineTMsg.invLineFuncDiscAmt.getValue());
                                invTotDealNetAmt = invTotDealNetAmt.add(addlSvcInvLineTMsg.invLineDealNetAmt.getValue());
                                invTotFuncNetAmt = invTotFuncNetAmt.add(addlSvcInvLineTMsg.invLineFuncNetAmt.getValue());
                                // Add End   08/08/2016 <QC#8293>
                                // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                // createSvcInvLineTaxDtl(addlSvcInvLineTMsg.svcInvLinePk.getValue(), (String) dsContrDtlInfo.get("CCY_CD"), addlTaxApiPMsg);
                                // END 2018/05/31 K.Kojima [QC#23685,DEL]

                                // Add Start 2016/11/10 <QC#15789>
                                String ajeInvLineAllocCdForAddl = getAjeInvLineAllocCdForAddl(hasDsContrProcAllocForAddl, SVC_INV_CHRG_TP.METER_CHARGE, svcContrAddlChrgBllgTMsg);
                                // Add End   2016/11/10 <QC#15789>
                                List<BigDecimal> addlAllocPkList = getSvcContrBllgAllocPkForAddl(addlChrgBllgPk);
                                for (int j = 0; j < addlAllocPkList.size(); j++) {
                                    SVC_CONTR_BLLG_ALLOCTMsg svcContrBllgAllocTMsg = getSvcContrBllgAllocTMsg(addlAllocPkList.get(j));

                                    // Mod Start 2016/11/10 <QC#15789>
                                    // Create SVC_INV_LINE_ALLOC
                                    // START 2017/11/29 K.Kojima [QC#21918,MOD]
                                    // createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl);
                                    // START 2019/03/11 [QC#30675, MOD]
                                    // createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl, svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue(), dsContrTMsg.dsContrCatgCd.getValue());
                                    SVC_INV_LINE_ALLOCTMsg addlSvcInvLineAllocTMsg = createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl, svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue(), dsContrTMsg.dsContrCatgCd.getValue());
                                    if (addlSvcInvLineAllocTMsg == null) {
                                        Key key = new Key();
                                        key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                        key.add("SVC_CONTR_ADDL_CHRG_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue());
                                        addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE_ALLOC.TOC_CD", key.toString());
                                        rollback();
                                        continue SVC_INV;
                                    }
                                    // END 2019/03/11 [QC#30675, MOD]
                                    // END 2017/11/29 K.Kojima [QC#21918,MOD]
                                    // Mod End   2016/11/10 <QC#15789>
                                }
                                // Create SVC_INV_LINE_ADDL_CHRG
                                BigDecimal addlSvcInvLinePk = addlSvcInvLineTMsg.svcInvLinePk.getValue();
                                createSvcInvLineAddlChrg(addlSvcInvLinePk, svcContrBllgPk, svcContrAddlChrgBllgTMsg);

                                lineNum++;
                            }
                        }
                        // QC2973 start
                        List<SVC_INV_LINE_ALLOCTMsg> svcInvLineAllocTMsgList = mergeSvcInvLineAllocTMsg(svcInvLineAllocTMsgListList);
                        for (SVC_INV_LINE_ALLOCTMsg svcInvLineAllocTMsg : svcInvLineAllocTMsgList) {
                            S21FastTBLAccessor.insert(svcInvLineAllocTMsg);
                            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineAllocTMsg.getReturnCode())) {
                                throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE_ALLOC" });
                            }
                        }
                        // QC2973 end

//                        // QC2848 start
//                        Iterator<SVC_INV_LINETMsg> ite = svcInvLineTMsgMap.values().iterator();
//                        while (ite.hasNext()) {
//                            SVC_INV_LINETMsg svcInvLineTMsg = ite.next();
//                            S21FastTBLAccessor.insert(svcInvLineTMsg);
//                            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineTMsg.getReturnCode())) {
//                                throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE" });
//                            }
//                        }
//                        // QC2848 end

                        // QC2536 start
                    }
                    // QC2536 end
                    listIdx++;
                }

                // ----------------------------------------------------------------------
                // SVC_INV
                // ----------------------------------------------------------------------
                // Del Start 2018/01/24 QC#23684 Temporarily Fixed
//              BigDecimal svcInvPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_SQ");
                // Del End 2018/01/24 QC#23684 Temporarily Fixed

                // 2(15) Create SVC_INV
                SVC_INVTMsg svcInvTMsg = new SVC_INVTMsg();
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.glblCmpyCd, glblCmpyCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvPk, svcInvPk);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvNum, svcInvNum);
                svcInvTMsg.svcSmryInvNum.clear();
                svcInvTMsg.fsrNum.clear();
                svcInvTMsg.fsrVisitNum.clear();
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invDt, invDt);

                // 2(13) INV_TP
//                String invTpCd;
//                if (invTotDealNetAmt.compareTo(BigDecimal.ZERO) < 0) {
//                    invTpCd = INV_TP.CREDIT_MEMO;
//                } else {
//                    invTpCd = INV_TP.INVOICE;
//                }
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTpCd, mainSvcContrBllgTMsg.invTpCd);

                ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvStsCd, SVC_INV_STS.PRINTED);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvSrcTpCd, SVC_INV_SRC_TP.CONTRACT);
                svcInvTMsg.bllgPerFromDt.clear();
                svcInvTMsg.bllgPerToDt.clear();
                svcInvTMsg.sellToCustCd.clear();
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCustCd, mainSvcContrBllgTMsg.billToCustCd);
                if (mainShipToCustTMsg != null) {
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.shipToCustCd, mainShipToCustTMsg.shipToCustCd);
                }
                // Fleet
                // START 2016/10/04 T.Kanasaka [QC#9905, DEL]
//                svcInvTMsg.shipToCustCd.clear();
                // END 2016/10/04 T.Kanasaka [QC#9905, DEL]
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.dealCcyCd, dsContrTMsg.ccyCd);
                svcInvTMsg.mdseCd.clear();
                svcInvTMsg.svcMachMstrPk.clear();
                svcInvTMsg.mdseNm.clear();
                svcInvTMsg.mdlId.clear();
                svcInvTMsg.mdlNm.clear();
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ccyExchRate, acctDlyActlExchRatesTMsg.actlExchRate);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotDealSlsAmt, invTotDealSlsAmt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotFuncSlsAmt, invTotFuncSlsAmt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotDealTaxAmt, invTotDealTaxAmt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotFuncTaxAmt, invTotFuncTaxAmt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotDealDiscAmt, invTotDealDiscAmt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotFuncDiscAmt, invTotFuncDiscAmt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotDealNetAmt, invTotDealNetAmt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotFuncNetAmt, invTotFuncNetAmt);
                svcInvTMsg.techCd.clear();
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsContrPk, dsContrPk);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsContrNum, dsContrTMsg.dsContrNum);
                svcInvTMsg.dsContrDtlPk.clear();
                svcInvTMsg.serNum.clear();
                // add start 2016/07/27 T.Aoyagi QC#10390
                if (hasValue(mainSvcContrBllgTMsg.svcCrRebilPk)) {
                    setPmtTermInfo(svcInvTMsg, mainSvcContrBllgTMsg);
                } else {
                // add end 2016/07/27 T.Aoyagi QC#10390
                    // mod start 2019/05/10 K.Fujimoto QC#50296
                    // ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermCashDiscCd, dsContrTMsg.pmtTermCashDiscCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermCashDiscCd, pmtTermCashDiscTMsg.pmtTermCashDiscCd);
                    // mod end 2019/05/10 K.Fujimoto QC#50296
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermCd, pmtTermTMsg.pmtTermCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermCashDiscDescTxt, pmtTermCashDiscTMsg.pmtTermCashDiscDescTxt);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermStartDt, pmtTermStartDt);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invDueDt, invDueDt);
                // add start 2016/07/27 T.Aoyagi QC#10390
                }
                // add end 2016/07/27 T.Aoyagi QC#10390
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.remToLocNm, remToTMsg.locNm);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.remToAddlLocNm, remToTMsg.addlLocNm);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.remId, remToTMsg.remId);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcNm, glblCmpyTMsg.glblCmpyNm);
                //Del Start 02/04/2016 <QC#3947>
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcBrCd, brTMsg.brCd);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcFirstLineAddr, brTMsg.firstLineAddr);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcScdLineAddr, brTMsg.scdLineAddr);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcThirdLineAddr, brTMsg.thirdLineAddr);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcFrthLineAddr, brTMsg.frthLineAddr);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcCtyAddr, brTMsg.ctyAddr);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcStCd, brTMsg.stCd);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcProvNm, brTMsg.provNm);
//                if (ofcCntyTMsg == null) {
//                    svcInvTMsg.ofcCntyNm.clear();
//                } else {
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcCntyNm, ofcCntyTMsg.cntyNm);
//                }
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcPostCd, brTMsg.postCd);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcCtryCd, brTMsg.ctryCd);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcTelNum, brTMsg.telNum);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcFaxNum, brTMsg.faxNum);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcLocNm, brTMsg.locNm);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcAddlLocNm, brTMsg.addlLocNm);
                //Del End   02/04/2016 <QC#3947>
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToLocNm, sellToCustTMsg.locNm);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToAddlLocNm, sellToCustTMsg.addlLocNm);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToFirstLineAddr, sellToCustTMsg.firstLineAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToScdLineAddr, sellToCustTMsg.scdLineAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToThirdLineAddr, sellToCustTMsg.thirdLineAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToFrthLineAddr, sellToCustTMsg.frthLineAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToCtyAddr, sellToCustTMsg.ctyAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToProvNm, sellToCustTMsg.provNm);
                if (sellToCntyTMsg == null) {
                    svcInvTMsg.sellToCntyNm.clear();
                } else {
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToCntyNm, sellToCntyTMsg.cntyNm);
                }
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToStCd, sellToCustTMsg.stCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToPostCd, sellToCustTMsg.postCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToCtryCd, sellToCustTMsg.ctryCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToFirstRefCmntTxt, sellToCustTMsg.firstRefCmntTxt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToScdRefCmntTxt, sellToCustTMsg.scdRefCmntTxt);

                SVC_CR_REBIL_DTLTMsg svcCrRebilDtlTMsg = getSvcCrRebilDtlTMsg(mainSvcContrBllgTMsg.svcCrRebilDtlPk.getValue());
                String invPrintStsCd = ZYPConstant.FLG_ON_1;
                if (svcCrRebilDtlTMsg != null) {
                    if (ZYPConstant.FLG_OFF_N.equals(svcCrRebilDtlTMsg.invPrintFlg)) {
                        invPrintStsCd = PROCESSED_2;
                    }
                }
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invPrintStsCd, invPrintStsCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invMlSendStsCd, PROCESSED_2);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invEdiSendStsCd, PROCESSED_2);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invFaxSendStsCd, PROCESSED_2);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invEmlSendStsCd, PROCESSED_2);

                ZYPEZDItemValueSetter.setValue(svcInvTMsg.origSvcInvNum, mainSvcContrBllgTMsg.origSvcInvNum);
                svcInvTMsg.svcInvRefNum.clear();
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvOmLinkFlg, ZYPConstant.FLG_OFF_N);
                // Mod Start 2019/01/25 QC#29689
                // Mod Start 2019/01/21 QC#26928
                Map<String, Object> crCardPoInfo = getDsContrCrCardPo(mainSvcContrBllgTMsg.dsContrPk.getValue()
                        , mainSvcContrBllgTMsg.dsContrDtlPk.getValue()
                // START 2016/10/18 T.Kanasaka [QC#13009, MOD]
//                        , mainSvcContrBllgTMsg.dsContrBllgMtrPk.getValue());
                        , mainSvcContrBllgTMsg.dsContrBllgMtrPk.getValue()
                        , dsContrTMsg.pmtTermCashDiscCd.getValue()
                        , mainSvcContrBllgTMsg.svcContrBllgThruDt.getValue()
                // START 2023/08/30 [QC#61805,ADD]
                        , mainSvcContrBllgTMsg.svcContrBllgFromDt.getValue()
                // END 2023/08/30 [QC#61805,ADD]
                        , null);
                // END 2016/10/18 T.Kanasaka [QC#13009, MOD]
                // Mod End 2019/01/21 QC#26928
                // Mod End 2019/01/25 QC#29689
                if (crCardPoInfo != null) {
                    // START 2016/06/15 T.Kanasaka [QC#9869, MOD]
//                    if (dsContrTMsg.custPoNum.getValue().equals((String) crCardPoInfo.get("CUST_PO_NUM"))) {
//                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.custIssPoNum, dsContrTMsg.custPoNum);
//                    }
//                    if (dsContrTMsg.poDt.getValue().equals((String) crCardPoInfo.get("PO_DT"))) {
//                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.custIssPoDt, dsContrTMsg.poDt);
//                    }
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.custIssPoNum, (String) crCardPoInfo.get("CUST_PO_NUM"));
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.custIssPoDt, (String) crCardPoInfo.get("PO_DT"));
                    // END 2016/06/15 T.Kanasaka [QC#9869, MOD]
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.crCardCustRefNum, (String) crCardPoInfo.get("CR_CARD_CUST_REF_NUM"));
                }

                ZYPEZDItemValueSetter.setValue(svcInvTMsg.manCratInvFlg, ZYPConstant.FLG_OFF_N);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.slsSmryCratCpltFlg, ZYPConstant.FLG_OFF_N);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsContrCatgCd, dsContrTMsg.dsContrCatgCd);

                ZYPEZDItemValueSetter.setValue(svcInvTMsg.lineBizTpCd, dsContrTMsg.svcLineBizCd);
                // Mod Start 08/31/2016 <QC#13529>
//                DS_CONTR_CLSTMsg dsContrClsTMsg = getDsContrClsTMsg(dsContrTMsg.dsContrClsCd.getValue());
//                if (dsContrClsTMsg != null) {
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsInvTpCd, dsContrClsTMsg.dsInvTpCd);
//                }
                // Mod Start 2018/01/26 QC#23419
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsInvTpCd, dsContrClsTMsg.dsInvTpCd);
                if (!dsInvTpTMsg.dsInvTpCd.getValue().equals(baseDsInvTpTMsg.dsInvTpCd.getValue())) {
                    dsInvTpTMsg = baseDsInvTpTMsg;
                } else if (!dsInvTpTMsg.dsInvTpCd.getValue().equals(usgDsInvTpTMsg.dsInvTpCd.getValue())) {
                    dsInvTpTMsg = usgDsInvTpTMsg;
                }
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsInvTpCd, dsInvTpTMsg.dsInvTpCd);
                // Mod End 2018/01/26 QC#23419
                // Mod End   08/31/2016 <QC#13529>
                Map<String, Object> billToCust = getBillToCust(sellToCustTMsg.sellToCustCd.getValue());
                if (billToCust != null) {
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCustAcctCd, (String) billToCust.get("SELL_TO_CUST_CD"));
                }

                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ctacPsnPk, (BigDecimal) dsContrDtlInfoList.get(0).get("CTAC_PSN_PK"));
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsAcctNum, dsContrTMsg.dsAcctNum);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcCrRebilPk, mainSvcContrBllgTMsg.svcCrRebilPk);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcCrRebilDtlPk, mainSvcContrBllgTMsg.svcCrRebilDtlPk);
                SVC_CR_REBILTMsg svcCrRebilTMsg = getSvcCrRebilTMsg(mainSvcContrBllgTMsg.svcCrRebilPk.getValue());
                if (svcCrRebilTMsg != null) {
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.custCareTktNum, svcCrRebilTMsg.custIncdtId);
                }
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToLocNm, billToCustTMsg.locNm);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToAddlLocNm, billToCustTMsg.addlLocNm);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToFirstLineAddr, billToCustTMsg.firstLineAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToScdLineAddr, billToCustTMsg.scdLineAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToThirdLineAddr, billToCustTMsg.thirdLineAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToFrthLineAddr, billToCustTMsg.frthLineAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCtyAddr, billToCustTMsg.ctyAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToProvNm, billToCustTMsg.provNm);
                if (billToCntyTMsg != null) {
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCntyNm, billToCntyTMsg.cntyNm);
                }
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToStCd, billToCustTMsg.stCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToPostCd, billToCustTMsg.postCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCtryCd, billToCustTMsg.ctryCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToFirstRefCmntTxt, billToCustTMsg.firstRefCmntTxt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToScdRefCmntTxt, billToCustTMsg.firstRefCmntTxt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.slsRepTocCd, dsContrTMsg.tocCd);
                if (mainShipToCustTMsg != null) {
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.shipToCustAcctCd, mainShipToCustTMsg.sellToCustCd);
                }
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvOmLinkStsCd, "0");
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.prcAllocByMachQtyFlg, dsContrTMsg.prcAllocByMachQtyFlg);

                // START 05/10/2016 O.Okuma [QC#8107, ADD]
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.cfsLinkStsCd, CFS_LINK_STS.IN_COMPLETED);
                // END 05/10/2016 O.Okuma [QC#8107, ADD]

                // START 2018/05/31 K.Kojima [QC#23865,ADD]
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.tempSvcInvNumFlg, ZYPConstant.FLG_ON_Y);
                // END 2018/05/31 K.Kojima [QC#23865,ADD]

                // add start 2018/08/09 QC#27329-3
                if (INV_TP.CREDIT_MEMO.equals(mainSvcContrBllgTMsg.invTpCd.getValue()) && hasValue(mainSvcContrBllgTMsg.origSvcInvNum)) {
                    setOrigSvcInvInfo(svcInvTMsg, mainSvcContrBllgTMsg.origSvcInvNum.getValue());
                }
                // add end 2018/08/09 QC#27329-3

                S21FastTBLAccessor.insert(svcInvTMsg);
                if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvTMsg.getReturnCode())) {
                    throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV" });
                }

                for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
                    // START 2017/09/05 M.Kidokoro [QC#20079, ADD]
                    // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // if (isMtrHldForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) {
                    if (isUnbllblForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                        continue;
                    }
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // if (isMtrHldForSeparate(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) {
                    //     if (ZYPConstant.FLG_ON_Y.equals((String) dsContrDtlInfo.get("USG_CHRG_FLG"))) {
                    //         continue;
                    //     }
                    // }
                    if (isUnbllblForSeparate(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                        continue;
                    }
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                    // END 2017/09/05 M.Kidokoro [QC#20079, ADD]

                    // 7(5) Update SVC_CONTR_BLLG
                    BigDecimal svcContrBllgPk = (BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK");
                    SVC_CONTR_BLLGTMsg svcContrBllgTMsg = getSvcContrBllg(svcContrBllgPk);
                    ZYPEZDItemValueSetter.setValue(svcContrBllgTMsg.bllgCpltStsCd, BLLG_CPLT_STS.COMPLETED);
                    S21FastTBLAccessor.update(svcContrBllgTMsg);
                    if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcContrBllgTMsg.getReturnCode())) {
                        Key key = new Key();
                        key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                        throw new S21AbendException(NSZM0399E, new String[] {"SVC_CONTR_BLLG", key.toString() });
                    }

                    // Additional Charge
                    List<Map<String, BigDecimal>> addlChrgBllgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                    for (Map<String, BigDecimal> addlChrgBllgInfo : addlChrgBllgInfoList) {

                        BigDecimal addlSvcContrBllgPk = addlChrgBllgInfo.get("SVC_CONTR_BLLG_PK");
                        SVC_CONTR_BLLGTMsg addlSvcContrBllgTMsg = getSvcContrBllg(addlSvcContrBllgPk);
                        ZYPEZDItemValueSetter.setValue(addlSvcContrBllgTMsg.bllgCpltStsCd, BLLG_CPLT_STS.COMPLETED);
                        S21FastTBLAccessor.update(addlSvcContrBllgTMsg);
                        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(addlSvcContrBllgTMsg.getReturnCode())) {
                            Key key = new Key();
                            key.add("SVC_CONTR_BLLG_PK", addlSvcContrBllgPk);
                            throw new S21AbendException(NSZM0399E, new String[] {"SVC_CONTR_BLLG", key.toString() });
                        }
                    }

                    // 7(6) Update DS_CONTR_DTL
                    boolean reProcFlg = ZYPConstant.FLG_ON_Y.equals(svcContrBllgTMsg.bllgReProcFlg.getValue());
                    baseBllgFlg = (String) dsContrDtlInfo.get("BASE_BLLG_FLG");
                    mtrBllgFlg = (String) dsContrDtlInfo.get("MTR_BLLG_FLG");

                    DS_CONTR_DTLTMsg dsContrDtlTMsg = getDsContrDtl(svcContrBllgTMsg.dsContrDtlPk.getValue());
                    DS_CONTR_DTL_TPTMsg dsContrDtlTpTMsg = getDsContrDtlTp(dsContrDtlTMsg.dsContrDtlTpCd.getValue());

                    if (!reProcFlg && ZYPConstant.FLG_ON_Y.equals(baseBllgFlg)) {
                        // QC2379 start
                        // ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.baseBllgLastBllgDt,
                        // svcContrBllgTMsg.baseBllgLastBllgDt);
                        if (ZYPCommonFunc.hasValue(dsContrDtlTMsg.baseBllgLastBllgDt)) {
                            if (ZYPDateUtil.compare(dsContrDtlTMsg.baseBllgLastBllgDt.getValue(), svcContrBllgTMsg.baseBllgNextBllgDt.getValue()) < 0) {
                                ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.baseBllgLastBllgDt, svcContrBllgTMsg.baseBllgNextBllgDt);
                            }
                        } else {
                            ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.baseBllgLastBllgDt, svcContrBllgTMsg.baseBllgNextBllgDt);
                        }

                        // QC2379 end
                        if (ZYPCommonFunc.hasValue(dsContrDtlTMsg.baseInvUpToDt)) {
                            if (ZYPDateUtil.compare(dsContrDtlTMsg.baseInvUpToDt.getValue(), svcContrBllgTMsg.baseBllgInvUpToDt.getValue()) < 0) {
                                ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.baseInvUpToDt, svcContrBllgTMsg.baseBllgInvUpToDt);
                            }
                        } else {
                            ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.baseInvUpToDt, svcContrBllgTMsg.baseBllgInvUpToDt);
                        }
                    }

                    if (!reProcFlg && ZYPConstant.FLG_ON_Y.equals(mtrBllgFlg)) {
                        // QC2379 start
                        // ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.mtrBllgLastBllgDt,
                        // svcContrBllgTMsg.mtrBllgLastBllgDt);
                        if (ZYPCommonFunc.hasValue(dsContrDtlTMsg.mtrBllgLastBllgDt)) {
                            if (ZYPDateUtil.compare(dsContrDtlTMsg.mtrBllgLastBllgDt.getValue(), svcContrBllgTMsg.mtrBllgNextBllgDt.getValue()) < 0) {
                                ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.mtrBllgLastBllgDt, svcContrBllgTMsg.mtrBllgNextBllgDt);
                            }
                        } else {
                            ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.mtrBllgLastBllgDt, svcContrBllgTMsg.mtrBllgNextBllgDt);
                        }

                        // QC2379 end
                        if (ZYPCommonFunc.hasValue(dsContrDtlTMsg.mtrInvUpToDt)) {
                            if (ZYPDateUtil.compare(dsContrDtlTMsg.mtrInvUpToDt.getValue(), svcContrBllgTMsg.mtrBllgInvUpToDt.getValue()) < 0) {
                                ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.mtrInvUpToDt, svcContrBllgTMsg.mtrBllgInvUpToDt);
                            }
                        } else {
                            ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.mtrInvUpToDt, svcContrBllgTMsg.mtrBllgInvUpToDt);
                        }
                    }

                    S21FastTBLAccessor.update(dsContrDtlTMsg);
                    if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(dsContrDtlTMsg.getReturnCode())) {
                        Key key = new Key();
                        key.add("DS_CONTR_DTL_PK", dsContrDtlTMsg.dsContrDtlPk.getValue());
                        throw new S21AbendException(NSZM0399E, new String[] {"DS_CONTR_DTL", key.toString() });
                    }

                    // Update SVC_PHYS_MTR_READ
                    if (!ZYPConstant.FLG_ON_Y.equals(dsContrDtlTpTMsg.fleetLineFlg.getValue())) {

                        SVC_CONTR_MTR_BLLGTMsgArray svcContrMtrBllgTMsgArray = getSvcContrMtrBllgList(svcContrBllgPk);
                        for (int i = 0; i < svcContrMtrBllgTMsgArray.length(); i++) {

                            SVC_CONTR_MTR_BLLGTMsg svcContrMtrBllgTMsg = svcContrMtrBllgTMsgArray.no(i);

//                            String maxInvMtrReadDt = getMaxInvMtrReadDt(svcContrBllgTMsg.dsContrDtlPk.getValue(), svcContrBllgTMsg.svcMachMstrPk.getValue(), svcContrMtrBllgTMsg.dsContrBllgMtrPk.getValue(),
//                                    svcContrMtrBllgTMsg.dsContrBllgMtrId.getValue(), svcContrBllgTMsg.bllgReProcFlg.getValue(), svcContrMtrBllgTMsg.mtrBllgThruDt.getValue());
//
//                            String mtrBllgFromDt = null;
//                            if (ZYPCommonFunc.hasValue(maxInvMtrReadDt)) {
//                                mtrBllgFromDt = ZYPDateUtil.addDays(maxInvMtrReadDt, 1);
//                            } else {
//                                mtrBllgFromDt = svcContrMtrBllgTMsg.mtrBllgFromDt.getValue();
//                            }

                            List<BigDecimal> svcPhysMtrReadPkList = getInvProcSvcPhysMtrRead(svcContrMtrBllgTMsg.dsContrBllgMtrPk.getValue(), svcContrMtrBllgTMsg.dsContrBllgMtrId.getValue(), svcContrBllgTMsg.svcMachMstrPk.getValue(),
                                    svcContrBllgTMsg.dsContrDtlPk.getValue(), svcContrMtrBllgTMsg.svcPhysMtrReadGrpSq.getValue());

                            for (BigDecimal svcPhysMtrReadPk : svcPhysMtrReadPkList) {
                                SVC_PHYS_MTR_READTMsg svcPhysMtrReadTMsg = getSvcPhysMtrRead(svcPhysMtrReadPk);
                                if (svcPhysMtrReadTMsg == null) {
                                    Key key = new Key();
                                    key.add("SVC_PHYS_MTR_READ_PK", svcPhysMtrReadPk);
                                    key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                                    // addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM0396E, "SVC_PHYS_MTR_READ", key.toString());
                                    addMessage(DS_CONTR_CATG.FLEET, svcInvKey, 1, NSZM1092E, key.toString());
                                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                                    rollback();
                                    // mod start 2017/01/19 CSA QC#16645
                                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                                    // dsContrPkList.add(dsContrPk);
                                    dsContrSkipKeyList.add(dsContrSkipKey);
                                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                                    // mod end 2017/01/19 CSA QC#16645
                                    continue SVC_INV;
                                } else {
                                    ZYPEZDItemValueSetter.setValue(svcPhysMtrReadTMsg.invProcFlg, ZYPConstant.FLG_ON_Y);
                                    ZYPEZDItemValueSetter.setValue(svcPhysMtrReadTMsg.svcInvNum, svcInvNum);
                                    ZYPEZDItemValueSetter.setValue(svcPhysMtrReadTMsg.invDt, invDt);
                                    S21FastTBLAccessor.update(svcPhysMtrReadTMsg);
                                    if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcPhysMtrReadTMsg.getReturnCode())) {
                                        Key key = new Key();
                                        key.add("SVC_PHYS_MTR_READ_PK", svcPhysMtrReadPk);
                                        throw new S21AbendException(NSZM0399E, new String[] {"SVC_PHYS_MTR_READ", key.toString() });
                                    }
                                }
                            }
                        }
                    }
                }

                for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
                    // START 2017/09/05 M.Kidokoro [QC#20079, ADD]
                    // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // if (isMtrHldForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) {
                    if (isUnbllblForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                        continue;
                    }
                    // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                    // END 2017/09/05 M.Kidokoro [QC#20079, ADD]

                    SVC_CONTR_BLLGTMsg svcContrBllgTMsg = getSvcContrBllg((BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK"));
                    BigDecimal svcContrBllgPk = svcContrBllgTMsg.svcContrBllgPk.getValue();

                    Map<String, Object> svcInvLineMap = getSvcInvLine(svcContrBllgTMsg.dsContrBllgSchdPk.getValue());

                    // Base Charge
                    if (ZYPConstant.FLG_ON_Y.equals(svcContrBllgTMsg.baseChrgFlg.getValue())) {

                        // START 2023/03/24 E.Sanchez [QC#61325, ADD]
                        if (isUnbllblForSeparate(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                            continue;
                        }
                        // END 2023/03/24 E.Sanchez [QC#61325, ADD]

                        // Update DS_CONTR_BLLG_SCHD
                        updateDsContrBllgSchd(svcContrBllgTMsg, svcInvTMsg, svcInvLineMap);

                        List<Map<String, BigDecimal>> addlChrgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                        for (Map<String, BigDecimal> addlChrgInfo : addlChrgInfoList) {
                            BigDecimal addlChrgPk = (BigDecimal) addlChrgInfo.get("SVC_CONTR_ADDL_CHRG_BLLG_PK");
                            SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg = getSvcContrAddlChrgBllgTMsg(addlChrgPk);
                            SVC_CONTR_BLLGTMsg addlSvcContrBllgTMsg = getSvcContrBllg(svcContrAddlChrgBllgTMsg.svcContrBllgPk.getValue());

                            // Update DS_CONTR_ADDL_CHRG
                            updateDsContrAddlChrg(addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg);
                        }
                    }

                    // Usage Charge
                    if (ZYPConstant.FLG_ON_Y.equals(svcContrBllgTMsg.usgChrgFlg.getValue())) {
                        // START 2017/09/05 M.Kidokoro [QC#20079, ADD]
                        // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                        // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                        // if (isMtrHldForSeparate(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) {
                        if (isUnbllblForSeparate(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                        // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                            continue;
                        }
                        // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                        // END 2017/09/05 M.Kidokoro [QC#20079, ADD]
                        updateDsContrBllgSchd(svcContrBllgTMsg, svcInvTMsg, svcInvLineMap);

                        SVC_CONTR_MTR_BLLGTMsgArray svcContrMtrBllgTMsgArray = getSvcContrMtrBllgList(svcContrBllgPk);
                        for (int i = 0; i < svcContrMtrBllgTMsgArray.getValidCount(); i++) {
                            SVC_CONTR_MTR_BLLGTMsg svcContrMtrBllgTMsg = svcContrMtrBllgTMsgArray.no(i);

                            // Update DS_CONTR_BLLG_SCHD
                            updateDsContrBllgMtr(svcContrBllgTMsg, svcContrMtrBllgTMsg);

                            List<Map<String, BigDecimal>> addlChrgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                            for (Map<String, BigDecimal> addlChrgInfo : addlChrgInfoList) {
                                BigDecimal addlChrgPk = (BigDecimal) addlChrgInfo.get("SVC_CONTR_ADDL_CHRG_BLLG_PK");
                                SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg = getSvcContrAddlChrgBllgTMsg(addlChrgPk);
                                SVC_CONTR_BLLGTMsg addlSvcContrBllgTMsg = getSvcContrBllg(svcContrAddlChrgBllgTMsg.svcContrBllgPk.getValue());

                                // Update DS_CONTR_ADDL_CHRG
                                updateDsContrAddlChrg(addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg);
                            }
                        }
                    }
                }

                archiveProcess(dsContrDtlInfoList);

                // START 04/11/2016 T.Aoyagi [QC#6510, ADD]
                if (!callCrRebilApi(DS_CONTR_CATG.FLEET, svcInvKey, svcInvTMsg)) {
                    rollback();
                    // mod start 2017/01/19 CSA QC#16645
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // dsContrPkList.add(dsContrPk);
                    dsContrSkipKeyList.add(dsContrSkipKey);
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }
                // END 04/11/2016 T.Aoyagi [QC#6510, ADD]

                svcInvCnt++;

                commit();
            }

            normCnt = normCnt + svcInvCnt;

            Set<String> svcInvErrKey = getFleetSvcInvErrKey();
            for (String svcInvKey : svcInvErrKey) {
                String[] keys = parseFleetSvcInvKey(svcInvKey);
                // QC2536 start
                // List<Map<String, Object>> dsContrDtlInfoList =
                // getFleetDsContrDtlInfo(new BigDecimal(dsContrPk));
                // START 04/12/2016 T.Aoyagi [QC#6829, MOD]
                // Mod Start 08/08/2016 <QC#8293>
                // Mod Start 12/16/2016 <QC#16646>
                // START 2017/09/28 M.Kidokoro [QC#21286, MOD]
//                List<Map<String, Object>> dsContrDtlInfoList = getFleetDsContrDtlInfo(new BigDecimal(keys[0]), keys[1], keys[2], keys[3], keys[4], null, keys[5]);
                BigDecimal svcCrRebilPk = null;
                BigDecimal svcCrRebilDtlPk = null;
                if (ZYPCommonFunc.hasValue(keys[6]) && !keys[6].equals("null")) {
                    svcCrRebilPk = new BigDecimal(keys[6]);
                }
                if (ZYPCommonFunc.hasValue(keys[7]) && !keys[7].equals("null")) {
                    svcCrRebilDtlPk = new BigDecimal(keys[7]);
                }
                // START 2018/07/25 K.Kitachi [QC#17068, ADD]
                BigDecimal ctacPsnPk = null;
                if (ZYPCommonFunc.hasValue(keys[8]) && !keys[8].equals("null")) {
                    ctacPsnPk = new BigDecimal(keys[8]);
                }
                // END 2018/07/25 K.Kitachi [QC#17068, ADD]
                // START 2018/07/25 K.Kitachi [QC#17068, MOD]
//                List<Map<String, Object>> dsContrDtlInfoList = getFleetDsContrDtlInfo(new BigDecimal(keys[0]), keys[1], keys[2], keys[3], keys[4], null, keys[5], svcCrRebilPk, svcCrRebilDtlPk);
                List<Map<String, Object>> dsContrDtlInfoList = getFleetDsContrDtlInfo(new BigDecimal(keys[0]), keys[1], keys[2], keys[3], keys[4], null, keys[5], svcCrRebilPk, svcCrRebilDtlPk, ctacPsnPk);
                // END 2018/07/25 K.Kitachi [QC#17068, MOD]
                // END 2017/09/28 M.Kidokoro [QC#21286, MOD]
                // Mod End   12/16/2016 <QC#16646>
                // Mod End   08/08/2016 <QC#8293>
                // END 04/12/2016 T.Aoyagi [QC#6829, MOD]
                // QC2536 end
                for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
                    BigDecimal svcContrBllgPk = (BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK");
                    SVC_CONTR_BLLGTMsg svcContrBllgTMsg = getSvcContrBllg(svcContrBllgPk);
                    ZYPEZDItemValueSetter.setValue(svcContrBllgTMsg.bllgCpltStsCd, BLLG_CPLT_STS.ERROR);
                    S21FastTBLAccessor.update(svcContrBllgTMsg);
                    if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcContrBllgTMsg.getReturnCode())) {
                        Key key = new Key();
                        key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                        throw new S21AbendException(NSZM0399E, new String[] {"SVC_CONTR_BLLG", key.toString() });
                    }
                }
            }

            commit();
        } catch (SQLException e) {
            sqlExceptionHandler(e);
        } finally {
            S21SsmLowLevelCodingClient.closeResource(ps, rs);
        }
    }

    /**
     * Create Service Invoice For Aggregate
     */
    protected void createAggSvcInv() {

        int svcInvCnt = 0;

        PreparedStatement ps = null;
        ResultSet rs = null;
        try {

            // mod start 2017/01/19 CSA QC#16645
            List<BigDecimal> dsContrPkList = new ArrayList<BigDecimal>();
            // mod end 2017/01/19 CSA QC#16645
            ps = getAggSvcInvKey();
            rs = ps.executeQuery();

            SVC_INV: while (rs.next()) {

                BigDecimal dsContrPk = rs.getBigDecimal("DS_CONTR_PK");

                // mod start 2017/01/19 CSA QC#16645
                if (dsContrPkList.contains(dsContrPk)) {
                    continue SVC_INV;
                }
                // mod end 2017/01/19 CSA QC#16645
                // QC2536 start
                String baseBllgFlg = rs.getString("BASE_BLLG_FLG");
                String mtrBllgFlg = rs.getString("MTR_BLLG_FLG");
                String invSeptBaseUsgFlg = rs.getString("INV_SEPT_BASE_USG_FLG");
                // QC2536 end
                // START 2022/02/09 S.Kitamura [QC#59683, ADD]
                String dsInvTgtrTpCd = rs.getString("DS_INV_TGTR_TP_CD");
                String prntDsInvTgtrTpCd = rs.getString("PRNT_DS_INV_TGTR_TP_CD");
                String prntInvSeptBaseUsgFlg = rs.getString("PRNT_INV_SEPT_BASE_USG_FLG");
                if (hasValue(prntDsInvTgtrTpCd)) {
                    dsInvTgtrTpCd = prntDsInvTgtrTpCd;
                    invSeptBaseUsgFlg = prntInvSeptBaseUsgFlg;
                }
                String allLineTogetherFlg = getAllLineTgtrFlg(dsInvTgtrTpCd);
                // END 2022/02/09 S.Kitamura [QC#59683, ADD]
                // START 2017/09/28 M.Kidokoro [QC#21286, ADD]
                BigDecimal svcCrRebilPk = rs.getBigDecimal("SVC_CR_REBIL_PK");
                BigDecimal svcCrRebilDtlPk = rs.getBigDecimal("SVC_CR_REBIL_DTL_PK");
                // END 2017/09/28 M.Kidokoro [QC#21286, ADD]

                // QC2536 start
                // String svcInvKey = createRegSvcInvKey(dsContrPk,
                // svcConfigMstrPk);
                // START 04/12/2016 T.Aoyagi [QC#6829, MOD]
                String invTpCd = rs.getString("INV_TP_CD");
                // Mod Start 12/16/2016 <QC#16646>
                String billToCustCd = rs.getString("BILL_TO_CUST_CD");
                // START 2018/07/25 K.Kitachi [QC#17068, ADD]
                BigDecimal ctacPsnPk = rs.getBigDecimal("CTAC_PSN_PK");
                // END 2018/07/25 K.Kitachi [QC#17068, ADD]
                // START 2017/09/28 M.Kidokoro [QC#21286, MOD]
//                String svcInvKey = createAggSvcInvKey(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg, invTpCd, billToCustCd);
                // START 2018/07/25 K.Kitachi [QC#17068, MOD]
//                String svcInvKey = createAggSvcInvKey(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg, invTpCd, billToCustCd, svcCrRebilPk, svcCrRebilDtlPk);
                String svcInvKey = createAggSvcInvKey(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg, invTpCd, billToCustCd, svcCrRebilPk, svcCrRebilDtlPk, ctacPsnPk);
                // END 2018/07/25 K.Kitachi [QC#17068, MOD]
                // END 2017/09/28 M.Kidokoro [QC#21286, MOD]
                // END 04/12/2016 T.Aoyagi [QC#6829, MOD]
                // QC2536 end

                // START 2017/09/11 K.Kitachi [QC#20446, ADD]
                // START 2017/09/28 M.Kidokoro [QC#21286, DEL]
//                BigDecimal svcCrRebilPk = rs.getBigDecimal("SVC_CR_REBIL_PK");
                // END 2017/09/28 M.Kidokoro [QC#21286, DEL]
                // END 2017/09/11 K.Kitachi [QC#20446, ADD]

                // QC2536 start
                // List<Map<String, Object>> dsContrDtlInfoList =
                // getRegDsContrDtlInfo(dsContrPk, svcConfigMstrPk);
                // START 04/12/2016 T.Aoyagi [QC#6829, MOD]
                // Mod Start 08/08/2016 <QC#8293>
                String nextBllgDt = rs.getString("NEXT_BLLG_DT");
                // START 2017/09/28 M.Kidokoro [QC#21286, MOD]
//                List<Map<String, Object>> dsContrDtlInfoList = getAggDsContrDtlInfo(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg, invTpCd, nextBllgDt, billToCustCd);
                // START 2018/07/25 K.Kitachi [QC#17068, MOD]
//                List<Map<String, Object>> dsContrDtlInfoList = getAggDsContrDtlInfo(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg, invTpCd, nextBllgDt, billToCustCd, svcCrRebilPk, svcCrRebilDtlPk);
                List<Map<String, Object>> dsContrDtlInfoList = getAggDsContrDtlInfo(dsContrPk, baseBllgFlg, mtrBllgFlg, invSeptBaseUsgFlg, invTpCd, nextBllgDt, billToCustCd, svcCrRebilPk, svcCrRebilDtlPk, ctacPsnPk);
                // END 2018/07/25 K.Kitachi [QC#17068, MOD]
                // END 2017/09/28 M.Kidokoro [QC#21286, MOD]
                // Mod End   12/16/2016 <QC#16646>
                // Mod End   08/08/2016 <QC#8293>
                // END 04/12/2016 T.Aoyagi [QC#6829, MOD]
                // QC2536 end

                if (dsContrDtlInfoList.isEmpty()) {
                    Key key = new Key();
                    key.add("DS_CONTR_PK", dsContrPk);
                    key.add("SVC_CONFIG_MSTR_PK", "");
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    //addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "DS_CONTR_DTL", key.toString());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1094E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                // START 2018/04/02 K.Kitachi [QC#24973, ADD]
                // START 2019/10/29 K.Kitachi [QC#54203, MOD]
//                setMdlInfo(dsContrDtlInfoList);
                setContrDtlInfoList(dsContrDtlInfoList, DS_CONTR_CATG.AGGREGATE);
                // END 2019/10/29 K.Kitachi [QC#54203, MOD]
                // END 2018/04/02 K.Kitachi [QC#24973, ADD]

                //Add Start 05/25/2016 <QC#8591>
                // Check billable flag
                // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                // START 2017/09/14 K.Kim [QC#20040, MOD]
                //if (!ZYPCommonFunc.hasValue(svcCrRebilPk) && !checkBllblFlg(dsContrPk, svcInvKey, dsContrDtlInfoList, DS_CONTR_CATG.AGGREGATE)) {
                if (!ZYPCommonFunc.hasValue(svcCrRebilPk) && !checkBllblFlg(dsContrPk, svcInvKey, dsContrDtlInfoList, DS_CONTR_CATG.AGGREGATE, invTpCd)) {
                // END 2017/09/14 K.Kim [QC#20040, MOD]
                // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                    rollback();
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }
                //Add End   05/25/2016 <QC#8591>

                // ----------------------------------------------------------------------
                // Recalc SvcContrBllgAlloc
                // ----------------------------------------------------------------------
                // START 2016/06/20 T.Aoyagi [QC#9907, ADD]
                this.invLineSplTpMap = new HashMap<BigDecimal, String>();
                // END 2016/06/20 T.Aoyagi [QC#9907, ADD]
                //Mod Start 05/27/2016 <QC#8335>
                if (!recalcSvcAlloc(dsContrDtlInfoList, svcInvKey)) {
                    rollback();
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }
                //Mod End   05/27/2016 <QC#8335>

                BigDecimal mainSvcContrBllgPk = (BigDecimal) dsContrDtlInfoList.get(0).get("SVC_CONTR_BLLG_PK");

                SVC_CONTR_BLLGTMsg mainSvcContrBllgTMsg = getSvcContrBllg(mainSvcContrBllgPk);
                if (mainSvcContrBllgTMsg == null) {
                    Key key = new Key();
                    key.add("SVC_CONTR_BLLG_PK", mainSvcContrBllgPk);
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "SVC_CONTR_BLLG", key.toString());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1078E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    rollback();
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                // 2(1) Get DS_CONTR
                DS_CONTRTMsg dsContrTMsg = getDsContr(dsContrPk);
                if (dsContrTMsg == null) {
                    Key key = new Key();
                    key.add("DS_CONTR_PK", dsContrPk);
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "DS_CONTR", key.toString());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1079E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                // 2(2) Get PMT_TERM_CASH_DISC
                if (!ZYPCommonFunc.hasValue(dsContrTMsg.pmtTermCashDiscCd)) {
                    Key key = new Key();
                    key.add("DS_CONTR_PK", dsContrPk);
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "DS_CONTR.PMT_TERM_CASH_DISC_CD", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                // mod start 2019/05/10 K.Fujimoto QC#50296
                PMT_TERM_CASH_DISCTMsg pmtTermCashDiscTMsg;
                if (!hasValue(mainSvcContrBllgTMsg.svcCrRebilPk) && mainSvcContrBllgTMsg.invTpCd.getValue().equals(INV_TP.CREDIT_MEMO)) {
                    pmtTermCashDiscTMsg = getPmtTermCashDisc(PMT_TERM_CASH_DISC.BALANCE_DUE);
                } else {
                    pmtTermCashDiscTMsg = getPmtTermCashDisc(dsContrTMsg.pmtTermCashDiscCd.getValue());
                } 
                // PMT_TERM_CASH_DISCTMsg pmtTermCashDiscTMsg = getPmtTermCashDisc(dsContrTMsg.pmtTermCashDiscCd.getValue());
                // mod end 2019/05/10 K.Fujimoto QC#50296
                if (pmtTermCashDiscTMsg == null) {
                    Key key = new Key();
                    key.add("PMT_TERM_CASH_DISC_CD", dsContrTMsg.pmtTermCashDiscCd.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    //addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "PMT_TERM_CASH_DISC", key.toString());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1080E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                // 2(3) Get PMT_TERM
                if (!ZYPCommonFunc.hasValue(pmtTermCashDiscTMsg.pmtTermCd)) {
                    Key key = new Key();
                    key.add("PMT_TERM_CASH_DISC_CD", dsContrTMsg.pmtTermCashDiscCd.getValue());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "PMT_TERM_CASH_DISC.PMT_TERM_CD", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                PMT_TERMTMsg pmtTermTMsg = getPmtTerm(pmtTermCashDiscTMsg.pmtTermCd.getValue());
                if (pmtTermTMsg == null) {
                    Key key = new Key();
                    key.add("PMT_TERM_CD", pmtTermCashDiscTMsg.pmtTermCd.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "PMT_TERM", key.toString());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1081E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                String invDt = slsDt;
                String pmtTermStartDt = invDt;
                String invDueDt = ZYPDateUtil.addDays(pmtTermStartDt, pmtTermTMsg.pmtTermAot.getValueInt());

                // 2(4) Get BILL_TO_CUST by SELL_TO_CUST_CD
                // Mod Start 12/26/2016 <QC#16646>
                SELL_TO_CUSTTMsg sellToCustTMsg = getSellToCust(mainSvcContrBllgTMsg.billToCustCd.getValue());
                if (sellToCustTMsg == null) {
                    Key key = new Key();
                    key.add("SELL_TO_CUST_CD", mainSvcContrBllgTMsg.billToCustCd.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "SELL_TO_CUST", key.toString());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1082E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }
                // Mod End   12/26/2016 <QC#16646>

                // 2(5) Get GLBL_CMPY
                GLBL_CMPYTMsg glblCmpyTMsg = getGlblCmpy();
                if (glblCmpyTMsg == null) {
                    Key key = new Key();
                    key.add("GLBL_CMPY_CD", glblCmpyCd);
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "GLBL_CMPY", key.toString());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1083E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                if (!ZYPCommonFunc.hasValue(glblCmpyTMsg.stdCcyCd)) {
                    Key key = new Key();
                    key.add("GLBL_CMPY_CD", glblCmpyCd);
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "GLBL_CMPY.STD_CCY_CD", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                if (!ZYPCommonFunc.hasValue(glblCmpyTMsg.ctryCd)) {
                    Key key = new Key();
                    key.add("GLBL_CMPY_CD", glblCmpyCd);
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "GLBL_CMPY.CTRY_CD", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                CCYTMsg funcCcyTMsg = getCcy(glblCmpyTMsg.stdCcyCd.getValue());
                if (funcCcyTMsg == null) {
                    Key key = new Key();
                    key.add("CCY_CD", glblCmpyTMsg.stdCcyCd.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "CCY", key.toString());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1084E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                BigDecimal funcCcyAftDeclPntDigitNum = funcCcyTMsg.aftDeclPntDigitNum.getValue();
                if (!ZYPCommonFunc.hasValue(funcCcyAftDeclPntDigitNum)) {
                    Key key = new Key();
                    key.add("CCY_CD", funcCcyTMsg.ccyCd.getValue());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "CCY.AFT_DECL_PNT_DIGIT_NUM", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                //Del Start 02/04/2016 <QC#3947>
//                // 2(6) Get CUST_CR_PRFL, BR, CNTY
//                CUST_CR_PRFLTMsg custCrPrflTMsg = getCustCrPrfl(sellToCustTMsg.billToCustCd.getValue());
//                if (custCrPrflTMsg == null) {
//                    Key key = new Key();
//                    key.add("SELL_TO_CUST_CD", dsContrTMsg.sellToCustCd.getValue());
//                    key.add("BILL_TO_CUST_CD", sellToCustTMsg.billToCustCd.getValue());
//                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "CUST_CR_PRFL", key.toString());
//                    continue SVC_INV;
//                }
//
//                if (!ZYPCommonFunc.hasValue(custCrPrflTMsg.brCd)) {
//                    Key key = new Key();
//                    key.add("SELL_TO_CUST_CD", dsContrTMsg.sellToCustCd.getValue());
//                    key.add("BILL_TO_CUST_CD", sellToCustTMsg.billToCustCd.getValue());
//                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "CUST_CR_PRFL.BR_CD", key.toString());
//                    continue SVC_INV;
//                }
//
//                BRTMsg brTMsg = getBr(custCrPrflTMsg.brCd.getValue());
//                if (brTMsg == null) {
//                    Key key = new Key();
//                    key.add("SELL_TO_CUST_CD", dsContrTMsg.sellToCustCd.getValue());
//                    key.add("BILL_TO_CUST_CD", sellToCustTMsg.billToCustCd.getValue());
//                    key.add("BR_CD", custCrPrflTMsg.brCd.getValue());
//                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "BR", key.toString());
//                    continue SVC_INV;
//                }
//
//                CNTYTMsg ofcCntyTMsg = null;
//                if (ZYPCommonFunc.hasValue(brTMsg.cntyPk)) {
//                    ofcCntyTMsg = getCnty(brTMsg.cntyPk.getValue());
//                }
                //Del End   02/04/2016 <QC#3947>

                // 2(7) Get BILL_TO_CUST, REM_TO
                BILL_TO_CUSTTMsg billToCustTMsg = getBillToCustTMsg(mainSvcContrBllgTMsg.billToCustCd.getValue());
                if (billToCustTMsg == null) {
                    Key key = new Key();
                    key.add("SELL_TO_CUST_CD", mainSvcContrBllgTMsg.sellToCustCd.getValue());
                    key.add("BILL_TO_CUST_CD", mainSvcContrBllgTMsg.billToCustCd.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "BILL_TO_CUST", key.toString());
                    // START 2023/05/22 R.Avelino [QC#61411, MOD]
                    // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1085E, key.toString());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSAM0775E, key.toString());
                    // END 2023/05/22 R.Avelino [QC#61411, MOD]
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                CNTYTMsg billToCntyTMsg = null;
                if (ZYPCommonFunc.hasValue(billToCustTMsg.cntyPk)) {
                    billToCntyTMsg = getCnty(billToCustTMsg.cntyPk.getValue());
                }

                if (!ZYPCommonFunc.hasValue(billToCustTMsg.remId)) {
                    Key key = new Key();
                    key.add("SELL_TO_CUST_CD", mainSvcContrBllgTMsg.sellToCustCd.getValue());
                    key.add("BILL_TO_CUST_CD", mainSvcContrBllgTMsg.billToCustCd.getValue());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "BILL_TO_CUST.REM_ID", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                REM_TOTMsg remToTMsg = getRemTo(billToCustTMsg.remId.getValue());
                if (remToTMsg == null) {
                    Key key = new Key();
                    key.add("SELL_TO_CUST_CD", mainSvcContrBllgTMsg.sellToCustCd.getValue());
                    key.add("BILL_TO_CUST_CD", mainSvcContrBllgTMsg.billToCustCd.getValue());
                    key.add("REM_ID", billToCustTMsg.remId.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "REM_TO", key.toString());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1086E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                // 2(8) Get SELL_TO_CUST, CNTY
                CNTYTMsg sellToCntyTMsg = null;
                if (ZYPCommonFunc.hasValue(sellToCustTMsg.cntyPk)) {
                    sellToCntyTMsg = getCnty(sellToCustTMsg.cntyPk.getValue());
                }

                // 2(9) Get ACCT_DLY_ACTL_EXCH_RATES
                ACCT_DLY_ACTL_EXCH_RATESTMsg acctDlyActlExchRatesTMsg = getAcctDlyActlExchRates(dsContrTMsg.ccyCd.getValue(), slsDt);
                if (acctDlyActlExchRatesTMsg == null) {
                    Key key = new Key();
                    key.add("CCY_CD", dsContrTMsg.ccyCd.getValue());
                    key.add("ACTL_EXCH_RATE_ENT_DT", slsDt);
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "ACCT_DLY_ACTL_EXCH_RATES", key.toString());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1087E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                if (!ZYPCommonFunc.hasValue(acctDlyActlExchRatesTMsg.actlExchRate)) {
                    Key key = new Key();
                    key.add("CCY_CD", acctDlyActlExchRatesTMsg.ccyCd.getValue());
                    key.add("ACTL_EXCH_RATE_ENT_DT", acctDlyActlExchRatesTMsg.actlExchRateEntDt.getValue());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "ACCT_DLY_ACTL_EXCH_RATES.ACTL_EXCH_RATE", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                if (BigDecimal.ZERO.compareTo(acctDlyActlExchRatesTMsg.actlExchRate.getValue()) >= 0) {
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0097E);
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                BigDecimal actlExchRate = acctDlyActlExchRatesTMsg.actlExchRate.getValue();

                //Del Start 03/18/2016 <QC#5720>
//                // 2(10) Get DS_CONTR_INV_DELY
//                DS_CONTR_INV_DELYTMsgArray dsContrInvDelyTMsgArray = getDsContrInvDely(dsContrPk);
//                if (dsContrInvDelyTMsgArray.length() == 0) {
//                    Key key = new Key();
//                    key.add("DS_CONTR_PK", dsContrPk);
//                    // Just a warning. Continue processing this
//                    // invoice.
//                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 2, NSZM0397W, "DS_CONTR_INV_DELY", key.toString());
//                }
                //Del End 03/18/2016 <QC#5720>

                // 2(11) Get ACCT_ARTH_TP_CD
                CCYTMsg dealCcyTMsg = getCcy(dsContrTMsg.ccyCd.getValue());
                if (dealCcyTMsg == null) {
                    Key key = new Key();
                    key.add("CCY_CD", dsContrTMsg.ccyCd.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "CCY", key.toString());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1084E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                String dealCcyAcctArthTpCd = dealCcyTMsg.acctArthTpCd.getValue();
                if (!ZYPCommonFunc.hasValue(dealCcyAcctArthTpCd)) {
                    Key key = new Key();
                    key.add("CCY_CD", dealCcyTMsg.ccyCd.getValue());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "CCY.ACCT_ARTH_TP_CD", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                if (!ACCT_ARTH_TP_DIVIDE.equals(dealCcyAcctArthTpCd) && !ACCT_ARTH_TP_MULTIPLY.equals(dealCcyAcctArthTpCd)) {
                    Key key = new Key();
                    key.add("CCY_CD", dealCcyTMsg.ccyCd.getValue());
                    key.add("ACCT_ARTH_TP_CD", dealCcyTMsg.acctArthTpCd.getValue());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0395E, key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                BigDecimal dealCcyAftDeclPntDigitNum = dealCcyTMsg.aftDeclPntDigitNum.getValue();
                if (!ZYPCommonFunc.hasValue(dealCcyAftDeclPntDigitNum)) {
                    Key key = new Key();
                    key.add("CCY_CD", dealCcyTMsg.ccyCd.getValue());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "CCY.AFT_DECL_PNT_DIGIT_NUM", key.toString());
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

//                // 2(14) Get SVC_MACH_MSTR, DS_MDL, MDSE
//                Map<String, Object> mainUnitInfo = getMainUnitInfo(dsContrPk, svcConfigMstrPk);
//                if (mainUnitInfo == null || mainUnitInfo.isEmpty()) {
//                    Key key = new Key();
//                    key.add("DS_CONTR_PK", dsContrPk);
//                    key.add("SVC_CONFIG_MSTR_PK", svcConfigMstrPk);
//                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSAM0186E, key.toString());
//                    continue SVC_INV;
//                }

                String mainShipToCustCd = "";
                if (isSameShipTo(dsContrDtlInfoList)) {
                    mainShipToCustCd = (String) dsContrDtlInfoList.get(dsContrDtlInfoList.size() - 1).get("CUR_LOC_NUM");
                } else {
                    //Mod Start 07/07/2016 <QC#9438>
//                    mainShipToCustCd = getDefShipToCd(mainSvcContrBllgTMsg.dsAcctNum.getValue());
                    // START 2018/02/02 K.Kojima [QC#22242,MOD]
                    // mainShipToCustCd = getFleetDefaultShipToCustCd(dsContrDtlInfoList.get(0));
                    mainShipToCustCd = getFirstMachineShipTo(dsContrDtlInfoList);
                    // END 2018/02/02 K.Kojima [QC#22242,MOD]
                    //Mod End   07/07/2016 <QC#9438>
                }
                SHIP_TO_CUSTTMsg mainShipToCustTMsg = getShipToCust(mainShipToCustCd);
                if (mainShipToCustTMsg == null) {
                    Key key = new Key();
                    key.add("SHIP_TO_CUST_CD", mainShipToCustCd);
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "SHIP_TO_CUST_CD", key.toString());
                    // START 2023/05/22 R.Avelino [QC#61411, MOD]
                    // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1088E, key.toString());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSAM0776E, key.toString());
                    // END 2023/05/22 R.Avelino [QC#61411, MOD]
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    rollback();
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }
                // START QC#53265 K.Fujimoto[ADD]
                SELL_TO_CUSTTMsg sellToCustTMsgForShipTo = getSellToCustForShipToCust(mainShipToCustTMsg.shipToCustCd.getValue());
                if (sellToCustTMsgForShipTo == null) {
                    Key key = new Key();
                    key.add("SELL_TO_CUST_CD(SHIP_TO_CUST)", mainShipToCustTMsg.shipToCustCd.getValue());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1082E, key.toString());
                    dsContrPkList.add(dsContrPk);
                    continue SVC_INV;
                }
                // END   QC#53265 K.Fujimoto[ADD]

                // Add Start 08/31/2016 <QC#13529>
                DS_CONTR_CLSTMsg dsContrClsTMsg = getDsContrClsTMsg(dsContrTMsg.dsContrClsCd.getValue());
                if (dsContrClsTMsg == null) {
                    Key key = new Key();
                    key.add("DS_CONTR_CLS_CD", dsContrTMsg.dsContrClsCd.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "DS_CONTR_CLS", key.toString());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1089E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }

                DS_INV_TPTMsg dsInvTpTMsg = getDsInvTp(dsContrClsTMsg.dsInvTpCd.getValue());
                if (dsInvTpTMsg == null) {
                    Key key = new Key();
                    key.add("DS_INV_TP_CD", dsContrClsTMsg.dsInvTpCd.getValue());
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "DS_INV_TP", key.toString());
                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1090E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }
                // Add End   08/31/2016 <QC#13529>
                // Add Start 2018/01/26 QC#23419
                DS_INV_TPTMsg baseDsInvTpTMsg = dsInvTpTMsg;
                DS_INV_TPTMsg usgDsInvTpTMsg = dsInvTpTMsg;
                DS_INV_TPTMsg noARDsInvTpTMsg = getDsInvTp(DS_INV_TP.INVOICE_OKS_NO_AR);
                if (noARDsInvTpTMsg == null) {
                    Key key = new Key();
                    key.add("DS_INV_TP_CD", DS_INV_TP.INVOICE_OKS_NO_AR);
                    // START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM0396E, "DS_INV_TP", key.toString());
                    addMessage(DS_CONTR_CATG.REGULAR, svcInvKey, 1, NSZM1090E, key.toString());
                    // END 2016/12/13 N.Arai [QC#16400, MOD]
                    continue SVC_INV;
                }
                // Add End 2018/01/26 QC#23419

                // START 2018/11/05 K.Kitachi [QC#28627, ADD]
                // mod start 2019/10/21 QC#53521
                //if (!ZYPCommonFunc.hasValue(svcCrRebilPk) && !checkLinkContr(svcInvKey, DS_CONTR_CATG.AGGREGATE, rs.getString("CONTR_LINK_NUM"), mainSvcContrBllgTMsg.svcContrBllgThruDt.getValue())) {
                //    rollback();
                //    dsContrPkList.add(dsContrPk);
                //    continue SVC_INV;
                //}
                if (!ZYPCommonFunc.hasValue(svcCrRebilPk)) {
                    List<String> checkList = new ArrayList<String>();
                    for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
                        String contrLinkNum = rs.getString("CONTR_LINK_NUM");
                        String usgChrgFlg = (String) dsContrDtlInfo.get("USG_CHRG_FLG");
                        String mtrBllgNextBllgDt = "";
                        if (ZYPConstant.FLG_ON_Y.equals(usgChrgFlg)) {
                            mtrBllgNextBllgDt = (String) dsContrDtlInfo.get("MTR_BLLG_NEXT_BLLG_DT");
                        }
                        if (!checkList.contains(contrLinkNum + usgChrgFlg + mtrBllgNextBllgDt)) {
                            checkList.add(contrLinkNum + usgChrgFlg + mtrBllgNextBllgDt);
                            String ngStatus = checkLinkContr(svcInvKey, DS_CONTR_CATG.AGGREGATE, contrLinkNum, mtrBllgNextBllgDt);
                            if (hasValue(ngStatus)) {
                                rollback();
                                if (!DS_CONTR_CTRL_STS.SYSTEM_HOLD.equals(ngStatus)) {
                                    dsContrPkList.add(dsContrPk);
                                }
                                continue SVC_INV;
                            }
                        }
                    }
                }
                // mod end 2019/10/21 QC#53521
                // END 2018/11/05 K.Kitachi [QC#28627, ADD]

                // 2(12) Calculate Total Amount
                BigDecimal invTotDealSlsAmt = BigDecimal.ZERO;
                BigDecimal invTotFuncSlsAmt = BigDecimal.ZERO;
                BigDecimal invTotDealTaxAmt = BigDecimal.ZERO;
                BigDecimal invTotFuncTaxAmt = BigDecimal.ZERO;
                BigDecimal invTotDealDiscAmt = BigDecimal.ZERO;
                BigDecimal invTotFuncDiscAmt = BigDecimal.ZERO;
                BigDecimal invTotDealNetAmt = BigDecimal.ZERO;
                BigDecimal invTotFuncNetAmt = BigDecimal.ZERO;

                // START 2017/11/22 E.Kameishi [QC#19735, MOD]
                // Mod Start 08/31/2016 <QC#13529>
//                String svcInvNum = ZYPExtnNumbering.getUniqueID(glblCmpyCd, "SVC_BLLG_INV_NUM");
                //String svcInvNum = ZYPExtnNumbering.getUniqueID(glblCmpyCd, dsInvTpTMsg.autoSeqCd.getValue());
                // Mod Start 2018/01/24 QC#23684 Temporarily Fixed
                BigDecimal svcInvPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_SQ");
//                String svcInvNum = ZYPMaxTenDigitsNumbering.getUniqueID(glblCmpyCd, dsInvTpTMsg.autoSeqCd.getValue());
                String svcInvNum = svcInvPk.toPlainString();
                // Mod End 2018/01/24 QC#23684 Temporarily Fixed
                // Mod End   08/31/2016 <QC#13529>
                // END 2017/11/22 E.Kameishi [QC#19735, MOD]

                int lineNum = 1;

                // 3(1) Get DS_CONTR_DTL
                for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
                    // START 2017/08/29 M.Kidokoro [QC#20079, ADD]
                    // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // if (isMtrHldForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) {
                    // START 2022/02/09 S.Kitamura [QC#59683, MOD]
                    // if (isUnbllblForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                    if (isUnbllblForTogether(allLineTogetherFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                    // END 2022/02/09 S.Kitamura [QC#59683, MOD]
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                        continue;
                    }
                    // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                    // END 2017/08/29 M.Kidokoro [QC#20079, ADD]

                    if (DS_CONTR_DTL_TP.AGGREGATE.equals((String) dsContrDtlInfo.get("DS_CONTR_DTL_TP_CD"))) {
                        continue;
                    }

                    BigDecimal svcContrBllgPk = (BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK");

                    SVC_CONTR_BLLGTMsg svcContrBllgTMsg = getSvcContrBllg(svcContrBllgPk);
                    if (svcContrBllgTMsg == null) {
                        Key key = new Key();
                        key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "SVC_CONTR_BLLG", key.toString());
                        addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1078E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        rollback();
                        // mod start 2017/01/19 CSA QC#16645
                        dsContrPkList.add(dsContrPk);
                        // mod end 2017/01/19 CSA QC#16645
                        continue SVC_INV;
                    }

                    // START 2019/11/08 K.Kitachi [QC#54368, ADD]
                    boolean poReq = NSXC001001ContrValidation.checkPoRequired(this.glblCmpyCd, this.slsDt, svcContrBllgTMsg.dsAcctNum.getValue(), svcContrBllgTMsg.billToCustCd.getValue(), ONBATCH_TYPE.BATCH);
                    if (poReq) {
                        if (!isExistsPoInclBllgPeriod(svcContrBllgPk)) {
                            String svcContrBllgFromDt = ZYPDateUtil.formatEzd8ToDisp(svcContrBllgTMsg.svcContrBllgFromDt.getValue());
                            String svcContrBllgThruDt = ZYPDateUtil.formatEzd8ToDisp(svcContrBllgTMsg.svcContrBllgThruDt.getValue());
                            Key key = new Key();
                            key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                            addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0751W, svcContrBllgFromDt, svcContrBllgThruDt, key.toString());
                            rollback();
                            dsContrPkList.add(dsContrPk);
                            continue SVC_INV;
                        }
                    }
                    if (!ZYPCommonFunc.hasValue(svcCrRebilPk)) {
                        String contrLinkNum = rs.getString("CONTR_LINK_NUM");
                        if (!checkPoPeriodForLinkContr(dsContrPk, contrLinkNum, svcContrBllgPk, svcContrBllgTMsg.baseChrgFlg.getValue())) {
                            addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0753W, contrLinkNum);
                            rollback();
                            dsContrPkList.add(dsContrPk);
                            continue SVC_INV;
                        }
                    }
                    // END 2019/11/08 K.Kitachi [QC#54368, ADD]

                    // Add Start 2016/11/10 <QC#15789>
                    BigDecimal dsContrDtlPk = (BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK");
                    boolean hasDsContrProcAllocForBase = hasDsContrProcAlloc(dsContrPk, dsContrDtlPk, SVC_INV_CHRG_TP.BASE_CHARGE);
                    boolean hasDsContrProcAllocForMtr = hasDsContrProcAlloc(dsContrPk, dsContrDtlPk, SVC_INV_CHRG_TP.METER_CHARGE);
                    boolean hasDsContrProcAllocForAddl = hasDsContrProcAlloc(dsContrPk, dsContrDtlPk, SVC_INV_CHRG_TP.ADDITIONAL_CHARGE);
                    // Add End   2016/11/10 <QC#15789>
                    //Del Start 05/25/2016 <QC#8591>
//                    // Check billable flag
//                    if (!checkBllblFlg(svcContrBllgTMsg, dsContrTMsg, dsContrDtlInfo, svcInvKey)) {
//                        rollback();
//                        continue SVC_INV;
//                    }
                    //Del End   05/25/2016 <QC#8591>

                    //Mod Start 07/08/2016 <QC#8293>
//                    // Del Start 03/29/2016 <QC#5993>
                    // START 2022/02/09 S.Kitamura [QC#59683, MOD]
                    // if (ZYPConstant.FLG_OFF_N.equals(invSeptBaseUsgFlg)) {
                    if (ZYPConstant.FLG_OFF_N.equals(invSeptBaseUsgFlg) && (ZYPConstant.FLG_ON_Y.equals(allLineTogetherFlg))) {
                        // END 2022/02/09 S.Kitamura [QC#59683, MOD]
                        // START 2018/08/24 K.Kojima [QC#27922,MOD]
                        // boolean result = existBaseUsgChrg(dsContrDtlInfo, dsContrDtlInfoList, svcContrBllgTMsg.baseChrgFlg.getValue());
                        // START 2019/10/09 [QC#54058,MOD]
                        // boolean result = existBaseUsgChrg(dsContrDtlInfo, dsContrDtlInfoList, svcContrBllgTMsg.baseChrgFlg.getValue(), true);
                        boolean result = existBaseUsgChrg(dsContrDtlInfo, dsContrDtlInfoList, svcContrBllgTMsg.baseChrgFlg.getValue(), true, svcContrBllgTMsg.invTpCd.getValue());
                        // END 2019/10/09 [QC#54058,MOD]
                        // END 2018/08/24 K.Kojima [QC#27922,MOD]
                        if (!result) {
                            String msgParam = "Base Charge";
                            if (ZYPConstant.FLG_ON_Y.equals(svcContrBllgTMsg.baseChrgFlg.getValue())) {
                                msgParam = "Usage Charge";
                            }
                            Key key = new Key();
                            key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
                            key.add("SER_NUM", (String) dsContrDtlInfo.get("SER_NUM"));
                            key.add("SVC_MACH_MSTR_PK", (BigDecimal) dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                            addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 2, NSAM0412W, msgParam, key.toString());
                            rollback();
                            // mod start 2017/01/19 CSA QC#16645
                            dsContrPkList.add(dsContrPk);
                            // mod end 2017/01/19 CSA QC#16645
                            continue SVC_INV;
                        }
                    }
//                    // Del End   03/29/2016 <QC#5993>
                    //Mod End   07/08/2016 <QC#8293>

                    String shipToCustCd = (String) dsContrDtlInfo.get("CUR_LOC_NUM");
                    SHIP_TO_CUSTTMsg shipToCustTMsg = getShipToCust(shipToCustCd);
                    if (shipToCustTMsg == null) {
                        Key key = new Key();
                        key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                        key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                        key.add("SHIP_TO_CUST_CD", shipToCustCd);
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "SHIP_TO_CUST_CD", key.toString());
                        addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1088E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        rollback();
                        // mod start 2017/01/19 CSA QC#16645
                        dsContrPkList.add(dsContrPk);
                        // mod end 2017/01/19 CSA QC#16645
                        continue SVC_INV;
                    }

                    if (!ZYPCommonFunc.hasValue(shipToCustTMsg.ctryCd)) {
                        Key key = new Key();
                        key.add("SHIP_TO_CUST_CD", shipToCustCd);
                        addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "SHIP_TO_CUST.CTRY_CD", key.toString());
                        rollback();
                        // mod start 2017/01/19 CSA QC#16645
                        dsContrPkList.add(dsContrPk);
                        // mod end 2017/01/19 CSA QC#16645
                        continue SVC_INV;
                    }

                    MDSETMsg mdseTMsg = getMdse((String) dsContrDtlInfo.get("MDSE_CD"));
                    if (mdseTMsg == null) {
                        Key key = new Key();
                        key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                        key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                        key.add("MDSE_CD", dsContrDtlInfo.get("MDSE_CD"));
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "MDSE", key.toString());
                        addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1091E, key.toString());
                        // END 2016/12/13 N.Arai [QC#16400, MOD]
                        rollback();
                        // mod start 2017/01/19 CSA QC#16645
                        dsContrPkList.add(dsContrPk);
                        // mod end 2017/01/19 CSA QC#16645
                        continue SVC_INV;
                    }

                    // 3(5) Get MDL_MDSE_RELN_V
//                    //MOD Start   02/04/2016 <QC#4112>
//                    Map<String, Object> mdlMdseInfo = getMdlMdseInfo((String) dsContrDtlInfo.get("MDSE_CD"));
//                    if (mdlMdseInfo == null) {
//                        Key key = new Key();
//                        key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
//                        key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
//                        key.add("MDSE_CD", dsContrDtlInfo.get("MDSE_CD"));
//                        addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "MDL_NM", key.toString());
//                        rollback();
//                        continue SVC_INV;
//                    }

                    // QC2415 start
                    // String svcContrBllgFromDt = (String)
                    // dsContrDtlInfo.get("SVC_CONTR_BLLG_FROM_DT");
                    // String svcContrBllgThruDt = (String)
                    // dsContrDtlInfo.get("SVC_CONTR_BLLG_THRU_DT");
                    // QC2415 end
//                    String mdlNm = (String) mdlMdseInfo.get("MDL_NM");
                    String mdlNm = (String) dsContrDtlInfo.get("MDL_NM");
                    //MOD End   02/04/2016 <QC#4112>

                    // ----------------------------------------------------------------------
                    // Base Charge
                    // ----------------------------------------------------------------------
                    String svcInvChrgTpCd = null;

                    // QC2536 start
                    if (ZYPConstant.FLG_OFF_N.equals(invSeptBaseUsgFlg) || (ZYPConstant.FLG_ON_Y.equals(invSeptBaseUsgFlg) && ZYPConstant.FLG_ON_Y.equals(baseBllgFlg))) {
                        // QC2536 end
                        // Add Start 2018/01/26 QC#23419
                        if (hasValue(dsContrTMsg.dsContrEdiCd) && DS_CONTR_EDI.CFS.equals(dsContrTMsg.dsContrEdiCd.getValue())) {
                            if (ZYPConstant.FLG_ON_Y.equals(dsContrTMsg.baseChrgToLeaseCmpyFlg.getValue())) {
                                // No-AR
                                baseDsInvTpTMsg = noARDsInvTpTMsg;
                            }
                        }
                        // Add End 2018/01/26 QC#23419
                        svcInvChrgTpCd = SVC_INV_CHRG_TP.BASE_CHARGE;

                        SVC_CONTR_BASE_BLLGTMsgArray svcContrBaseBllgTMsgArray = getSvcContrBaseBllgList(svcContrBllgPk);
                        for (int i = 0; i < svcContrBaseBllgTMsgArray.length(); i++) {

                            BigDecimal svcInvLinePk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_SQ");
                            String svcInvLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);

                            SVC_CONTR_BASE_BLLGTMsg svcContrBaseBllgTMsg = svcContrBaseBllgTMsgArray.no(i);

                            BigDecimal baseNetDealAmt = svcContrBaseBllgTMsg.baseDealAmt.getValue();
                            BigDecimal baseNetFuncAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, baseNetDealAmt, funcCcyAftDeclPntDigitNum);
                            BigDecimal baseDiscDealAmt = svcContrBaseBllgTMsg.baseDiscDealAmt.getValue();
                            BigDecimal baseDiscFuncAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, baseDiscDealAmt, funcCcyAftDeclPntDigitNum);
                            BigDecimal baseSlsDealAmt = baseNetDealAmt.add(baseDiscDealAmt);
                            BigDecimal baseSlsFuncAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, baseSlsDealAmt, funcCcyAftDeclPntDigitNum);

                            // START 2018/05/31 K.Kojima [QC#23685,DEL]
                            // NWZC036101PMsg taxApiPMsg = new NWZC036101PMsg();
                            // END 2018/05/31 K.Kojima [QC#23685,DEL]
                            String taxCalcGeoCd = "";
                            // START 2018/05/31 K.Kojima [QC#23685,MOD]
                            // BigDecimal baseTaxRate;
                            // BigDecimal baseTaxFuncAmt;
                            // BigDecimal baseTaxDealAmt;
                            BigDecimal baseTaxRate = BigDecimal.ZERO;
                            BigDecimal baseTaxFuncAmt = BigDecimal.ZERO;
                            BigDecimal baseTaxDealAmt = BigDecimal.ZERO;
                            // END 2018/05/31 K.Kojima [QC#23685,MOD]

                            // START 2018/05/31 K.Kojima [QC#23685,DEL]
                            // // Mod Start 08/31/2016 <QC#13529>
                            // // if (BigDecimal.ZERO.compareTo(baseNetFuncAmt) == 0) {
                            // // Mod Start 2018/01/26 QC#23419
                            // // if (BigDecimal.ZERO.compareTo(baseNetFuncAmt) == 0 || !FLG_ON_Y.equals(dsInvTpTMsg.taxCalcFlg.getValue())) {
                            // if (BigDecimal.ZERO.compareTo(baseNetFuncAmt) == 0 || !FLG_ON_Y.equals(baseDsInvTpTMsg.taxCalcFlg.getValue())) {
                            // // Mod End 2018/01/26 QC#23419
                            // // Mod End   08/31/2016 <QC#13529>
                            //     baseTaxRate = BigDecimal.ZERO;
                            //     baseTaxFuncAmt = BigDecimal.ZERO;
                            //     baseTaxDealAmt = BigDecimal.ZERO;
                            // } else {
                            //     // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
                            //     // taxApiPMsg = callTaxCalcAPIForBase(dsContrDtlInfo, svcContrBllgTMsg, baseNetFuncAmt);
                            //     // START 2017/09/27 K.Yamada [QC#21233, MOD]
                            //     // taxApiPMsg = callTaxCalcAPIForBase(dsContrDtlInfo, svcContrBllgTMsg, baseNetFuncAmt, svcInvNum);
                            //     taxApiPMsg = callTaxCalcAPIForBase(dsContrDtlInfo, svcContrBllgTMsg, baseNetFuncAmt, svcInvNum, invDt);
                            //     // END 2017/09/27 K.Yamada [QC#21233, MOD]
                            //     // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
                            // 
                            //     if (S21ApiUtil.isXxMsgId(taxApiPMsg)) {
                            //         Key key = new Key();
                            //         key.add("DS_CONTR_PK", dsContrPk);
                            //         key.add("DS_CONTR_TP_CD", dsContrTMsg.dsContrTpCd.getValue());
                            //         key.add("SVC_CONFIG_MSTR_PK", "");
                            //         key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                            //         key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                            //         key.add("SVC_INV_NUM", svcInvNum);
                            //         key.add("INV_DT", invDt);
                            //         key.add("SELL_TO_CUST_CD", sellToCustTMsg.sellToCustCd.getValue());
                            //         key.add("SHIP_TO_CUST_CD", shipToCustCd);
                            //         key.add("CTY_ADDR", shipToCustTMsg.ctyAddr.getValue());
                            //         key.add("ST_CD", shipToCustTMsg.stCd.getValue());
                            //         key.add("POST_CD", shipToCustTMsg.postCd.getValue());
                            //         key.add("SVC_INV_CHRG_TP_CD", svcInvChrgTpCd);
                            //         key.add("BASE_FUNC_AMT", baseNetFuncAmt);
                            // 
                            //         List<String> msgIdList = S21ApiUtil.getXxMsgIdList(taxApiPMsg);
                            //         for (String msgId : msgIdList) {
                            //             addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0407E, "NWZC036101", S21MessageFunc.clspGetMessage(msgId), key.toString());
                            //         }
                            //         rollback();
                            //         // mod start 2017/01/19 CSA QC#16645
                            //         dsContrPkList.add(dsContrPk);
                            //         // mod end 2017/01/19 CSA QC#16645
                            //         continue SVC_INV;
                            //     }
                            //     taxCalcGeoCd = taxApiPMsg.taxCalculateOutputLine.no(0).taxAreaId.getValue();
                            //     baseTaxRate = getTaxRate(taxApiPMsg);
                            //     baseTaxFuncAmt = getTaxFuncAmt(taxApiPMsg).setScale(funcCcyAftDeclPntDigitNum.intValueExact(), RoundingMode.HALF_UP);
                            //     baseTaxDealAmt = exchToDealAmt(actlExchRate, dealCcyAcctArthTpCd, baseTaxFuncAmt, dealCcyAftDeclPntDigitNum);
                            // }
                            // END 2018/05/31 K.Kojima [QC#23685,DEL]

                            invTotDealSlsAmt = invTotDealSlsAmt.add(baseSlsDealAmt);
                            invTotFuncSlsAmt = invTotFuncSlsAmt.add(baseSlsFuncAmt);
                            invTotDealTaxAmt = invTotDealTaxAmt.add(baseTaxDealAmt);
                            invTotFuncTaxAmt = invTotFuncTaxAmt.add(baseTaxFuncAmt);
                            invTotDealDiscAmt = invTotDealDiscAmt.add(baseDiscDealAmt);
                            invTotFuncDiscAmt = invTotFuncDiscAmt.add(baseDiscFuncAmt);
                            invTotDealNetAmt = invTotDealNetAmt.add(baseNetDealAmt);
                            invTotFuncNetAmt = invTotFuncNetAmt.add(baseNetFuncAmt);

                            List<SVC_INV_LINE_ALLOCTMsg> svcInvLineAllocTMsgList = new ArrayList<SVC_INV_LINE_ALLOCTMsg>();

                            // Add Start 2016/11/10 <QC#15789>
                            String ajeInvLineAllocCd = getAjeInvLineAllocCdForBase(hasDsContrProcAllocForBase, dsContrDtlInfo);
                            // Add End   2016/11/10 <QC#15789>
                            SVC_CONTR_BLLG_ALLOCTMsgArray svcContrBllgAllocTMsgArray = getSvcContrBaseBllgAllocList(svcContrBaseBllgTMsg.svcContrBaseBllgPk.getValue());
                            for (int j = 0; j < svcContrBllgAllocTMsgArray.length(); j++) {

                                SVC_CONTR_BLLG_ALLOCTMsg svcContrBllgAllocTMsg = svcContrBllgAllocTMsgArray.no(j);

                                BigDecimal allocDealGrsTotPrcAmt = svcContrBllgAllocTMsg.dealGrsTotPrcAmt.getValue();
                                BigDecimal allocFuncGrsTotPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealGrsTotPrcAmt, funcCcyAftDeclPntDigitNum);
                                BigDecimal allocDealNetUnitPrcAmt = svcContrBllgAllocTMsg.dealNetUnitPrcAmt.getValue();
                                BigDecimal allocFuncNetUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealNetUnitPrcAmt, funcCcyAftDeclPntDigitNum);
                                BigDecimal allocDealGrsUnitPrcAmt = svcContrBllgAllocTMsg.dealGrsUnitPrcAmt.getValue();
                                BigDecimal allocFuncGrsUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealGrsUnitPrcAmt, funcCcyAftDeclPntDigitNum);
                                BigDecimal allocInvLineDealNetAmt = svcContrBllgAllocTMsg.invLineDealNetAmt.getValue();
                                BigDecimal allocInvLineFuncNetAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocInvLineDealNetAmt, funcCcyAftDeclPntDigitNum);
                                // QC2417 start
                                // dealGrsTotPrcAmt is not include
                                // dealDiscUnitPrcAmt.
                                allocDealGrsTotPrcAmt = allocDealGrsTotPrcAmt.add(svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue());
                                // funcGrsTotPrcAmt is not include
                                // funcDiscUnitPrcAmt.
                                allocFuncGrsTotPrcAmt = allocFuncGrsTotPrcAmt.add(exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue(), funcCcyAftDeclPntDigitNum));
                                // QC2417 end

                                BigDecimal allocDealDiscUnitPrcAmt = svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue();
                                BigDecimal allocFuncDiscUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealDiscUnitPrcAmt, funcCcyAftDeclPntDigitNum);

                                BigDecimal svcInvLineAllocPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_ALLOC_SQ");
                                String svcInvLineAllocNum = String.format(SVC_INV_LINE_ALLOC_NUM_FMT, j + 1);

                                SVC_INV_LINE_ALLOCTMsg svcInvLineAllocTMsg = new SVC_INV_LINE_ALLOCTMsg();
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.glblCmpyCd, glblCmpyCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineAllocPk, svcInvLineAllocPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLinePk, svcInvLinePk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvNum, svcInvNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineNum, svcInvLineNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineAllocNum, svcInvLineAllocNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.contrPrcAllocTpCd, svcContrBllgAllocTMsg.contrPrcAllocTpCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.intgMdseCd, svcContrBllgAllocTMsg.intgMdseCd);
                                // START 2017/11/29 K.Kojima [QC#21918,MOD]
                                // ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.tocCd, svcContrBllgAllocTMsg.tocCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.tocCd, getSalesRep((BigDecimal) dsContrDtlInfo.get("SVC_MACH_MSTR_PK")));
                                // END 2017/11/29 K.Kojima [QC#21918,MOD]
                                // START 2019/03/11 [QC#30675, ADD]
                                if (!hasValue(svcInvLineAllocTMsg.tocCd)) {
                                    Key key = new Key();
                                    key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                    key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE_ALLOC.TOC_CD", key.toString());
                                    rollback();
                                    continue SVC_INV;
                                }
                                // END 2019/03/11 [QC#30675, ADD]
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.slsAllocRate, svcContrBllgAllocTMsg.slsAllocRate);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealGrsTotPrcAmt, allocDealGrsTotPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcGrsTotPrcAmt, allocFuncGrsTotPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealNetUnitPrcAmt, allocDealNetUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcNetUnitPrcAmt, allocFuncNetUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealGrsUnitPrcAmt, allocDealGrsUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcGrsUnitPrcAmt, allocFuncGrsUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineDealNetAmt, allocInvLineDealNetAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineFuncNetAmt, allocInvLineFuncNetAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineDealTaxAmt, BigDecimal.ZERO);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineFuncTaxAmt, BigDecimal.ZERO);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealDiscUnitPrcAmt, allocDealDiscUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcDiscUnitPrcAmt, allocFuncDiscUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaCmpyCd, svcContrBllgAllocTMsg.coaCmpyCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaAfflCd, svcContrBllgAllocTMsg.coaAfflCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaBrCd, svcContrBllgAllocTMsg.coaBrCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaChCd, svcContrBllgAllocTMsg.coaChCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaCcCd, svcContrBllgAllocTMsg.coaCcCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaAcctCd, svcContrBllgAllocTMsg.coaAcctCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaProdCd, svcContrBllgAllocTMsg.coaProdCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaProjCd, svcContrBllgAllocTMsg.coaProjCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaExtnCd, svcContrBllgAllocTMsg.coaExtnCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.ccyCd, svcContrBllgAllocTMsg.ccyCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrBllgAllocPk, svcContrBllgAllocTMsg.svcContrBllgAllocPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrBaseBllgPk, svcContrBllgAllocTMsg.svcContrBaseBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrMtrBllgPk, svcContrBllgAllocTMsg.svcContrMtrBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrAddlChrgBllgPk, svcContrBllgAllocTMsg.svcContrAddlChrgBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.trxCd, svcContrBllgAllocTMsg.trxCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.trxRsnCd, svcContrBllgAllocTMsg.trxRsnCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dfrdAcctgRuleCd, svcContrBllgAllocTMsg.dfrdAcctgRuleCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dfrdAcctgRuleDurnAot, svcContrBllgAllocTMsg.dfrdAcctgRuleDurnAot);
                                // Add Start 2016/11/10 <QC#15789>
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.ajeInvLineAllocCd, ajeInvLineAllocCd);
                                // Add End   2016/11/10 <QC#15789>
                                // START 2016/06/20 T.Aoyagi [QC#9907, ADD]
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineSplTpCd, this.invLineSplTpMap.get(svcContrBllgAllocTMsg.svcContrBllgAllocPk.getValue()));
                                // END 2016/06/20 T.Aoyagi [QC#9907, ADD]

                                svcInvLineAllocTMsgList.add(svcInvLineAllocTMsg);
                            }

                            // ----------------------------------------------------------------------
                            // Adjusting SVC_INV_LINE_ALLOC Fractions
                            // ----------------------------------------------------------------------
                            adjSvcInvLineAllocFrac(svcInvLineAllocTMsgList, baseSlsDealAmt, baseSlsFuncAmt, baseDiscDealAmt, baseDiscFuncAmt, baseNetDealAmt, baseNetFuncAmt, baseTaxDealAmt, baseTaxFuncAmt);

                            // ----------------------------------------------------------------------
                            // Create SVC_INV_LINE_ALLOC
                            // ----------------------------------------------------------------------
                            for (SVC_INV_LINE_ALLOCTMsg svcInvLineAllocTMsg : svcInvLineAllocTMsgList) {
                                S21FastTBLAccessor.insert(svcInvLineAllocTMsg);
                                if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineAllocTMsg.getReturnCode())) {
                                    throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE_ALLOC" });
                                }
                            }

                            // ----------------------------------------------------------------------
                            // Create SVC_INV_LINE
                            // ----------------------------------------------------------------------
                            // QC2415 start
                            // SVC_INV_LINETMsg svcInvLineTMsg =
                            // getSvcInvLineTMsg(svcContrBllgPk,
                            // svcContrBllgFromDt, svcContrBllgThruDt,
                            // shipToCustCd, svcInvNum, svcInvLinePk,
                            // svcInvLineNum, svcInvChrgTpCd, mdseCd,
                            // mdseNm, mdlId, mdlNm,
                            // baseTaxRate, baseSlsDealAmt,
                            // baseSlsFuncAmt, baseDiscDealAmt,
                            // baseDiscFuncAmt, baseNetDealAmt,
                            // baseNetFuncAmt, baseTaxDealAmt,
                            // baseTaxFuncAmt);
                            SVC_INV_LINETMsg svcInvLineTMsg = getSvcInvLineTMsg(shipToCustCd, svcInvNum, svcInvLinePk, svcInvLineNum, svcInvChrgTpCd, mdlNm,
                                    baseTaxRate, baseSlsDealAmt, baseSlsFuncAmt, baseDiscDealAmt, baseDiscFuncAmt, baseNetDealAmt, baseNetFuncAmt, baseTaxDealAmt, baseTaxFuncAmt, taxCalcGeoCd,
                                    dsContrDtlInfo, dsContrTMsg, svcContrBllgTMsg, svcContrBaseBllgTMsg, null);
                            // QC2415 end

                            // START 2019/03/11 [QC#30675, ADD]
                            if (svcInvLineTMsg == null) {
                                Key key = new Key();
                                key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                key.add("SVC_MACH_MSTR_PK", svcContrBllgTMsg.svcMachMstrPk.getValue());
                                addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE.SLS_REP_TOC_CD", key.toString());
                                rollback();
                                continue SVC_INV;
                            }
                            // END 2019/03/11 [QC#30675, ADD]
                            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrPk, svcContrBllgTMsg.dsContrPk);
                            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrDtlPk, svcContrBllgTMsg.dsContrDtlPk);
                            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcContrBaseBllgPk, svcContrBaseBllgTMsg.svcContrBaseBllgPk);

                            // add start 2018/08/09 QC#27329-3
                            if (INV_TP.CREDIT_MEMO.equals(svcContrBllgTMsg.invTpCd.getValue()) && hasValue(svcContrBllgTMsg.origSvcInvNum)) {
                                setOrigSvcInvLineInfo(svcInvLineTMsg, svcContrBllgTMsg.origSvcInvNum.getValue(), svcContrBllgTMsg.dsContrBllgSchdPk.getValue());
                            }
                            // add end 2018/08/09 QC#27329-3

                            S21FastTBLAccessor.insert(svcInvLineTMsg);
                            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineTMsg.getReturnCode())) {
                                throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE" });
                            }

                            // START 2018/05/31 K.Kojima [QC#23685,DEL]
                            // // SVC_INV_LINE_TAX_DTL
                            // createSvcInvLineTaxDtl(svcInvLinePk, (String) dsContrDtlInfo.get("CCY_CD"), taxApiPMsg);
                            // END 2018/05/31 K.Kojima [QC#23685,DEL]

                            lineNum++;

                            // ----------------------------------------------------------------------
                            // Additional Charge
                            // ----------------------------------------------------------------------
                            List<Map<String, BigDecimal>> addlChrgBllgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                            for (Map<String, BigDecimal> addlChrgBllgInfo : addlChrgBllgInfoList) {

                                BigDecimal addlSvcContrBllgPk = addlChrgBllgInfo.get("SVC_CONTR_BLLG_PK");
                                SVC_CONTR_BLLGTMsg addlSvcContrBllgTMsg = getSvcContrBllg(addlSvcContrBllgPk);
                                BigDecimal addlChrgBllgPk = addlChrgBllgInfo.get("SVC_CONTR_ADDL_CHRG_BLLG_PK");
                                SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg = getSvcContrAddlChrgBllgTMsg(addlChrgBllgPk);
                                String addlSvcInvLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);
                                // tax API
                                BigDecimal taxDealAmt = BigDecimal.ZERO;
                                BigDecimal taxFuncAmt = BigDecimal.ZERO;
                                // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                // // Mod Start 08/31/2016 <QC#13529>
                                // NWZC036101PMsg addlTaxApiPMsg = null;
                                // // Mod Start 2018/01/26 QC#23419
                                // // if (FLG_ON_Y.equals(dsInvTpTMsg.taxCalcFlg.getValue())) {
                                // if (FLG_ON_Y.equals(baseDsInvTpTMsg.taxCalcFlg.getValue())) {
                                // // Mod End 2018/01/26 QC#23419
                                //     // Mod Start 04/04/2016 <QC#6492>
                                //     // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
                                //     // addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue());
                                //     // START 2017/09/27 K.Yamada [QC#21233, MOD]
                                //     // addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue(), svcInvNum);
                                //     addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue(), svcInvNum, invDt);
                                //     // END 2017/09/27 K.Yamada [QC#21233, MOD]
                                //     // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
                                // 
                                //     // Mod End 04/04/2016 <QC#6492>
                                //     if (S21ApiUtil.isXxMsgId(addlTaxApiPMsg)) {
                                //         Key key = new Key();
                                //         key.add("DS_CONTR_PK", dsContrPk);
                                //         key.add("DS_CONTR_TP_CD", dsContrTMsg.dsContrTpCd.getValue());
                                //         key.add("SVC_CONFIG_MSTR_PK", "");
                                //         key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                                //         // START 2016/12/13 N.Arai [QC#16400, MOD]
                                //         //key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                                //         key.add("SVC_CONTR_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrBllgPk.getValue());
                                //         // END 2016/12/13 N.Arai [QC#16400, MOD]
                                //         key.add("SVC_INV_NUM", svcInvNum);
                                //         key.add("INV_DT", invDt);
                                //         key.add("SELL_TO_CUST_CD", sellToCustTMsg.sellToCustCd.getValue());
                                //         key.add("SHIP_TO_CUST_CD", shipToCustCd);
                                //         key.add("CTY_ADDR", shipToCustTMsg.ctyAddr.getValue());
                                //         key.add("ST_CD", shipToCustTMsg.stCd.getValue());
                                //         key.add("POST_CD", shipToCustTMsg.postCd.getValue());
                                //         key.add("SVC_INV_CHRG_TP_CD", svcInvChrgTpCd);
                                //         key.add("FUNC_AMT", svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue());
                                // 
                                //         List<String> msgIdList = S21ApiUtil.getXxMsgIdList(addlTaxApiPMsg);
                                //         for (String msgId : msgIdList) {
                                //             addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0407E, "NWZC036101", S21MessageFunc.clspGetMessage(msgId), key.toString());
                                //         }
                                //         rollback();
                                //         // mod start 2017/01/19 CSA QC#16645
                                //         dsContrPkList.add(dsContrPk);
                                //         // mod end 2017/01/19 CSA QC#16645
                                //         continue SVC_INV;
                                //     }
                                //     taxFuncAmt = getTaxFuncAmt(addlTaxApiPMsg).setScale(funcCcyAftDeclPntDigitNum.intValueExact(), RoundingMode.HALF_UP);
                                //     taxDealAmt = exchToDealAmt(actlExchRate, dealCcyAcctArthTpCd, taxFuncAmt, dealCcyAftDeclPntDigitNum);
                                // }
                                // // Mod End   08/31/2016 <QC#13529>
                                // END 2018/05/31 K.Kojima [QC#23685,DEL]

                                // Create SVC_INV_LINE
                                //Mod Start 05/25/2016 <QC#7636>
                                // START 2017/11/17 K.Kojima [QC#21918,MOD]
                                // SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, addlTaxApiPMsg, taxDealAmt, taxFuncAmt, shipToCustCd);
                                // START 2018/05/31 K.Kojima [QC#23685,MOD]
                                // SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, addlTaxApiPMsg, taxDealAmt, taxFuncAmt, shipToCustCd, dsContrTMsg);
                                SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, taxDealAmt, taxFuncAmt, shipToCustCd, dsContrTMsg);
                                // END 2018/05/31 K.Kojima [QC#23685,MOD]
                                // END 2017/11/17 K.Kojima [QC#21918,MOD]
                                //Mod End   05/25/2016 <QC#7636>
                                // START 2019/03/11 [QC#30675, ADD]
                                if (addlSvcInvLineTMsg == null) {
                                    Key key = new Key();
                                    key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                    key.add("SVC_CONTR_ADDL_CHRG_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue());
                                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE.SLS_REP_TOC_CD", key.toString());
                                    rollback();
                                    continue SVC_INV;
                                }
                                // END 2019/03/11 [QC#30675, ADD]

                                // Add Start 08/08/2016 <QC#8293>
                                invTotDealSlsAmt = invTotDealSlsAmt.add(addlSvcInvLineTMsg.invLineDealSlsAmt.getValue());
                                invTotFuncSlsAmt = invTotFuncSlsAmt.add(addlSvcInvLineTMsg.invLineFuncSlsAmt.getValue());
                                invTotDealTaxAmt = invTotDealTaxAmt.add(addlSvcInvLineTMsg.invLineDealTaxAmt.getValue());
                                invTotFuncTaxAmt = invTotFuncTaxAmt.add(addlSvcInvLineTMsg.invLineFuncTaxAmt.getValue());
                                invTotDealDiscAmt = invTotDealDiscAmt.add(addlSvcInvLineTMsg.invLineDealDiscAmt.getValue());
                                invTotFuncDiscAmt = invTotFuncDiscAmt.add(addlSvcInvLineTMsg.invLineFuncDiscAmt.getValue());
                                invTotDealNetAmt = invTotDealNetAmt.add(addlSvcInvLineTMsg.invLineDealNetAmt.getValue());
                                invTotFuncNetAmt = invTotFuncNetAmt.add(addlSvcInvLineTMsg.invLineFuncNetAmt.getValue());
                                // Add End   08/08/2016 <QC#8293>
                                // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                // createSvcInvLineTaxDtl(addlSvcInvLineTMsg.svcInvLinePk.getValue(), (String) dsContrDtlInfo.get("CCY_CD"), addlTaxApiPMsg);
                                // END 2018/05/31 K.Kojima [QC#23685,DEL]

                                // Add Start 2016/11/10 <QC#15789>
                                String ajeInvLineAllocCdForAddl = getAjeInvLineAllocCdForAddl(hasDsContrProcAllocForAddl, SVC_INV_CHRG_TP.BASE_CHARGE, svcContrAddlChrgBllgTMsg);
                                // Add End   2016/11/10 <QC#15789>
                                List<BigDecimal> addlAllocPkList = getSvcContrBllgAllocPkForAddl(addlChrgBllgPk);
                                for (int j = 0; j < addlAllocPkList.size(); j++) {
                                    SVC_CONTR_BLLG_ALLOCTMsg svcContrBllgAllocTMsg = getSvcContrBllgAllocTMsg(addlAllocPkList.get(j));

                                    // Mod Start 2016/11/10 <QC#15789>
                                    // Create SVC_INV_LINE_ALLOC
                                    // START 2017/11/29 K.Kojima [QC#21918,MOD]
                                    // createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl);
                                    // START 2019/03/11 [QC#30675, MOD]
                                    // createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl, svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue(), dsContrTMsg.dsContrCatgCd.getValue());
                                    SVC_INV_LINE_ALLOCTMsg addlSvcInvLineAllocTMsg = createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl, svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue(), dsContrTMsg.dsContrCatgCd.getValue());
                                    if (addlSvcInvLineAllocTMsg == null) {
                                        Key key = new Key();
                                        key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                        key.add("SVC_CONTR_ADDL_CHRG_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue());
                                        addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE_ALLOC.TOC_CD", key.toString());
                                        rollback();
                                        continue SVC_INV;
                                    }
                                    // END 2019/03/11 [QC#30675, MOD]
                                    // END 2017/11/29 K.Kojima [QC#21918,MOD]
                                    // Mod End   2016/11/10 <QC#15789>
                                }
                                // Create SVC_INV_LINE_ADDL_CHRG
                                BigDecimal addlSvcInvLinePk = addlSvcInvLineTMsg.svcInvLinePk.getValue();
                                createSvcInvLineAddlChrg(addlSvcInvLinePk, svcContrBllgPk, svcContrAddlChrgBllgTMsg);

                                lineNum++;
                            }

                        }
                        // QC2536 start
                    }
                    // QC2536 end

                    // ----------------------------------------------------------------------
                    // Meter Charge
                    // ----------------------------------------------------------------------
                    // QC2536 start
                    if (ZYPConstant.FLG_OFF_N.equals(invSeptBaseUsgFlg) || (ZYPConstant.FLG_ON_Y.equals(invSeptBaseUsgFlg) && ZYPConstant.FLG_ON_Y.equals(mtrBllgFlg))) {
                        // QC2536 end
                        // Add Start 2018/01/26 QC#23419
                        if (hasValue(dsContrTMsg.dsContrEdiCd) && DS_CONTR_EDI.CFS.equals(dsContrTMsg.dsContrEdiCd.getValue())) {
                            if (ZYPConstant.FLG_ON_Y.equals(dsContrTMsg.usgChrgToLeaseCmpyFlg.getValue())) {
                                // No-AR
                                usgDsInvTpTMsg = noARDsInvTpTMsg;
                            }
                        }
                        // Add End 2018/01/26 QC#23419
                        // QC2973 start
                        List<List<SVC_INV_LINE_ALLOCTMsg>> svcInvLineAllocTMsgListList = new ArrayList<List<SVC_INV_LINE_ALLOCTMsg>>();
                        // QC2973 end

//                            // QC2848 start
//                            Map<String, String> svcContrBllgPkMap = new HashMap<String, String>();
//                            Map<String, SVC_INV_LINETMsg> svcInvLineTMsgMap = new HashMap<String, SVC_INV_LINETMsg>();
//                            BigDecimal svcInvLinePk = null;
//                            // QC2848 end

                        svcInvChrgTpCd = SVC_INV_CHRG_TP.METER_CHARGE;

                        SVC_CONTR_MTR_BLLGTMsgArray svcContrMtrBllgTMsgArray = getSvcContrMtrBllgList(svcContrBllgPk);
                        for (int i = 0; i < svcContrMtrBllgTMsgArray.length(); i++) {
//                                // QC2848 start
//                                if (svcContrBllgPkMap.size() != 0 && svcContrBllgPkMap.containsKey(svcContrBllgPk.toString())) {
//                                    lineNum--;
//                                } else {
//                                    svcInvLinePk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_SQ");
//                                }
//                                // QC2848 end

                            // QC2848 start
                            BigDecimal svcInvLinePk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_SQ");
                            // QC2848 end
                            String svcInvLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);

                            BigDecimal svcInvLineMtrPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_MTR_SQ");

                            SVC_CONTR_MTR_BLLGTMsg svcContrMtrBllgTMsg = svcContrMtrBllgTMsgArray.no(i);

                            BigDecimal totXsMtrChrgDealAmt = BigDecimal.ZERO;
                            BigDecimal totXsMtrChrgFuncAmt = BigDecimal.ZERO;

                            // ----------------------------------------------------------------------
                            // Create SVC_INV_LINE_XS_MTR
                            // ----------------------------------------------------------------------
                            SVC_CONTR_XS_MTR_BLLGTMsgArray svcContrXsMtrBllgTMsgArray = getSvcContrXsMtrBllgList(svcContrMtrBllgTMsg.svcContrMtrBllgPk.getValue());
                            for (int j = 0; j < svcContrXsMtrBllgTMsgArray.length(); j++) {

                                SVC_CONTR_XS_MTR_BLLGTMsg svcContrXsMtrBllgTMsg = svcContrXsMtrBllgTMsgArray.no(j);

                                BigDecimal svcInvLineXsMtrPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_XS_MTR_SQ");

                                BigDecimal xsMtrChrgDealAmt = svcContrXsMtrBllgTMsg.xsMtrChrgDealAmt.getValue();
                                BigDecimal xsMtrChrgFuncAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, xsMtrChrgDealAmt, funcCcyAftDeclPntDigitNum);

                                totXsMtrChrgDealAmt = totXsMtrChrgDealAmt.add(xsMtrChrgDealAmt);
                                totXsMtrChrgFuncAmt = totXsMtrChrgFuncAmt.add(xsMtrChrgFuncAmt);

                                SVC_INV_LINE_XS_MTRTMsg svcInvLineXsMtrTMsg = new SVC_INV_LINE_XS_MTRTMsg();
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.glblCmpyCd, glblCmpyCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcInvLineXsMtrPk, svcInvLineXsMtrPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcInvLinePk, svcInvLinePk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcInvNum, svcInvNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcInvLineNum, svcInvLineNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcInvLineMtrPk, svcInvLineMtrPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.dsContrBllgMtrPk, svcContrXsMtrBllgTMsg.dsContrBllgMtrPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.dsContrBllgMtrId, svcContrXsMtrBllgTMsg.dsContrBllgMtrId);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcContrXsMtrBllgPk, svcContrXsMtrBllgTMsg.svcContrXsMtrBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.svcContrMtrBllgPk, svcContrXsMtrBllgTMsg.svcContrMtrBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.contrXsCopyPk, svcContrXsMtrBllgTMsg.contrXsCopyPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.xsMtrCopyQty, svcContrXsMtrBllgTMsg.xsMtrCopyQty);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.xsMtrChrgDealAmt, xsMtrChrgDealAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.xsMtrChrgFuncAmt, xsMtrChrgFuncAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.ccyCd, svcContrXsMtrBllgTMsg.ccyCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.xsMtrAmtRate, svcContrXsMtrBllgTMsg.xsMtrAmtRate);
                                ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.xsMtrFromCopyQty, svcContrXsMtrBllgTMsg.xsMtrFromCopyQty);
                                // Mod Start 04/07/2016 <QC#6585>
                                if (hasValue(svcContrXsMtrBllgTMsg.contrXsCopyPk)) {
                                    BigDecimal origXsMtrFromCopy = getOrigXsMtrFormCopyQty(svcContrBllgTMsg.dsContrBllgSchdPk.getValue(), svcContrXsMtrBllgTMsg.contrXsCopyPk.getValue());
                                    ZYPEZDItemValueSetter.setValue(svcInvLineXsMtrTMsg.origXsMtrFromCopyQty, origXsMtrFromCopy);
                                }
                                // Mod End 04/07/2016 <QC#6585>

                                S21FastTBLAccessor.insert(svcInvLineXsMtrTMsg);
                                if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineXsMtrTMsg.getReturnCode())) {
                                    throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE_XS_MTR" });
                                }
                            }

                            // ----------------------------------------------------------------------
                            // Create SVC_INV_LINE_MTR
                            // ----------------------------------------------------------------------
                            SVC_INV_LINE_MTRTMsg svcInvLineMtrTMsg = new SVC_INV_LINE_MTRTMsg();
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.glblCmpyCd, glblCmpyCd);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcInvLineMtrPk, svcInvLineMtrPk);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcInvLinePk, svcInvLinePk);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcInvNum, svcInvNum);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcInvLineNum, svcInvLineNum);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.dsContrBllgMtrPk, svcContrMtrBllgTMsg.dsContrBllgMtrPk);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.dsContrBllgMtrId, svcContrMtrBllgTMsg.dsContrBllgMtrId);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcContrMtrBllgPk, svcContrMtrBllgTMsg.svcContrMtrBllgPk);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrChrgDealAmt, totXsMtrChrgDealAmt);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrChrgFuncAmt, totXsMtrChrgFuncAmt);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrEstFlg, svcContrMtrBllgTMsg.mtrEstFlg);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrCopyQty, svcContrMtrBllgTMsg.mtrCopyQty);
                            // QC2302 start
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.totCopyQty, svcContrMtrBllgTMsg.totCopyQty);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.testCopyQty, svcContrMtrBllgTMsg.testCopyQty);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.prevTotCopyQty, svcContrMtrBllgTMsg.prevTotCopyQty);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.bllgCopyQty, svcContrMtrBllgTMsg.bllgCopyQty);
                            // QC2302 end
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mdseCd, svcContrMtrBllgTMsg.mdseCd);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.ccyCd, svcContrMtrBllgTMsg.ccyCd);

                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.prevPhysMtrReadGrpSq, svcContrMtrBllgTMsg.prevPhysMtrReadGrpSq);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.svcPhysMtrReadGrpSq, svcContrMtrBllgTMsg.svcPhysMtrReadGrpSq);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.freeCopyCnt, svcContrMtrBllgTMsg.freeCopyCnt);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.usgFreeCopyCnt, svcContrMtrBllgTMsg.usgFreeCopyCnt);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.xsChrgTpCd, svcContrMtrBllgTMsg.xsChrgTpCd);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.rollOverRatio, svcContrMtrBllgTMsg.rollOverRatio);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.rollOverCnt, svcContrMtrBllgTMsg.rollOverCnt);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.copyInclQty, svcContrMtrBllgTMsg.copyInclQty);
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.aggrAdjCopyQty, svcContrMtrBllgTMsg.aggrAdjCopyQty);
                            // START 04/08/2016 T.Aoyagi [QC#6762, MOD]
                            // START 2016/03/15 T.Aoyagi [QC#3818, MOD]
//                            String mtrLbDescTxt = getMtrLbDescTxt(svcContrMtrBllgTMsg.svcPhysMtrReadGrpSq.getValue(), svcContrMtrBllgTMsg.svcContrBllgPk.getValue());
                            Map<String, String> mtrLbInfo = getMtrLbDescTxt(svcContrMtrBllgTMsg.dsContrBllgMtrPk.getValue());
                            if (mtrLbInfo != null) {
                            // END 2016/03/15 T.Aoyagi [QC#3818, MOD]
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrLbDescTxt, mtrLbInfo.get("MTR_LB_DESC_TXT"));
                                ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.mtrLbCd, mtrLbInfo.get("MTR_LB_CD"));
                            }
                            // END 04/08/2016 T.Aoyagi [QC#6762, MOD]
                            ZYPEZDItemValueSetter.setValue(svcInvLineMtrTMsg.contrMtrMultRate, svcContrMtrBllgTMsg.contrMtrMultRate);
                            svcInvLineMtrTMsg.prevMtrReadDt.clear();
                            svcInvLineMtrTMsg.mtrReadDt.clear();

                            S21FastTBLAccessor.insert(svcInvLineMtrTMsg);
                            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineMtrTMsg.getReturnCode())) {
                                throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE_MTR" });
                            }

                            // START 2018/04/26 K.Kojima [QC#23630,ADD]
                            // START 2018/06/05 K.Kojima [QC#21974,DEL]
                            // insertDsContrBllgMtrUsed(svcInvLineMtrTMsg, svcContrBllgTMsg, svcContrMtrBllgTMsg);
                            // END 2018/06/05 K.Kojima [QC#21974,DEL]
                            // END 2018/04/26 K.Kojima [QC#23630,ADD]

                            BigDecimal mtrNetDealAmt = totXsMtrChrgDealAmt;
                            BigDecimal mtrNetFuncAmt = totXsMtrChrgFuncAmt;

                            // START 2018/05/31 K.Kojima [QC#23685,DEL]
                            // NWZC036101PMsg taxApiPMsg = new NWZC036101PMsg();
                            // END 2018/05/31 K.Kojima [QC#23685,DEL]
                            String taxCalcGeoCd = "";
                            // START 2018/05/31 K.Kojima [QC#23685,MOD]
                            // BigDecimal mtrTaxRate;
                            // BigDecimal mtrTaxFuncAmt;
                            // BigDecimal mtrTaxDealAmt;
                            BigDecimal mtrTaxRate = BigDecimal.ZERO;
                            BigDecimal mtrTaxFuncAmt = BigDecimal.ZERO;
                            BigDecimal mtrTaxDealAmt = BigDecimal.ZERO;
                            // END 2018/05/31 K.Kojima [QC#23685,MOD]

                            // START 2018/05/31 K.Kojima [QC#23685,DEL]
                            // // Mod Start 08/31/2016 <QC#13529>
                            // // if (BigDecimal.ZERO.compareTo(mtrNetFuncAmt) == 0) {
                            // // Mod Start 2018/01/26 QC#23419
                            // // if (BigDecimal.ZERO.compareTo(mtrNetFuncAmt) == 0 || !FLG_ON_Y.equals(dsInvTpTMsg.taxCalcFlg.getValue())) {
                            // if (BigDecimal.ZERO.compareTo(mtrNetFuncAmt) == 0 || !FLG_ON_Y.equals(usgDsInvTpTMsg.taxCalcFlg.getValue())) {
                            // // Mod End 2018/01/26 QC#23419
                            // // Mod End   08/31/2016 <QC#13529>
                            //     mtrTaxRate = BigDecimal.ZERO;
                            //     mtrTaxFuncAmt = BigDecimal.ZERO;
                            //     mtrTaxDealAmt = BigDecimal.ZERO;
                            // } else {
                            //     // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
                            //     // taxApiPMsg = callTaxCalcAPIForUsg(dsContrDtlInfo, svcContrBllgTMsg, mtrNetFuncAmt);
                            //     // START 2017/09/27 K.Yamada [QC#21233, MOD]
                            //     // taxApiPMsg = callTaxCalcAPIForUsg(dsContrDtlInfo, svcContrBllgTMsg, mtrNetFuncAmt, svcInvNum);
                            //     taxApiPMsg = callTaxCalcAPIForUsg(dsContrDtlInfo, svcContrBllgTMsg, mtrNetFuncAmt, svcInvNum, invDt);
                            //     // END 2017/09/27 K.Yamada [QC#21233, MOD]
                            //     // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
                            // 
                            //     if (S21ApiUtil.isXxMsgId(taxApiPMsg)) {
                            //         Key key = new Key();
                            //         key.add("DS_CONTR_PK", dsContrPk);
                            //         key.add("DS_CONTR_TP_CD", dsContrTMsg.dsContrTpCd.getValue());
                            //         key.add("SVC_CONFIG_MSTR_PK", "");
                            //         key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                            //         key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                            //         key.add("SVC_INV_NUM", svcInvNum);
                            //         key.add("INV_DT", invDt);
                            //         key.add("SELL_TO_CUST_CD", sellToCustTMsg.sellToCustCd.getValue());
                            //         key.add("SHIP_TO_CUST_CD", shipToCustCd);
                            //         key.add("CTY_ADDR", shipToCustTMsg.ctyAddr.getValue());
                            //         key.add("ST_CD", shipToCustTMsg.stCd.getValue());
                            //         key.add("POST_CD", shipToCustTMsg.postCd.getValue());
                            //         key.add("SVC_INV_CHRG_TP_CD", svcInvChrgTpCd);
                            //         key.add("MTR_FUNC_AMT", mtrNetFuncAmt);
                            // 
                            //         List<String> msgIdList = S21ApiUtil.getXxMsgIdList(taxApiPMsg);
                            //         for (String msgId : msgIdList) {
                            //             addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0407E, "NWZC036101", S21MessageFunc.clspGetMessage(msgId), key.toString());
                            //         }
                            //         rollback();
                            //         // mod start 2017/01/19 CSA QC#16645
                            //         dsContrPkList.add(dsContrPk);
                            //         // mod end 2017/01/19 CSA QC#16645
                            //         continue SVC_INV;
                            //     }
                            //     taxCalcGeoCd = taxApiPMsg.taxCalculateOutputLine.no(0).taxAreaId.getValue();
                            //     mtrTaxRate = getTaxRate(taxApiPMsg);
                            //     mtrTaxFuncAmt = getTaxFuncAmt(taxApiPMsg).setScale(funcCcyAftDeclPntDigitNum.intValueExact(), RoundingMode.HALF_UP);
                            //     mtrTaxDealAmt = exchToDealAmt(actlExchRate, dealCcyAcctArthTpCd, mtrTaxFuncAmt, dealCcyAftDeclPntDigitNum);
                            // }
                            // END 2018/05/31 K.Kojima [QC#23685,DEL]

                            List<SVC_INV_LINE_ALLOCTMsg> svcInvLineAllocTMsgList = new ArrayList<SVC_INV_LINE_ALLOCTMsg>();

                            BigDecimal mtrDiscDealAmt = BigDecimal.ZERO;
                            BigDecimal mtrDiscFuncAmt = BigDecimal.ZERO;

                            // Add Start 2016/11/10 <QC#15789>
                            String ajeInvLineAllocCd = getAjeInvLineAllocCdForMtr(hasDsContrProcAllocForMtr, dsContrDtlInfo);
                            // Add End   2016/11/10 <QC#15789>
                            SVC_CONTR_BLLG_ALLOCTMsgArray svcContrBllgAllogTMsgArray = getSvcContrMtrBllgAllocList(svcContrMtrBllgTMsg.svcContrMtrBllgPk.getValue());
                            for (int j = 0; j < svcContrBllgAllogTMsgArray.length(); j++) {

                                SVC_CONTR_BLLG_ALLOCTMsg svcContrBllgAllocTMsg = svcContrBllgAllogTMsgArray.no(j);

                                BigDecimal allocDealGrsTotPrcAmt = svcContrBllgAllocTMsg.dealGrsTotPrcAmt.getValue();
                                BigDecimal allocFuncGrsTotPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealGrsTotPrcAmt, funcCcyAftDeclPntDigitNum);
                                BigDecimal allocDealNetUnitPrcAmt = svcContrBllgAllocTMsg.dealNetUnitPrcAmt.getValue();
                                BigDecimal allocFuncNetUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealNetUnitPrcAmt, funcCcyAftDeclPntDigitNum);
                                BigDecimal allocDealGrsUnitPrcAmt = svcContrBllgAllocTMsg.dealGrsUnitPrcAmt.getValue();
                                BigDecimal allocFuncGrsUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealGrsUnitPrcAmt, funcCcyAftDeclPntDigitNum);
                                BigDecimal allocInvLineDealNetAmt = svcContrBllgAllocTMsg.invLineDealNetAmt.getValue();
                                BigDecimal allocInvLineFuncNetAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocInvLineDealNetAmt, funcCcyAftDeclPntDigitNum);
                                // QC2417 start
                                // dealGrsTotPrcAmt is not include
                                // dealDiscUnitPrcAmt.
                                allocDealGrsTotPrcAmt = allocDealGrsTotPrcAmt.add(svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue());
                                // funcGrsTotPrcAmt is not include
                                // funcDiscUnitPrcAmt.
                                allocFuncGrsTotPrcAmt = allocFuncGrsTotPrcAmt.add(exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue(), funcCcyAftDeclPntDigitNum));
                                // QC2417 end

                                BigDecimal allocDealDiscUnitPrcAmt = svcContrBllgAllocTMsg.dealDiscUnitPrcAmt.getValue();
                                BigDecimal allocFuncDiscUnitPrcAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, allocDealDiscUnitPrcAmt, funcCcyAftDeclPntDigitNum);

                                // SVC_CONTR_MTR_BLLG: DISC_AMT = 0
                                // SVC_CONTR_XS_MTR_BLLG: DISC_AMT = 0
                                // but SVC_CONTR_BLLG_ALLOC has
                                // DISC_AMT
                                mtrDiscDealAmt = mtrDiscDealAmt.add(allocDealDiscUnitPrcAmt);
                                mtrDiscFuncAmt = mtrDiscFuncAmt.add(allocFuncDiscUnitPrcAmt);

                                // QC2973 start
                                // BigDecimal svcInvLineAllocPk =
                                // ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_ALLOC_SQ");
                                // QC2848 start
                                // String svcInvLineAllocNum =
                                // String.format(SVC_INV_LINE_ALLOC_NUM_FMT,
                                // j + 1);
                                // int num = 0;
                                // if
                                // (svcContrBllgPkMap.containsKey(svcContrBllgPk.toString()))
                                // {
                                // num =
                                // Integer.parseInt(svcContrBllgPkMap.get(svcContrBllgPk.toString()))
                                // + j + 1;
                                // } else {
                                // num = j + 1;
                                // }
                                // String svcInvLineAllocNum =
                                // String.format(SVC_INV_LINE_ALLOC_NUM_FMT,
                                // num);
                                // QC2848 end
                                String svcInvLineAllocNum = String.format(SVC_INV_LINE_ALLOC_NUM_FMT, j + 1);
                                // QC2973 end

                                SVC_INV_LINE_ALLOCTMsg svcInvLineAllocTMsg = new SVC_INV_LINE_ALLOCTMsg();
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.glblCmpyCd, glblCmpyCd);
                                // QC2973 start
                                // ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineAllocPk,
                                // svcInvLineAllocPk);
                                // QC2973 end
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLinePk, svcInvLinePk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvNum, svcInvNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineNum, svcInvLineNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineAllocNum, svcInvLineAllocNum);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.contrPrcAllocTpCd, svcContrBllgAllocTMsg.contrPrcAllocTpCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.intgMdseCd, svcContrBllgAllocTMsg.intgMdseCd);
                                // START 2017/11/29 K.Kojima [QC#21918,MOD]
                                // ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.tocCd, svcContrBllgAllocTMsg.tocCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.tocCd, getSalesRep((BigDecimal) dsContrDtlInfo.get("SVC_MACH_MSTR_PK")));
                                // END 2017/11/29 K.Kojima [QC#21918,MOD]
                                // START 2019/03/11 [QC#30675, ADD]
                                if (!hasValue(svcInvLineAllocTMsg.tocCd)) {
                                    Key key = new Key();
                                    key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                    key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE_ALLOC.TOC_CD", key.toString());
                                    rollback();
                                    continue SVC_INV;
                                }
                                // END 2019/03/11 [QC#30675, ADD]
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.slsAllocRate, svcContrBllgAllocTMsg.slsAllocRate);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealGrsTotPrcAmt, allocDealGrsTotPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcGrsTotPrcAmt, allocFuncGrsTotPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealNetUnitPrcAmt, allocDealNetUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcNetUnitPrcAmt, allocFuncNetUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealGrsUnitPrcAmt, allocDealGrsUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcGrsUnitPrcAmt, allocFuncGrsUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineDealNetAmt, allocInvLineDealNetAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineFuncNetAmt, allocInvLineFuncNetAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineDealTaxAmt, BigDecimal.ZERO);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineFuncTaxAmt, BigDecimal.ZERO);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealDiscUnitPrcAmt, allocDealDiscUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcDiscUnitPrcAmt, allocFuncDiscUnitPrcAmt);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaCmpyCd, svcContrBllgAllocTMsg.coaCmpyCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaAfflCd, svcContrBllgAllocTMsg.coaAfflCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaBrCd, svcContrBllgAllocTMsg.coaBrCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaChCd, svcContrBllgAllocTMsg.coaChCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaCcCd, svcContrBllgAllocTMsg.coaCcCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaAcctCd, svcContrBllgAllocTMsg.coaAcctCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaProdCd, svcContrBllgAllocTMsg.coaProdCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaProjCd, svcContrBllgAllocTMsg.coaProjCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.coaExtnCd, svcContrBllgAllocTMsg.coaExtnCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.ccyCd, svcContrBllgAllocTMsg.ccyCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrBllgAllocPk, svcContrBllgAllocTMsg.svcContrBllgAllocPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrBaseBllgPk, svcContrBllgAllocTMsg.svcContrBaseBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrMtrBllgPk, svcContrBllgAllocTMsg.svcContrMtrBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcContrAddlChrgBllgPk, svcContrBllgAllocTMsg.svcContrAddlChrgBllgPk);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.trxCd, svcContrBllgAllocTMsg.trxCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.trxRsnCd, svcContrBllgAllocTMsg.trxRsnCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dfrdAcctgRuleCd, svcContrBllgAllocTMsg.dfrdAcctgRuleCd);
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dfrdAcctgRuleDurnAot, svcContrBllgAllocTMsg.dfrdAcctgRuleDurnAot);
                                // Add Start 2016/11/10 <QC#15789>
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.ajeInvLineAllocCd, ajeInvLineAllocCd);
                                // Add End   2016/11/10 <QC#15789>
                                // START 2016/06/20 T.Aoyagi [QC#9907, ADD]
                                ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineSplTpCd, this.invLineSplTpMap.get(svcContrBllgAllocTMsg.svcContrBllgAllocPk.getValue()));
                                // END 2016/06/20 T.Aoyagi [QC#9907, ADD]

                                svcInvLineAllocTMsgList.add(svcInvLineAllocTMsg);
                            }

                            BigDecimal mtrSlsDealAmt = mtrNetDealAmt.add(mtrDiscDealAmt);
                            BigDecimal mtrSlsFuncAmt = exchToFuncAmt(actlExchRate, dealCcyAcctArthTpCd, mtrSlsDealAmt, funcCcyAftDeclPntDigitNum);

                            invTotDealSlsAmt = invTotDealSlsAmt.add(mtrSlsDealAmt);
                            invTotFuncSlsAmt = invTotFuncSlsAmt.add(mtrSlsFuncAmt);
                            invTotDealTaxAmt = invTotDealTaxAmt.add(mtrTaxDealAmt);
                            invTotFuncTaxAmt = invTotFuncTaxAmt.add(mtrTaxFuncAmt);
                            invTotDealDiscAmt = invTotDealDiscAmt.add(mtrDiscDealAmt);
                            invTotFuncDiscAmt = invTotFuncDiscAmt.add(mtrDiscFuncAmt);
                            invTotDealNetAmt = invTotDealNetAmt.add(mtrNetDealAmt);
                            invTotFuncNetAmt = invTotFuncNetAmt.add(mtrNetFuncAmt);

                            // ----------------------------------------------------------------------
                            // Adjusting SVC_INV_LINE_ALLOC Fractions
                            // ----------------------------------------------------------------------
                            adjSvcInvLineAllocFrac(svcInvLineAllocTMsgList, mtrSlsDealAmt, mtrSlsFuncAmt, mtrDiscDealAmt, mtrDiscFuncAmt, mtrNetDealAmt, mtrNetFuncAmt, mtrTaxDealAmt, mtrTaxFuncAmt);

                            // ----------------------------------------------------------------------
                            // Create SVC_INV_LINE_ALLOC
                            // ----------------------------------------------------------------------
                            // QC2973 start
                            // for (SVC_INV_LINE_ALLOCTMsg
                            // svcInvLineAllocTMsg :
                            // svcInvLineAllocTMsgList) {
                            // S21FastTBLAccessor.insert(svcInvLineAllocTMsg);
                            // if
                            // (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineAllocTMsg.getReturnCode()))
                            // {
                            // throw new S21AbendException(NSZM0398E,
                            // new String[] {"SVC_INV_LINE_ALLOC" });
                            // }
                            // }
                            svcInvLineAllocTMsgListList.add(svcInvLineAllocTMsgList);
                            // QC2973 end

                            // ----------------------------------------------------------------------
                            // Create SVC_INV_LINE
                            // ----------------------------------------------------------------------
                            // QC2415 start
                            // SVC_INV_LINETMsg svcInvLineTMsg =
                            // getSvcInvLineTMsg(svcContrBllgPk,
                            // svcContrBllgFromDt, svcContrBllgThruDt,
                            // shipToCustCd, svcInvNum, svcInvLinePk,
                            // svcInvLineNum, svcInvChrgTpCd, mdseCd,
                            // mdseNm, mdlId, mdlNm,
                            // mtrTaxRate, mtrSlsDealAmt,
                            // mtrSlsFuncAmt,
                            // mtrDiscDealAmt, mtrDiscFuncAmt,
                            // mtrNetDealAmt, mtrNetFuncAmt,
                            // mtrTaxDealAmt, mtrTaxFuncAmt);
                            SVC_INV_LINETMsg svcInvLineTMsg = getSvcInvLineTMsg(shipToCustCd, svcInvNum, svcInvLinePk, svcInvLineNum, svcInvChrgTpCd, mdlNm,
                                    mtrTaxRate, mtrSlsDealAmt, mtrSlsFuncAmt, mtrDiscDealAmt, mtrDiscFuncAmt, mtrNetDealAmt, mtrNetFuncAmt, mtrTaxDealAmt, mtrTaxFuncAmt, taxCalcGeoCd,
                                    dsContrDtlInfo, dsContrTMsg, svcContrBllgTMsg, null, svcContrMtrBllgTMsg);
                            // QC2415 end

                            // START 2019/03/11 [QC#30675, ADD]
                            if (svcInvLineTMsg == null) {
                                Key key = new Key();
                                key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                key.add("SVC_MACH_MSTR_PK", svcContrBllgTMsg.svcMachMstrPk.getValue());
                                addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE.SLS_REP_TOC_CD", key.toString());
                                rollback();
                                continue SVC_INV;
                            }
                            // END 2019/03/11 [QC#30675, ADD]
                            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrPk, svcContrBllgTMsg.dsContrPk);
                            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrDtlPk, svcContrBllgTMsg.dsContrDtlPk);
                            svcInvLineTMsg.svcContrBaseBllgPk.clear();

                            // add start 2018/08/09 QC#27329-3
                            if (INV_TP.CREDIT_MEMO.equals(svcContrBllgTMsg.invTpCd.getValue()) && hasValue(svcContrBllgTMsg.origSvcInvNum)) {
                                setOrigSvcInvLineInfo(svcInvLineTMsg, svcContrBllgTMsg.origSvcInvNum.getValue(), svcContrBllgTMsg.dsContrBllgSchdPk.getValue());
                            }
                            // add end 2018/08/09 QC#27329-3

//                               // QC2848 start
                            S21FastTBLAccessor.insert(svcInvLineTMsg);
                            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineTMsg.getReturnCode())) {
                                throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE" });
                            }

//                                if (svcContrBllgPkMap.containsKey(svcContrBllgPk.toString())) {
//                                    int count = Integer.parseInt(svcContrBllgPkMap.get(svcContrBllgPk.toString())) + svcContrBllgAllogTMsgArray.length();
//                                    svcContrBllgPkMap.put(svcContrBllgPk.toString(), String.valueOf(count));
//                                    SVC_INV_LINETMsg updateSvcInvLineTMsg = (SVC_INV_LINETMsg) svcInvLineTMsgMap.get(svcContrBllgPk.toString());
//                                    updateSvcInvLineTMsg(updateSvcInvLineTMsg, svcInvLineTMsg);
//                                } else {
//                                    svcContrBllgPkMap.put(svcContrBllgPk.toString(), String.valueOf(svcContrBllgAllogTMsgArray.length()));
//                                    svcInvLineTMsgMap.put(svcContrBllgPk.toString(), svcInvLineTMsg);
//                                }
//                                // QC2848 end

                            // START 2018/05/31 K.Kojima [QC#23685,DEL]
                            // // SVC_INV_LINE_TAX_DTL
                            // createSvcInvLineTaxDtl(svcInvLinePk, (String) dsContrDtlInfo.get("CCY_CD"), taxApiPMsg);
                            // END 2018/05/31 K.Kojima [QC#23685,DEL]

                            lineNum++;

                            // ----------------------------------------------------------------------
                            // Additional Charge
                            // ----------------------------------------------------------------------
                            List<Map<String, BigDecimal>> addlChrgBllgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                            for (Map<String, BigDecimal> addlChrgBllgInfo : addlChrgBllgInfoList) {

                                BigDecimal addlSvcContrBllgPk = addlChrgBllgInfo.get("SVC_CONTR_BLLG_PK");
                                SVC_CONTR_BLLGTMsg addlSvcContrBllgTMsg = getSvcContrBllg(addlSvcContrBllgPk);
                                BigDecimal addlChrgBllgPk = addlChrgBllgInfo.get("SVC_CONTR_ADDL_CHRG_BLLG_PK");
                                SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg = getSvcContrAddlChrgBllgTMsg(addlChrgBllgPk);
                                String addlSvcInvLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);
                                // tax API
                                BigDecimal taxDealAmt = BigDecimal.ZERO;
                                BigDecimal taxFuncAmt = BigDecimal.ZERO;
                                // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                // // Mod Start 08/31/2016 <QC#13529>
                                // NWZC036101PMsg addlTaxApiPMsg = null;
                                // // Mod Start 2018/01/26 QC#23419
                                // // if (FLG_ON_Y.equals(dsInvTpTMsg.taxCalcFlg.getValue())) {
                                // if (FLG_ON_Y.equals(usgDsInvTpTMsg.taxCalcFlg.getValue())) {
                                // // Mod End 2018/01/26 QC#23419
                                //     // Mod Start 04/04/2016 <QC#6492>
                                //     // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
                                //     // addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue());
                                //     // START 2017/09/27 K.Yamada [QC#21233, MOD]
                                //     // addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue(), svcInvNum);
                                //     addlTaxApiPMsg = callTaxCalcAPIForAddl(dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue(), svcInvNum, invDt);
                                //     // END 2017/09/27 K.Yamada [QC#21233, MOD]
                                //     // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
                                //     // Mod End 04/04/2016 <QC#6492>
                                // 
                                //     if (S21ApiUtil.isXxMsgId(addlTaxApiPMsg)) {
                                //         Key key = new Key();
                                //         key.add("DS_CONTR_PK", dsContrPk);
                                //         key.add("DS_CONTR_TP_CD", dsContrTMsg.dsContrTpCd.getValue());
                                //         key.add("SVC_CONFIG_MSTR_PK", "");
                                //         key.add("SVC_MACH_MSTR_PK", dsContrDtlInfo.get("SVC_MACH_MSTR_PK"));
                                //         // START 2016/12/13 N.Arai [QC#16400, MOD]
                                //         //key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                                //         key.add("SVC_CONTR_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrBllgPk.getValue());
                                //         // END 2016/12/13 N.Arai [QC#16400, MOD]
                                //         key.add("SVC_INV_NUM", svcInvNum);
                                //         key.add("INV_DT", invDt);
                                //         key.add("SELL_TO_CUST_CD", sellToCustTMsg.sellToCustCd.getValue());
                                //         key.add("SHIP_TO_CUST_CD", shipToCustCd);
                                //         key.add("CTY_ADDR", shipToCustTMsg.ctyAddr.getValue());
                                //         key.add("ST_CD", shipToCustTMsg.stCd.getValue());
                                //         key.add("POST_CD", shipToCustTMsg.postCd.getValue());
                                //         key.add("SVC_INV_CHRG_TP_CD", svcInvChrgTpCd);
                                //         key.add("FUNC_AMT", svcContrAddlChrgBllgTMsg.addlFuncPrcAmt.getValue());
                                // 
                                //         List<String> msgIdList = S21ApiUtil.getXxMsgIdList(addlTaxApiPMsg);
                                //         for (String msgId : msgIdList) {
                                //             addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0407E, "NWZC036101", S21MessageFunc.clspGetMessage(msgId), key.toString());
                                //         }
                                //         rollback();
                                //         // mod start 2017/01/19 CSA QC#16645
                                //         dsContrPkList.add(dsContrPk);
                                //         // mod end 2017/01/19 CSA QC#16645
                                //         continue SVC_INV;
                                //     }
                                //     taxFuncAmt = getTaxFuncAmt(addlTaxApiPMsg).setScale(funcCcyAftDeclPntDigitNum.intValueExact(), RoundingMode.HALF_UP);
                                //     taxDealAmt = exchToDealAmt(actlExchRate, dealCcyAcctArthTpCd, taxFuncAmt, dealCcyAftDeclPntDigitNum);
                                // }
                                // // Mod End   08/31/2016 <QC#13529>
                                // END 2018/05/31 K.Kojima [QC#23685,DEL]

                                // Create SVC_INV_LINE
                                //Mod Start 05/25/2016 <QC#7636>
                                // START 2017/11/17 K.Kojima [QC#21918,MOD]
                                // SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, addlTaxApiPMsg, taxDealAmt, taxFuncAmt, shipToCustCd);
                                // START 2018/05/31 K.Kojima [QC#23685,MOD]
                                // SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, addlTaxApiPMsg, taxDealAmt, taxFuncAmt, shipToCustCd, dsContrTMsg);
                                SVC_INV_LINETMsg addlSvcInvLineTMsg = createSvcInvLineForAddl(svcInvNum, addlSvcInvLineNum, svcInvLinePk, dsContrDtlInfo, addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg, taxDealAmt, taxFuncAmt, shipToCustCd, dsContrTMsg);
                                // END 2018/05/31 K.Kojima [QC#23685,MOD]
                                // END 2017/11/17 K.Kojima [QC#21918,MOD]
                                //Mod End   05/25/2016 <QC#7636>
                                // START 2019/03/11 [QC#30675, ADD]
                                if (addlSvcInvLineTMsg == null) {
                                    Key key = new Key();
                                    key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                    key.add("SVC_CONTR_ADDL_CHRG_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue());
                                    addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE.SLS_REP_TOC_CD", key.toString());
                                    rollback();
                                    continue SVC_INV;
                                }
                                // END 2019/03/11 [QC#30675, ADD]

                                // Add Start 08/08/2016 <QC#8293>
                                invTotDealSlsAmt = invTotDealSlsAmt.add(addlSvcInvLineTMsg.invLineDealSlsAmt.getValue());
                                invTotFuncSlsAmt = invTotFuncSlsAmt.add(addlSvcInvLineTMsg.invLineFuncSlsAmt.getValue());
                                invTotDealTaxAmt = invTotDealTaxAmt.add(addlSvcInvLineTMsg.invLineDealTaxAmt.getValue());
                                invTotFuncTaxAmt = invTotFuncTaxAmt.add(addlSvcInvLineTMsg.invLineFuncTaxAmt.getValue());
                                invTotDealDiscAmt = invTotDealDiscAmt.add(addlSvcInvLineTMsg.invLineDealDiscAmt.getValue());
                                invTotFuncDiscAmt = invTotFuncDiscAmt.add(addlSvcInvLineTMsg.invLineFuncDiscAmt.getValue());
                                invTotDealNetAmt = invTotDealNetAmt.add(addlSvcInvLineTMsg.invLineDealNetAmt.getValue());
                                invTotFuncNetAmt = invTotFuncNetAmt.add(addlSvcInvLineTMsg.invLineFuncNetAmt.getValue());
                                // Add End   08/08/2016 <QC#8293>
                                // START 2018/05/31 K.Kojima [QC#23685,DEL]
                                // createSvcInvLineTaxDtl(addlSvcInvLineTMsg.svcInvLinePk.getValue(), (String) dsContrDtlInfo.get("CCY_CD"), addlTaxApiPMsg);
                                // END 2018/05/31 K.Kojima [QC#23685,DEL]

                                // Add Start 2016/11/10 <QC#15789>
                                String ajeInvLineAllocCdForAddl = getAjeInvLineAllocCdForAddl(hasDsContrProcAllocForAddl, SVC_INV_CHRG_TP.METER_CHARGE, svcContrAddlChrgBllgTMsg);
                                // Add End   2016/11/10 <QC#15789>
                                List<BigDecimal> addlAllocPkList = getSvcContrBllgAllocPkForAddl(addlChrgBllgPk);
                                for (int j = 0; j < addlAllocPkList.size(); j++) {
                                    SVC_CONTR_BLLG_ALLOCTMsg svcContrBllgAllocTMsg = getSvcContrBllgAllocTMsg(addlAllocPkList.get(j));

                                    // Mod Start 2016/11/10 <QC#15789>
                                    // Create SVC_INV_LINE_ALLOC
                                    // START 2017/11/29 K.Kojima [QC#21918,MOD]
                                    // createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl);
                                    // START 2019/03/11 [QC#30675, MOD]
                                    // createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl, svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue(), dsContrTMsg.dsContrCatgCd.getValue());
                                    SVC_INV_LINE_ALLOCTMsg addlSvcInvLineAllocTMsg = createSvcInvLIneAllocForAddl(j, addlSvcInvLineTMsg, svcContrBllgAllocTMsg, ajeInvLineAllocCdForAddl, svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue(), dsContrTMsg.dsContrCatgCd.getValue());
                                    if (addlSvcInvLineAllocTMsg == null) {
                                        Key key = new Key();
                                        key.add("DS_CONTR_DTL_PK", svcContrBllgTMsg.dsContrDtlPk.getValue());
                                        key.add("SVC_CONTR_ADDL_CHRG_BLLG_PK", svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue());
                                        addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0401E, "SVC_INV_LINE_ALLOC.TOC_CD", key.toString());
                                        rollback();
                                        continue SVC_INV;
                                    }
                                    // END 2019/03/11 [QC#30675, MOD]
                                    // END 2017/11/29 K.Kojima [QC#21918,MOD]
                                    // Mod End   2016/11/10 <QC#15789>
                                }
                                // Create SVC_INV_LINE_ADDL_CHRG
                                BigDecimal addlSvcInvLinePk = addlSvcInvLineTMsg.svcInvLinePk.getValue();
                                createSvcInvLineAddlChrg(addlSvcInvLinePk, svcContrBllgPk, svcContrAddlChrgBllgTMsg);

                                lineNum++;
                            }

                        }
                        // QC2973 start
                        List<SVC_INV_LINE_ALLOCTMsg> svcInvLineAllocTMsgList = mergeSvcInvLineAllocTMsg(svcInvLineAllocTMsgListList);
                        for (SVC_INV_LINE_ALLOCTMsg svcInvLineAllocTMsg : svcInvLineAllocTMsgList) {
                            S21FastTBLAccessor.insert(svcInvLineAllocTMsg);
                            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineAllocTMsg.getReturnCode())) {
                                throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE_ALLOC" });
                            }
                        }
                        // QC2973 end

//                            // QC2848 start
//                            Iterator<SVC_INV_LINETMsg> ite = svcInvLineTMsgMap.values().iterator();
//                            while (ite.hasNext()) {
//                                SVC_INV_LINETMsg svcInvLineTMsg = ite.next();
//                                S21FastTBLAccessor.insert(svcInvLineTMsg);
//                                if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineTMsg.getReturnCode())) {
//                                    throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE" });
//                                }
//                            }
//                            // QC2848 end

                        // QC2536 start
                    }
                    // QC2536 end
                }

                // ----------------------------------------------------------------------
                // SVC_INV
                // ----------------------------------------------------------------------
                // Del Start 2018/01/24 QC#23684 Temporarily Fixed
//              BigDecimal svcInvPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_SQ");
                // Del End 2018/01/24 QC#23684 Temporarily Fixed

                // 2(15) Create SVC_INV
                SVC_INVTMsg svcInvTMsg = new SVC_INVTMsg();
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.glblCmpyCd, glblCmpyCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvPk, svcInvPk);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvNum, svcInvNum);
                svcInvTMsg.svcSmryInvNum.clear();
                svcInvTMsg.fsrNum.clear();
                svcInvTMsg.fsrVisitNum.clear();
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invDt, invDt);

//                    // 2(13) INV_TP
//                    String invTpCd;
//                    if (invTotDealNetAmt.compareTo(BigDecimal.ZERO) < 0) {
//                        invTpCd = INV_TP.CREDIT_MEMO;
//                    } else {
//                        invTpCd = INV_TP.INVOICE;
//                    }
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTpCd, mainSvcContrBllgTMsg.invTpCd);

                ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvStsCd, SVC_INV_STS.PRINTED);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvSrcTpCd, SVC_INV_SRC_TP.CONTRACT);
                svcInvTMsg.bllgPerFromDt.clear();
                svcInvTMsg.bllgPerToDt.clear();
                svcInvTMsg.sellToCustCd.clear();
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCustCd, mainSvcContrBllgTMsg.billToCustCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.shipToCustCd, mainShipToCustTMsg.shipToCustCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.dealCcyCd, dsContrTMsg.ccyCd);
                svcInvTMsg.mdseCd.clear();
                svcInvTMsg.svcMachMstrPk.clear();
                svcInvTMsg.mdseNm.clear();
                svcInvTMsg.mdlId.clear();
                svcInvTMsg.mdlNm.clear();
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ccyExchRate, acctDlyActlExchRatesTMsg.actlExchRate);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotDealSlsAmt, invTotDealSlsAmt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotFuncSlsAmt, invTotFuncSlsAmt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotDealTaxAmt, invTotDealTaxAmt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotFuncTaxAmt, invTotFuncTaxAmt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotDealDiscAmt, invTotDealDiscAmt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotFuncDiscAmt, invTotFuncDiscAmt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotDealNetAmt, invTotDealNetAmt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invTotFuncNetAmt, invTotFuncNetAmt);
                svcInvTMsg.techCd.clear();
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsContrPk, dsContrPk);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsContrNum, dsContrTMsg.dsContrNum);
                svcInvTMsg.dsContrDtlPk.clear();
                svcInvTMsg.serNum.clear();
                // add start 2016/07/27 T.Aoyagi QC#10390
                if (hasValue(mainSvcContrBllgTMsg.svcCrRebilPk)) {
                    setPmtTermInfo(svcInvTMsg, mainSvcContrBllgTMsg);
                } else {
                // add end 2016/07/27 T.Aoyagi QC#10390
                    // mod start 2019/05/10 K.Fujimoto QC#50296
                    // ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermCashDiscCd, dsContrTMsg.pmtTermCashDiscCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermCashDiscCd, pmtTermCashDiscTMsg.pmtTermCashDiscCd);
                    // mod end 2019/05/10 K.Fujimoto QC#50296
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermCd, pmtTermTMsg.pmtTermCd);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermCashDiscDescTxt, pmtTermCashDiscTMsg.pmtTermCashDiscDescTxt);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermStartDt, pmtTermStartDt);
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.invDueDt, invDueDt);
                // add start 2016/07/27 T.Aoyagi QC#10390
                }
                // add end 2016/07/27 T.Aoyagi QC#10390
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.remToLocNm, remToTMsg.locNm);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.remToAddlLocNm, remToTMsg.addlLocNm);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.remId, remToTMsg.remId);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcNm, glblCmpyTMsg.glblCmpyNm);
                //Del Start 02/04/2016 <QC#3947>
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcBrCd, brTMsg.brCd);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcFirstLineAddr, brTMsg.firstLineAddr);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcScdLineAddr, brTMsg.scdLineAddr);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcThirdLineAddr, brTMsg.thirdLineAddr);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcFrthLineAddr, brTMsg.frthLineAddr);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcCtyAddr, brTMsg.ctyAddr);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcStCd, brTMsg.stCd);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcProvNm, brTMsg.provNm);
//                if (ofcCntyTMsg == null) {
//                    svcInvTMsg.ofcCntyNm.clear();
//                } else {
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcCntyNm, ofcCntyTMsg.cntyNm);
//                }
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcPostCd, brTMsg.postCd);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcCtryCd, brTMsg.ctryCd);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcTelNum, brTMsg.telNum);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcFaxNum, brTMsg.faxNum);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcLocNm, brTMsg.locNm);
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ofcAddlLocNm, brTMsg.addlLocNm);
                //Del End   02/04/2016 <QC#3947>
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToLocNm, sellToCustTMsg.locNm);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToAddlLocNm, sellToCustTMsg.addlLocNm);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToFirstLineAddr, sellToCustTMsg.firstLineAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToScdLineAddr, sellToCustTMsg.scdLineAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToThirdLineAddr, sellToCustTMsg.thirdLineAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToFrthLineAddr, sellToCustTMsg.frthLineAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToCtyAddr, sellToCustTMsg.ctyAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToProvNm, sellToCustTMsg.provNm);
                if (sellToCntyTMsg == null) {
                    svcInvTMsg.sellToCntyNm.clear();
                } else {
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToCntyNm, sellToCntyTMsg.cntyNm);
                }
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToStCd, sellToCustTMsg.stCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToPostCd, sellToCustTMsg.postCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToCtryCd, sellToCustTMsg.ctryCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToFirstRefCmntTxt, sellToCustTMsg.firstRefCmntTxt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToScdRefCmntTxt, sellToCustTMsg.scdRefCmntTxt);

                SVC_CR_REBIL_DTLTMsg svcCrRebilDtlTMsg = getSvcCrRebilDtlTMsg(mainSvcContrBllgTMsg.svcCrRebilDtlPk.getValue());
                String invPrintStsCd = ZYPConstant.FLG_ON_1;
                if (svcCrRebilDtlTMsg != null) {
                    if (ZYPConstant.FLG_OFF_N.equals(svcCrRebilDtlTMsg.invPrintFlg)) {
                        invPrintStsCd = PROCESSED_2;
                    }
                }
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invPrintStsCd, invPrintStsCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invMlSendStsCd, PROCESSED_2);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invEdiSendStsCd, PROCESSED_2);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invFaxSendStsCd, PROCESSED_2);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.invEmlSendStsCd, PROCESSED_2);

                ZYPEZDItemValueSetter.setValue(svcInvTMsg.origSvcInvNum, mainSvcContrBllgTMsg.origSvcInvNum);
                svcInvTMsg.svcInvRefNum.clear();
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvOmLinkFlg, ZYPConstant.FLG_OFF_N);
                // Mod Start 2019/01/25 QC#29689
                // Mod Start 2019/01/21 QC#26928
                Map<String, Object> crCardPoInfo = getDsContrCrCardPo(mainSvcContrBllgTMsg.dsContrPk.getValue()
                                                                , mainSvcContrBllgTMsg.dsContrDtlPk.getValue()
                // START 2016/10/18 T.Kanasaka [QC#13009, MOD]
//                                                                , mainSvcContrBllgTMsg.dsContrBllgMtrPk.getValue());
                                                                , mainSvcContrBllgTMsg.dsContrBllgMtrPk.getValue()
                                                                , dsContrTMsg.pmtTermCashDiscCd.getValue()
                                                                , mainSvcContrBllgTMsg.svcContrBllgThruDt.getValue()
                // START 2023/08/30 [QC#61805,ADD]
                                                                , mainSvcContrBllgTMsg.svcContrBllgFromDt.getValue()
                // END 2023/08/30 [QC#61805,ADD]
                                                                , null);
                // END 2016/10/18 T.Kanasaka [QC#13009, MOD]
                // Mod End 2019/01/21 QC#26928
                // Mod End 2019/01/25 QC#29689
                if (crCardPoInfo != null) {
                    // START 2016/06/15 T.Kanasaka [QC#9869, MOD]
//                    if (dsContrTMsg.custPoNum.getValue().equals((String) crCardPoInfo.get("CUST_PO_NUM"))) {
//                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.custIssPoNum, dsContrTMsg.custPoNum);
//                    }
//                    if (dsContrTMsg.poDt.getValue().equals((String) crCardPoInfo.get("PO_DT"))) {
//                        ZYPEZDItemValueSetter.setValue(svcInvTMsg.custIssPoDt, dsContrTMsg.poDt);
//                    }
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.custIssPoNum, (String) crCardPoInfo.get("CUST_PO_NUM"));
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.custIssPoDt, (String) crCardPoInfo.get("PO_DT"));
                    // END 2016/06/15 T.Kanasaka [QC#9869, MOD]
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.crCardCustRefNum, (String) crCardPoInfo.get("CR_CARD_CUST_REF_NUM"));
                }

                ZYPEZDItemValueSetter.setValue(svcInvTMsg.manCratInvFlg, ZYPConstant.FLG_OFF_N);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.slsSmryCratCpltFlg, ZYPConstant.FLG_OFF_N);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsContrCatgCd, dsContrTMsg.dsContrCatgCd);

                ZYPEZDItemValueSetter.setValue(svcInvTMsg.lineBizTpCd, dsContrTMsg.svcLineBizCd);
                // Mod Start 08/31/2016 <QC#13529>
//                DS_CONTR_CLSTMsg dsContrClsTMsg = getDsContrClsTMsg(dsContrTMsg.dsContrClsCd.getValue());
//                if (dsContrClsTMsg != null) {
//                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsInvTpCd, dsContrClsTMsg.dsInvTpCd);
//                }
                // Mod Start 2018/01/26 QC#23419
//                ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsInvTpCd, dsContrClsTMsg.dsInvTpCd);
                if (!dsInvTpTMsg.dsInvTpCd.getValue().equals(baseDsInvTpTMsg.dsInvTpCd.getValue())) {
                    dsInvTpTMsg = baseDsInvTpTMsg;
                } else if (!dsInvTpTMsg.dsInvTpCd.getValue().equals(usgDsInvTpTMsg.dsInvTpCd.getValue())) {
                    dsInvTpTMsg = usgDsInvTpTMsg;
                }
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsInvTpCd, dsInvTpTMsg.dsInvTpCd);
                // Mod End 2018/01/26 QC#23419
                // Mod End   08/31/2016 <QC#13529>
                Map<String, Object> billToCust = getBillToCust(sellToCustTMsg.sellToCustCd.getValue());
                if (billToCust != null) {
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCustAcctCd, (String) billToCust.get("SELL_TO_CUST_CD"));
                }

                ZYPEZDItemValueSetter.setValue(svcInvTMsg.ctacPsnPk, (BigDecimal) dsContrDtlInfoList.get(0).get("CTAC_PSN_PK"));
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.dsAcctNum, dsContrTMsg.dsAcctNum);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcCrRebilPk, mainSvcContrBllgTMsg.svcCrRebilPk);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcCrRebilDtlPk, mainSvcContrBllgTMsg.svcCrRebilDtlPk);
                SVC_CR_REBILTMsg svcCrRebilTMsg = getSvcCrRebilTMsg(mainSvcContrBllgTMsg.svcCrRebilPk.getValue());
                if (svcCrRebilTMsg != null) {
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.custCareTktNum, svcCrRebilTMsg.custIncdtId);
                }
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToLocNm, billToCustTMsg.locNm);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToAddlLocNm, billToCustTMsg.addlLocNm);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToFirstLineAddr, billToCustTMsg.firstLineAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToScdLineAddr, billToCustTMsg.scdLineAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToThirdLineAddr, billToCustTMsg.thirdLineAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToFrthLineAddr, billToCustTMsg.frthLineAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCtyAddr, billToCustTMsg.ctyAddr);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToProvNm, billToCustTMsg.provNm);
                if (billToCntyTMsg != null) {
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCntyNm, billToCntyTMsg.cntyNm);
                }
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToStCd, billToCustTMsg.stCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToPostCd, billToCustTMsg.postCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCtryCd, billToCustTMsg.ctryCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToFirstRefCmntTxt, billToCustTMsg.firstRefCmntTxt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToScdRefCmntTxt, billToCustTMsg.firstRefCmntTxt);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.slsRepTocCd, dsContrTMsg.tocCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.shipToCustAcctCd, mainShipToCustTMsg.sellToCustCd);
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.svcInvOmLinkStsCd, "0");
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.prcAllocByMachQtyFlg, dsContrTMsg.prcAllocByMachQtyFlg);

                // START 05/10/2016 O.Okuma [QC#8107, ADD]
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.cfsLinkStsCd, CFS_LINK_STS.IN_COMPLETED);
                // END 05/10/2016 O.Okuma [QC#8107, ADD]

                // START 2018/05/31 K.Kojima [QC#23865,ADD]
                ZYPEZDItemValueSetter.setValue(svcInvTMsg.tempSvcInvNumFlg, ZYPConstant.FLG_ON_Y);
                // END 2018/05/31 K.Kojima [QC#23865,ADD]

                // add start 2018/08/09 QC#27329-3
                if (INV_TP.CREDIT_MEMO.equals(mainSvcContrBllgTMsg.invTpCd.getValue()) && hasValue(mainSvcContrBllgTMsg.origSvcInvNum)) {
                    setOrigSvcInvInfo(svcInvTMsg, mainSvcContrBllgTMsg.origSvcInvNum.getValue());
                }
                // add end 2018/08/09 QC#27329-3
                // START 2022/02/09 S.Kitamura [QC#59683, ADD]
                String contrLinkNum = rs.getString("CONTR_LINK_NUM");
                if (ZYPCommonFunc.hasValue(contrLinkNum) && ZYPConstant.FLG_ON_Y.equals(allLineTogetherFlg)) {
                    if (DS_INV_TGTR_TP.BILL_ALL_BASE_TOGETHER_AND_ALL_USAGE_TOGETHER.equals(dsInvTgtrTpCd)) {
                        if (ZYPConstant.FLG_ON_Y.equals(baseBllgFlg)) {
                            contrLinkNum = contrLinkNum + "B";
                        } else if (ZYPConstant.FLG_ON_Y.equals(mtrBllgFlg)) {
                            contrLinkNum = contrLinkNum + "U";
                        }
                    }
                    ZYPEZDItemValueSetter.setValue(svcInvTMsg.contrLinkNum, contrLinkNum);
                }
                // END 2022/02/09 S.Kitamura [QC#59683, ADD]

                // START 2024/01/31 H.Iinuma [QC#61468,ADD]
                if (hasValue(svcInvTMsg.svcCrRebilPk) && hasValue(svcInvTMsg.origSvcInvNum) && INV_TP.INVOICE.equals(svcInvTMsg.invTpCd.getValue())) {
                    List<FRT_CHRG_REPL_INFOTMsg> frtChrgReplInfoTMsgList = getFrtChrgReplInfoTMsgList(svcInvTMsg.origSvcInvNum.getValue());
                    for (FRT_CHRG_REPL_INFOTMsg frtChrgReplInfoTMsg : frtChrgReplInfoTMsgList) {
                        Map<String, Object> origSvcInvLine = getOrigSvcInvLineForFc(frtChrgReplInfoTMsg.svcInvNum.getValue(), frtChrgReplInfoTMsg.svcInvLineNum.getValue());
                        if (hasValue((BigDecimal) origSvcInvLine.get("SVC_INV_LINE_PK")) && !checkSvcInvLineForFcExists(svcInvNum, (BigDecimal) origSvcInvLine.get("SVC_MACH_MSTR_PK"))) {
                            SVC_INV_LINETMsg rebilSvcInvLineTMsg = createSvcInvLineForFc(origSvcInvLine);
                            BigDecimal dsContrBllgSchdPk = getDsContrBllgSchdPkForFc(svcInvNum, (BigDecimal) origSvcInvLine.get("SVC_MACH_MSTR_PK"));
                            ZYPEZDItemValueSetter.setValue(rebilSvcInvLineTMsg.svcInvNum, svcInvNum);
                            BigDecimal svcInvLinePk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_SQ");
                            String svcInvLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);
                            ZYPEZDItemValueSetter.setValue(rebilSvcInvLineTMsg.svcInvLinePk, svcInvLinePk);
                            ZYPEZDItemValueSetter.setValue(rebilSvcInvLineTMsg.svcInvLineNum, svcInvLineNum);
                            ZYPEZDItemValueSetter.setValue(rebilSvcInvLineTMsg.dsContrBllgSchdPk, dsContrBllgSchdPk);
                            S21FastTBLAccessor.insert(rebilSvcInvLineTMsg);
                            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(rebilSvcInvLineTMsg.getReturnCode())) {
                                throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE" });
                            }
                            ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.glblCmpyCd, glblCmpyCd);
                            ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.svcInvNum, svcInvNum);
                            ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.svcInvLineNum, svcInvLineNum);
                            ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.frtChrgReplStsCd, FRT_CHRG_REPL_STS.GENERATED);
                            S21FastTBLAccessor.insert(frtChrgReplInfoTMsg);
                            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(frtChrgReplInfoTMsg.getReturnCode())) {
                                throw new S21AbendException(NSZM0398E, new String[] {"FRT_CHRG_REPL_INFO" });
                            }
                            lineNum++;
                        }
                    }
                } else {
                    List<Map<String, Object>> svcInvLineInfoList = getSvcInvLineInfoList(svcInvNum);
                    for (Map<String, Object> svcInvLineInfo : svcInvLineInfoList) {
                        if (!checkSvcInvLineForFcExists(svcInvNum, (BigDecimal) svcInvLineInfo.get("SVC_MACH_MSTR_PK"))) {
                            String bllgPerFromDt = null;
                            String bllgPerThruDt = null;
                            SVC_INV_LINETMsg svcInvLineTMsg = new SVC_INV_LINETMsg();
                            if (SVC_INV_CHRG_TP.METER_CHARGE.equals(svcInvLineInfo.get("SVC_INV_CHRG_TP_CD"))) {
                                if (DS_CONTR_DTL_TP.BASE_AND_USAGE.equals(svcInvLineInfo.get("DS_CONTR_DTL_TP_CD")) && BLLG_TMG_TP.ADVANCE.equals(svcInvLineInfo.get("BASE_BLLG_TMG_CD"))
                                        && svcInvLineInfo.get("CONTR_EFF_THRU_DT").equals(svcInvLineInfo.get("BLLG_PER_THRU_DT"))) {
                                    List<Map<String, Object>> baseSvcInvLineList = getBaseSvcInvLineList(dsContrPk, (BigDecimal) svcInvLineInfo.get("SVC_MACH_MSTR_PK"));
                                    bllgPerFromDt = (String) baseSvcInvLineList.get(0).get("BLLG_PER_FROM_DT");
                                    bllgPerThruDt = (String) baseSvcInvLineList.get(0).get("BLLG_PER_THRU_DT");
                                    List<Map<String, Object>> mtrSvcInvLineList = getMtrSvcInvLineList(dsContrPk, (BigDecimal) svcInvLineInfo.get("SVC_MACH_MSTR_PK"));
                                    svcInvLineTMsg = createSvcInvLineForFc(mtrSvcInvLineList.get(0));
                                    ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerFromDt, bllgPerFromDt);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerThruDt, bllgPerThruDt);
                                }
                            } else if (SVC_INV_CHRG_TP.BASE_CHARGE.equals(svcInvLineInfo.get("SVC_INV_CHRG_TP_CD"))) {
                                if (BLLG_TMG_TP.ADVANCE.equals(svcInvLineInfo.get("BASE_BLLG_TMG_CD"))) {
                                    List<Map<String, Object>> baseSvcInvLineList = getBaseSvcInvLineList(dsContrPk, (BigDecimal) svcInvLineInfo.get("SVC_MACH_MSTR_PK"));
                                    if (baseSvcInvLineList.size() > 1) {
                                        bllgPerFromDt = (String) baseSvcInvLineList.get(1).get("BLLG_PER_FROM_DT");
                                        bllgPerThruDt = (String) baseSvcInvLineList.get(1).get("BLLG_PER_THRU_DT");
                                        svcInvLineTMsg = createSvcInvLineForFc(baseSvcInvLineList.get(0));
                                        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerFromDt, bllgPerFromDt);
                                        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerThruDt, bllgPerThruDt);
                                    }
                                } else if (BLLG_TMG_TP.ARREARS.equals(svcInvLineInfo.get("BASE_BLLG_TMG_CD"))) {
                                    List<Map<String, Object>> baseSvcInvLineList = getBaseSvcInvLineList(dsContrPk, (BigDecimal) svcInvLineInfo.get("SVC_MACH_MSTR_PK"));
                                    bllgPerFromDt = (String) baseSvcInvLineList.get(0).get("BLLG_PER_FROM_DT");
                                    bllgPerThruDt = (String) baseSvcInvLineList.get(0).get("BLLG_PER_THRU_DT");
                                    svcInvLineTMsg = createSvcInvLineForFc(baseSvcInvLineList.get(0));
                                }
                            }
                            if (bllgPerFromDt != null && bllgPerThruDt != null) {
                                if (checkCpoExists(dsContrTMsg.dsContrNum.getValue(), (BigDecimal) svcInvLineInfo.get("SVC_MACH_MSTR_PK"), bllgPerFromDt, bllgPerThruDt)) {
                                    ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvNum, svcInvNum);
                                    BigDecimal svcInvLinePk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_SQ");
                                    String svcInvLineNum = String.format(SVC_INV_LINE_NUM_FMT, lineNum);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLinePk, svcInvLinePk);
                                    ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLineNum, svcInvLineNum);
                                    S21FastTBLAccessor.insert(svcInvLineTMsg);
                                    if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineTMsg.getReturnCode())) {
                                        throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE" });
                                    }
                                    FRT_CHRG_REPL_INFOTMsg frtChrgReplInfoTMsg = new FRT_CHRG_REPL_INFOTMsg();
                                    ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.glblCmpyCd, glblCmpyCd);
                                    ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.svcInvNum, svcInvNum);
                                    ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.svcInvLineNum, svcInvLineNum);
                                    ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.frtChrgReplStsCd, FRT_CHRG_REPL_STS.GENERATED);
                                    S21FastTBLAccessor.insert(frtChrgReplInfoTMsg);
                                    if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(frtChrgReplInfoTMsg.getReturnCode())) {
                                        throw new S21AbendException(NSZM0398E, new String[] {"FRT_CHRG_REPL_INFO" });
                                    }
                                    lineNum++;
                                }
                            }
                        }
                    }
                }
                // END 2024/01/31 H.Iinuma [QC#61468,ADD]

                S21FastTBLAccessor.insert(svcInvTMsg);
                if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvTMsg.getReturnCode())) {
                    throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV" });
                }

                for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
                    // START 2017/09/05 M.Kidokoro [QC#20079, ADD]
                    // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // if (isMtrHldForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) {
                    // START 2022/02/09 S.Kitamura [QC#59683, MOD]
                    // if (isUnbllblForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                    if (isUnbllblForTogether(allLineTogetherFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                    // END 2022/02/09 S.Kitamura [QC#59683, MOD]
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                        continue;
                    }
                    // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                    // END 2017/09/05 M.Kidokoro [QC#20079, ADD]

                    // 7(5) Update SVC_CONTR_BLLG
                    BigDecimal svcContrBllgPk = (BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK");
                    SVC_CONTR_BLLGTMsg svcContrBllgTMsg = getSvcContrBllg(svcContrBllgPk);
                    ZYPEZDItemValueSetter.setValue(svcContrBllgTMsg.bllgCpltStsCd, BLLG_CPLT_STS.COMPLETED);
                    S21FastTBLAccessor.update(svcContrBllgTMsg);
                    if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcContrBllgTMsg.getReturnCode())) {
                        Key key = new Key();
                        key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                        throw new S21AbendException(NSZM0399E, new String[] {"SVC_CONTR_BLLG", key.toString() });
                    }

                    // Additional Charge
                    List<Map<String, BigDecimal>> addlChrgBllgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                    for (Map<String, BigDecimal> addlChrgBllgInfo : addlChrgBllgInfoList) {

                        BigDecimal addlSvcContrBllgPk = addlChrgBllgInfo.get("SVC_CONTR_BLLG_PK");
                        SVC_CONTR_BLLGTMsg addlSvcContrBllgTMsg = getSvcContrBllg(addlSvcContrBllgPk);
                        ZYPEZDItemValueSetter.setValue(addlSvcContrBllgTMsg.bllgCpltStsCd, BLLG_CPLT_STS.COMPLETED);
                        S21FastTBLAccessor.update(addlSvcContrBllgTMsg);
                        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(addlSvcContrBllgTMsg.getReturnCode())) {
                            Key key = new Key();
                            key.add("SVC_CONTR_BLLG_PK", addlSvcContrBllgPk);
                            throw new S21AbendException(NSZM0399E, new String[] {"SVC_CONTR_BLLG", key.toString() });
                        }
                    }

                    // 7(6) Update DS_CONTR_DTL
                    baseBllgFlg = (String) dsContrDtlInfo.get("BASE_BLLG_FLG");
                    mtrBllgFlg = (String) dsContrDtlInfo.get("MTR_BLLG_FLG");
                    boolean reProcFlg = ZYPConstant.FLG_ON_Y.equals(svcContrBllgTMsg.bllgReProcFlg.getValue());

                    DS_CONTR_DTLTMsg dsContrDtlTMsg = getDsContrDtl(svcContrBllgTMsg.dsContrDtlPk.getValue());
                    if (!reProcFlg && ZYPConstant.FLG_ON_Y.equals(baseBllgFlg)) {
                        // QC2379 start
                        // ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.baseBllgLastBllgDt,
                        // svcContrBllgTMsg.baseBllgLastBllgDt);
                        if (ZYPCommonFunc.hasValue(dsContrDtlTMsg.baseBllgLastBllgDt)) {
                            if (ZYPDateUtil.compare(dsContrDtlTMsg.baseBllgLastBllgDt.getValue(), svcContrBllgTMsg.baseBllgNextBllgDt.getValue()) < 0) {
                                ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.baseBllgLastBllgDt, svcContrBllgTMsg.baseBllgNextBllgDt);
                            }
                        } else {
                            ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.baseBllgLastBllgDt, svcContrBllgTMsg.baseBllgNextBllgDt);
                        }

                        // QC2379 end
                        if (ZYPCommonFunc.hasValue(dsContrDtlTMsg.baseInvUpToDt)) {
                            if (ZYPDateUtil.compare(dsContrDtlTMsg.baseInvUpToDt.getValue(), svcContrBllgTMsg.baseBllgInvUpToDt.getValue()) < 0) {
                                ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.baseInvUpToDt, svcContrBllgTMsg.baseBllgInvUpToDt);
                            }
                        } else {
                            ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.baseInvUpToDt, svcContrBllgTMsg.baseBllgInvUpToDt);
                        }
                    }

                    if (!reProcFlg && ZYPConstant.FLG_ON_Y.equals(mtrBllgFlg)) {
                        // QC2379 start
                        // ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.mtrBllgLastBllgDt,
                        // svcContrBllgTMsg.mtrBllgLastBllgDt);
                        if (ZYPCommonFunc.hasValue(dsContrDtlTMsg.mtrBllgLastBllgDt)) {
                            if (ZYPDateUtil.compare(dsContrDtlTMsg.mtrBllgLastBllgDt.getValue(), svcContrBllgTMsg.mtrBllgNextBllgDt.getValue()) < 0) {
                                ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.mtrBllgLastBllgDt, svcContrBllgTMsg.mtrBllgNextBllgDt);
                            }
                        } else {
                            ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.mtrBllgLastBllgDt, svcContrBllgTMsg.mtrBllgNextBllgDt);
                        }

                        // QC2379 end
                        if (ZYPCommonFunc.hasValue(dsContrDtlTMsg.mtrInvUpToDt)) {
                            if (ZYPDateUtil.compare(dsContrDtlTMsg.mtrInvUpToDt.getValue(), svcContrBllgTMsg.mtrBllgInvUpToDt.getValue()) < 0) {
                                ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.mtrInvUpToDt, svcContrBllgTMsg.mtrBllgInvUpToDt);
                            }
                        } else {
                            ZYPEZDItemValueSetter.setValue(dsContrDtlTMsg.mtrInvUpToDt, svcContrBllgTMsg.mtrBllgInvUpToDt);
                        }
                    }

                    S21FastTBLAccessor.update(dsContrDtlTMsg);
                    if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(dsContrDtlTMsg.getReturnCode())) {
                        Key key = new Key();
                        key.add("DS_CONTR_DTL_PK", dsContrDtlTMsg.dsContrDtlPk.getValue());
                        throw new S21AbendException(NSZM0399E, new String[] {"DS_CONTR_DTL", key.toString() });
                    }

                    if (DS_CONTR_DTL_TP.AGGREGATE.equals((String) dsContrDtlInfo.get("DS_CONTR_DTL_TP_CD"))) {
                        continue;
                    }

                    // Update SVC_PHYS_MTR_READ
                    SVC_CONTR_MTR_BLLGTMsgArray svcContrMtrBllgTMsgArray = getSvcContrMtrBllgList(svcContrBllgPk);
                    for (int i = 0; i < svcContrMtrBllgTMsgArray.length(); i++) {

                        SVC_CONTR_MTR_BLLGTMsg svcContrMtrBllgTMsg = svcContrMtrBllgTMsgArray.no(i);

//                            String maxInvMtrReadDt = getMaxInvMtrReadDt(svcContrBllgTMsg.dsContrDtlPk.getValue(), svcContrBllgTMsg.svcMachMstrPk.getValue(), svcContrMtrBllgTMsg.dsContrBllgMtrPk.getValue(), svcContrMtrBllgTMsg.dsContrBllgMtrId
//                                    .getValue(), svcContrBllgTMsg.bllgReProcFlg.getValue(), svcContrMtrBllgTMsg.mtrBllgThruDt.getValue());
//
//                            String mtrBllgFromDt = null;
//                            if (ZYPCommonFunc.hasValue(maxInvMtrReadDt)) {
//                                mtrBllgFromDt = ZYPDateUtil.addDays(maxInvMtrReadDt, 1);
//                            } else {
//                                mtrBllgFromDt = svcContrMtrBllgTMsg.mtrBllgFromDt.getValue();
//                            }

                        List<BigDecimal> svcPhysMtrReadPkList = getInvProcSvcPhysMtrRead(svcContrMtrBllgTMsg.dsContrBllgMtrPk.getValue(), svcContrMtrBllgTMsg.dsContrBllgMtrId.getValue(), svcContrBllgTMsg.svcMachMstrPk.getValue(),
                                svcContrBllgTMsg.dsContrDtlPk.getValue(), svcContrMtrBllgTMsg.svcPhysMtrReadGrpSq.getValue());

                        for (BigDecimal svcPhysMtrReadPk : svcPhysMtrReadPkList) {
                            SVC_PHYS_MTR_READTMsg svcPhysMtrReadTMsg = getSvcPhysMtrRead(svcPhysMtrReadPk);
                            if (svcPhysMtrReadTMsg == null) {
                                Key key = new Key();
                                key.add("SVC_PHYS_MTR_READ_PK", svcPhysMtrReadPk);
                                key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                                // START 2016/12/13 N.Arai [QC#16400, MOD]
                                // addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM0396E, "SVC_PHYS_MTR_READ", key.toString());
                                addMessage(DS_CONTR_CATG.AGGREGATE, svcInvKey, 1, NSZM1092E, key.toString());
                                // END 2016/12/13 N.Arai [QC#16400, MOD]
                                rollback();
                                // mod start 2017/01/19 CSA QC#16645
                                dsContrPkList.add(dsContrPk);
                                // mod end 2017/01/19 CSA QC#16645
                                continue SVC_INV;
                            } else {
                                ZYPEZDItemValueSetter.setValue(svcPhysMtrReadTMsg.invProcFlg, ZYPConstant.FLG_ON_Y);
                                ZYPEZDItemValueSetter.setValue(svcPhysMtrReadTMsg.svcInvNum, svcInvNum);
                                ZYPEZDItemValueSetter.setValue(svcPhysMtrReadTMsg.invDt, invDt);
                                S21FastTBLAccessor.update(svcPhysMtrReadTMsg);
                                if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcPhysMtrReadTMsg.getReturnCode())) {
                                    Key key = new Key();
                                    key.add("SVC_PHYS_MTR_READ_PK", svcPhysMtrReadPk);
                                    throw new S21AbendException(NSZM0399E, new String[] {"SVC_PHYS_MTR_READ", key.toString() });
                                }
                            }
                        }
                    }
                }

                // START 2018/06/05 K.Kojima [QC#21974,ADD]
                List<BigDecimal> updateAggLineBllgMtrList = new ArrayList<BigDecimal>();
                // END 2018/06/05 K.Kojima [QC#21974,ADD]
                for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
                    // START 2017/09/05 M.Kidokoro [QC#20079, ADD]
                    // START 2017/09/11 K.Kitachi [QC#20446, MOD]
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // if (isMtrHldForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) {
                    if (isUnbllblForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                        continue;
                    }
                    // END 2017/09/11 K.Kitachi [QC#20446, MOD]
                    // END 2017/09/05 M.Kidokoro [QC#20079, ADD]

                    SVC_CONTR_BLLGTMsg svcContrBllgTMsg = getSvcContrBllg((BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK"));
                    BigDecimal svcContrBllgPk = svcContrBllgTMsg.svcContrBllgPk.getValue();

                    Map<String, Object> svcInvLineMap = getSvcInvLine(svcContrBllgTMsg.dsContrBllgSchdPk.getValue());

                    // Base Charge
                    if (ZYPConstant.FLG_ON_Y.equals(svcContrBllgTMsg.baseChrgFlg.getValue())) {
                        // Update DS_CONTR_BLLG_SCHD
                        updateDsContrBllgSchd(svcContrBllgTMsg, svcInvTMsg, svcInvLineMap);

                        List<Map<String, BigDecimal>> addlChrgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                        for (Map<String, BigDecimal> addlChrgInfo : addlChrgInfoList) {
                            BigDecimal addlChrgPk = (BigDecimal) addlChrgInfo.get("SVC_CONTR_ADDL_CHRG_BLLG_PK");
                            SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg = getSvcContrAddlChrgBllgTMsg(addlChrgPk);
                            SVC_CONTR_BLLGTMsg addlSvcContrBllgTMsg = getSvcContrBllg(svcContrAddlChrgBllgTMsg.svcContrBllgPk.getValue());

                            // Update DS_CONTR_ADDL_CHRG
                            updateDsContrAddlChrg(addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg);
                        }
                    }

                    // Usage Charge
                    if (ZYPConstant.FLG_ON_Y.equals(svcContrBllgTMsg.usgChrgFlg.getValue())) {
                        updateDsContrBllgSchd(svcContrBllgTMsg, svcInvTMsg, svcInvLineMap);

                        SVC_CONTR_MTR_BLLGTMsgArray svcContrMtrBllgTMsgArray = getSvcContrMtrBllgList(svcContrBllgPk);
                        for (int i = 0; i < svcContrMtrBllgTMsgArray.getValidCount(); i++) {
                            SVC_CONTR_MTR_BLLGTMsg svcContrMtrBllgTMsg = svcContrMtrBllgTMsgArray.no(i);

                            // Update DS_CONTR_BLLG_SCHD
                            updateDsContrBllgMtr(svcContrBllgTMsg, svcContrMtrBllgTMsg);

                            List<Map<String, BigDecimal>> addlChrgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                            for (Map<String, BigDecimal> addlChrgInfo : addlChrgInfoList) {
                                BigDecimal addlChrgPk = (BigDecimal) addlChrgInfo.get("SVC_CONTR_ADDL_CHRG_BLLG_PK");
                                SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg = getSvcContrAddlChrgBllgTMsg(addlChrgPk);
                                SVC_CONTR_BLLGTMsg addlSvcContrBllgTMsg = getSvcContrBllg(svcContrAddlChrgBllgTMsg.svcContrBllgPk.getValue());

                                // Update DS_CONTR_ADDL_CHRG
                                updateDsContrAddlChrg(addlSvcContrBllgTMsg, svcContrAddlChrgBllgTMsg);
                            }
                        }

                        // START 2018/05/14 K.Kitachi [QC#23541, ADD]
                        // START 2018/06/06 K.Kojima [QC#21974,MOD]
                        // updateAggLineBllgMtr(svcContrBllgTMsg);
                        updateAggLineBllgMtr(svcContrBllgTMsg, updateAggLineBllgMtrList);
                        // END 2018/06/06 K.Kojima [QC#21974,MOD]
                        // END 2018/05/14 K.Kitachi [QC#23541, ADD]
                    }
                }

                archiveProcess(dsContrDtlInfoList);

                // START 04/11/2016 T.Aoyagi [QC#6510, ADD]
                if (!callCrRebilApi(DS_CONTR_CATG.AGGREGATE, svcInvKey, svcInvTMsg)) {
                    rollback();
                    // mod start 2017/01/19 CSA QC#16645
                    dsContrPkList.add(dsContrPk);
                    // mod end 2017/01/19 CSA QC#16645
                    continue SVC_INV;
                }
                // END 04/11/2016 T.Aoyagi [QC#6510, ADD]

                svcInvCnt++;

                commit();
            }

            normCnt = normCnt + svcInvCnt;

            Set<String> svcInvErrKey = getAggSvcInvErrKey();
            for (String svcInvKey : svcInvErrKey) {
                String[] keys = parseAggSvcInvKey(svcInvKey);
                // QC2536 start
                // List<Map<String, Object>> dsContrDtlInfoList =
                // getRegDsContrDtlInfo(new BigDecimal(keys[0]), new
                // BigDecimal(keys[1]));
                // START 04/12/2016 T.Aoyagi [QC#6829, MOD]
                // Mod Start 08/08/2016 <QC#8293>
                // Mod Start 12/16/2016 <QC#16646>
                // START 2017/09/28 M.Kidokoro [QC#21286, MOD]
                // List<Map<String, Object>> dsContrDtlInfoList = getAggDsContrDtlInfo(new BigDecimal(keys[0]), keys[1], keys[2], keys[3], keys[4], null, keys[5]);
                BigDecimal svcCrRebilPk = null;
                BigDecimal svcCrRebilDtlPk = null;
                if (ZYPCommonFunc.hasValue(keys[6]) && !keys[6].equals("null")) {
                    svcCrRebilPk = new BigDecimal(keys[6]);
                }
                if (ZYPCommonFunc.hasValue(keys[7]) && !keys[7].equals("null")) {
                    svcCrRebilDtlPk = new BigDecimal(keys[7]);
                }
                // START 2018/07/25 K.Kitachi [QC#17068, ADD]
                BigDecimal ctacPsnPk = null;
                if (ZYPCommonFunc.hasValue(keys[8]) && !keys[8].equals("null")) {
                    ctacPsnPk = new BigDecimal(keys[8]);
                }
                // END 2018/07/25 K.Kitachi [QC#17068, ADD]
                // START 2018/07/25 K.Kitachi [QC#17068, MOD]
//                List<Map<String, Object>> dsContrDtlInfoList = getAggDsContrDtlInfo(new BigDecimal(keys[0]), keys[1], keys[2], keys[3], keys[4], null, keys[5], svcCrRebilPk, svcCrRebilDtlPk);
                List<Map<String, Object>> dsContrDtlInfoList = getAggDsContrDtlInfo(new BigDecimal(keys[0]), keys[1], keys[2], keys[3], keys[4], null, keys[5], svcCrRebilPk, svcCrRebilDtlPk, ctacPsnPk);
                // END 2018/07/25 K.Kitachi [QC#17068, MOD]
                // END 2017/09/28 M.Kidokoro [QC#21286, MOD]
                // Mod End   12/16/2016 <QC#16646>
                // Mod End   08/08/2016 <QC#8293>
                // END 04/12/2016 T.Aoyagi [QC#6829, MOD]
                // QC2536 end
                for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
                    BigDecimal svcContrBllgPk = (BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK");
                    SVC_CONTR_BLLGTMsg svcContrBllgTMsg = getSvcContrBllg(svcContrBllgPk);
                    ZYPEZDItemValueSetter.setValue(svcContrBllgTMsg.bllgCpltStsCd, BLLG_CPLT_STS.ERROR);
                    S21FastTBLAccessor.update(svcContrBllgTMsg);
                    if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcContrBllgTMsg.getReturnCode())) {
                        Key key = new Key();
                        key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                        throw new S21AbendException(NSZM0399E, new String[] {"SVC_CONTR_BLLG", key.toString() });
                    }
                }
            }

            commit();
        } catch (SQLException e) {
            sqlExceptionHandler(e);
        } finally {
            S21SsmLowLevelCodingClient.closeResource(ps, rs);
        }
    }

    /**
     * Get Service Invoice Key
     * @return PreparedStatement
     * @throws SQLException
     */
    private PreparedStatement getRegSvcInvKey() throws SQLException {
        Map<String, Object> prm = new HashMap<String, Object>();
        prm.put("glblCmpyCd", glblCmpyCd);
        prm.put("slsDt", slsDt);
        //Mod Start 03/17/2016 <QC#4166>
        prm.put("bllgCpltStsCdList", this.bllgCpltStsCdList);
        //Mod End   03/17/2016 <QC#4166>
        prm.put("dsContrCatgCd", DS_CONTR_CATG.REGULAR);
        prm.put("multiCnt", this.multiCnt);
        prm.put("usrVar1", this.usrVar1);
        // add start 2019/05/09 QC#50145
        String[] svcCrRebilStsCdList = {SVC_CR_REBIL_STS.APPROVED, SVC_CR_REBIL_STS.PROCESSED };
        prm.put("svcCrRebilStsCdList", svcCrRebilStsCdList);
        // add end 2019/05/09 QC#50145
        // START 2020/01/09 K.Kitachi [QC#55173, ADD]
        prm.put("invTpCd", INV_TP.INVOICE);
        // END 2020/01/09 K.Kitachi [QC#55173, ADD]
        return ssmLlcClnt.createPreparedStatement("getRegSvcInvKey", prm);
    }

    /**
     * Get Service Invoice Key
     * @return PreparedStatement
     * @throws SQLException
     */
    private PreparedStatement getFleetSvcInvKey() throws SQLException {
        Map<String, Object> prm = new HashMap<String, Object>();
        prm.put("glblCmpyCd", glblCmpyCd);
        prm.put("slsDt", slsDt);
        //Mod Start 03/17/2016 <QC#4166>
        prm.put("bllgCpltStsCdList", this.bllgCpltStsCdList);
        //Mod End   03/17/2016 <QC#4166>
        prm.put("dsContrCatgCd", DS_CONTR_CATG.FLEET);
        prm.put("multiCnt", this.multiCnt);
        prm.put("usrVar1", this.usrVar1);
        // START 2017/12/06 K.Kojima [QC#22871,ADD]
        prm.put("dsContrDtlTpFleetLine", DS_CONTR_DTL_TP.FLEET);
        // END 2017/12/06 K.Kojima [QC#22871,ADD]
        // add start 2019/05/09 QC#50145
        String[] svcCrRebilStsCdList = {SVC_CR_REBIL_STS.APPROVED, SVC_CR_REBIL_STS.PROCESSED };
        prm.put("svcCrRebilStsCdList", svcCrRebilStsCdList);
        // add end 2019/05/09 QC#50145
        // START 2020/01/09 K.Kitachi [QC#55173, ADD]
        prm.put("invTpCd", INV_TP.INVOICE);
        // END 2020/01/09 K.Kitachi [QC#55173, ADD]
        return ssmLlcClnt.createPreparedStatement("getFleetSvcInvKey", prm);
    }

    /**
     * Get Service Invoice Key
     * @return PreparedStatement
     * @throws SQLException
     */
    private PreparedStatement getAggSvcInvKey() throws SQLException {
        Map<String, Object> prm = new HashMap<String, Object>();
        prm.put("glblCmpyCd", glblCmpyCd);
        prm.put("slsDt", slsDt);
        //Mod Start 03/17/2016 <QC#4166>
        prm.put("bllgCpltStsCdList", this.bllgCpltStsCdList);
        //Mod End   03/17/2016 <QC#4166>
        prm.put("dsContrCatgCd", DS_CONTR_CATG.AGGREGATE);
        prm.put("multiCnt", this.multiCnt);
        prm.put("usrVar1", this.usrVar1);
        // add start 2019/05/09 QC#50145
        String[] svcCrRebilStsCdList = {SVC_CR_REBIL_STS.APPROVED, SVC_CR_REBIL_STS.PROCESSED };
        prm.put("svcCrRebilStsCdList", svcCrRebilStsCdList);
        // add end 2019/05/09 QC#50145
        // START 2020/01/09 K.Kitachi [QC#55173, ADD]
        prm.put("invTpCd", INV_TP.INVOICE);
        // END 2020/01/09 K.Kitachi [QC#55173, ADD]
        // Mod Start 08/08/2016 <QC#8293>
        return ssmLlcClnt.createPreparedStatement("getAggSvcInvKey", prm);
        // Mod End   08/08/2016 <QC#8293>
    }

    /**
     * Get DS_CONTR
     * @param dsContrPk BigDecimal
     * @return DS_CONTRTMsg
     */
    private DS_CONTRTMsg getDsContr(BigDecimal dsContrPk) {
        DS_CONTRTMsg tMsg = new DS_CONTRTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.dsContrPk, dsContrPk);
        return (DS_CONTRTMsg) S21FastTBLAccessor.findByKeyForUpdate(tMsg);
    }

    /**
     * Get PMT_TERM_CASH_DISCTMsg
     * @param pmtTermCashDiscCd String
     * @return PMT_TERM_CASH_DISCTMsg
     */
    private PMT_TERM_CASH_DISCTMsg getPmtTermCashDisc(String pmtTermCashDiscCd) {
        return (PMT_TERM_CASH_DISCTMsg) ZYPCodeDataUtil.findByCode("PMT_TERM_CASH_DISC", glblCmpyCd, pmtTermCashDiscCd);
    }

    /**
     * Get PMT_TERM
     * @param pmtTermCd String
     * @return PMT_TERMTMsg
     */
    private PMT_TERMTMsg getPmtTerm(String pmtTermCd) {
        return (PMT_TERMTMsg) ZYPCodeDataUtil.findByCode("PMT_TERM", glblCmpyCd, pmtTermCd);
    }

    // Mod Start 12/26/2016 <QC#16646>
    /**
     * Get SELL_TO_CUST
     * @param sellToCustCd String
     * @return String
     */
    private SELL_TO_CUSTTMsg getSellToCust(String billToCustCd) {
        String sellToCustCd = getSellToCustByBillToCust(billToCustCd);
        if (!hasValue(sellToCustCd)) {
            return null;
        }
        String cacheKey = "NSAB0020.SELL_TO_CUST." + sellToCustCd;
        if (cache.contains(cacheKey)) {
            return (SELL_TO_CUSTTMsg) cache.get(cacheKey);
        } else {
            SELL_TO_CUSTTMsg cacheTMsg = null;
            SELL_TO_CUSTTMsg tMsg = new SELL_TO_CUSTTMsg();
            // START QC#53265 K.Fujimoto[MOD]
            // tMsg.setSQLID("100");
            tMsg.setSQLID("029");
            // END   QC#53265 K.Fujimoto[MOD]
            tMsg.setConditionValue("glblCmpyCd01", glblCmpyCd);
            tMsg.setConditionValue("sellToCustCd01", sellToCustCd);
            // START QC#53265 K.Fujimoto[ADD]
            tMsg.setConditionValue("rgtnStsCd01", RGTN_STS.READY_FOR_ORDER_TAKING);
            // END   QC#53265 K.Fujimoto[ADD]
            SELL_TO_CUSTTMsgArray tMsgArray = (SELL_TO_CUSTTMsgArray) EZDTBLAccessor.findByCondition(tMsg);
            if (tMsgArray.length() > 0) {
                cacheTMsg = tMsgArray.no(0);
            }
            cache.put(cacheKey, cacheTMsg);
            return cacheTMsg;
        }
    }

    private String getSellToCustByBillToCust(String billToCustCd) {
        Map<String, String> prm = new HashMap<String, String>();
        prm.put("glblCmpyCd", glblCmpyCd);
        prm.put("billToCustCd", billToCustCd);
        String sellToCustCd = (String) ssmBatClnt.queryObject("getSellToCustByBillToCust", prm);
        return sellToCustCd;
    }
    // Mod End   12/26/2016 <QC#16646>

    // START QC#53265 K.Fujimoto[ADD]
    private SELL_TO_CUSTTMsg getSellToCustForShipToCust(String shipToCustCd) {
        String sellToCustCd = getSellToCustByShipToCust(shipToCustCd);
        if (!hasValue(sellToCustCd)) {
            return null;
        }
        String cacheKey = "NSAB0020.SELL_TO_CUST." + sellToCustCd;
        if (cache.contains(cacheKey)) {
            return (SELL_TO_CUSTTMsg) cache.get(cacheKey);
        } else {
            SELL_TO_CUSTTMsg cacheTMsg = null;
            SELL_TO_CUSTTMsg tMsg = new SELL_TO_CUSTTMsg();
            tMsg.setSQLID("029");
            tMsg.setConditionValue("glblCmpyCd01", glblCmpyCd);
            tMsg.setConditionValue("sellToCustCd01", sellToCustCd);
            tMsg.setConditionValue("rgtnStsCd01", RGTN_STS.READY_FOR_ORDER_TAKING);
            SELL_TO_CUSTTMsgArray tMsgArray = (SELL_TO_CUSTTMsgArray) EZDTBLAccessor.findByCondition(tMsg);
            if (tMsgArray.length() > 0) {
                cacheTMsg = tMsgArray.no(0);
            }
            cache.put(cacheKey, cacheTMsg);
            return cacheTMsg;
        }
    }
    private String getSellToCustByShipToCust(String shipToCustCd) {
        Map<String, String> prm = new HashMap<String, String>();
        prm.put("glblCmpyCd", glblCmpyCd);
        prm.put("shipToCustCd", shipToCustCd);
        String sellToCustCd = (String) ssmBatClnt.queryObject("getSellToCustByShipToCust", prm);
        return sellToCustCd;
    }
    // END   QC#53265 K.Fujimoto[ADD]

    /**
     * Get GLBL_CMPY
     * @return GLBL_CMPYTMsg
     */
    private GLBL_CMPYTMsg getGlblCmpy() {
        GLBL_CMPYTMsg tMsg = new GLBL_CMPYTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, glblCmpyCd);
        return (GLBL_CMPYTMsg) S21CacheTBLAccessor.findByKey(tMsg);
    }

    /**
     * Get CNTY
     * @param cntyPk BigDecimal
     * @return CNTYTMsg
     */
    private CNTYTMsg getCnty(BigDecimal cntyPk) {
        CNTYTMsg tMsg = new CNTYTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.cntyPk, cntyPk);
        return (CNTYTMsg) S21CacheTBLAccessor.findByKey(tMsg);
    }

    /**
     * Get BILL_TO_CUSTTMsg
     * @param billToCustCd String
     * @return BILL_TO_CUSTTMsg
     */
    public BILL_TO_CUSTTMsg getBillToCustTMsg(String billToCustCd) {
        String cacheKey = "NSAB0020.BILL_TO_CUST." + billToCustCd;
        if (cache.contains(cacheKey)) {
            return (BILL_TO_CUSTTMsg) cache.get(cacheKey);
        } else {
            BILL_TO_CUSTTMsg cacheTMsg = null;
            BILL_TO_CUSTTMsg tMsg = new BILL_TO_CUSTTMsg();
            // START 2023/04/26 R.Avelino [QC#61411, MOD]
            // tMsg.setSQLID("047");
            tMsg.setSQLID("048");
            // END 2023/04/26 R.Avelino [QC#61411, MOD]
            tMsg.setConditionValue("glblCmpyCd01", glblCmpyCd);
            tMsg.setConditionValue("billToCustCd01", billToCustCd);
            // START 2023/04/26 R.Avelino [QC#61411, ADD]
            tMsg.setConditionValue("rgtnStsCd01", RGTN_STS.READY_FOR_ORDER_TAKING);
            // END 2023/04/26 R.Avelino [QC#61411, ADD]
            BILL_TO_CUSTTMsgArray tMsgArray = (BILL_TO_CUSTTMsgArray) EZDTBLAccessor.findByCondition(tMsg);
            if (tMsgArray.length() > 0) {
                cacheTMsg = tMsgArray.no(0);
            }
            cache.put(cacheKey, cacheTMsg);
            return cacheTMsg;
        }
    }

    /**
     * Get REM_TO
     * @param remId String
     * @return REM_TOTMsg
     */
    private REM_TOTMsg getRemTo(String remId) {
        String cacheKey = "NSAB0020.REM_TO." + remId;
        if (cache.contains(cacheKey)) {
            return (REM_TOTMsg) cache.get(cacheKey);
        } else {
            REM_TOTMsg cacheTMsg = null;
            REM_TOTMsg tMsg = new REM_TOTMsg();
            tMsg.setSQLID("002");
            tMsg.setConditionValue("glblCmpyCd01", glblCmpyCd);
            tMsg.setConditionValue("remId01", remId);
            REM_TOTMsgArray tMsgArray = (REM_TOTMsgArray) EZDTBLAccessor.findByCondition(tMsg);
            if (tMsgArray.length() > 0) {
                cacheTMsg = tMsgArray.no(0);
            }
            cache.put(cacheKey, cacheTMsg);
            return cacheTMsg;
        }
    }

    @SuppressWarnings("unchecked")
    private ACCT_DLY_ACTL_EXCH_RATESTMsg getAcctDlyActlExchRates(String ccyCd, String actlExchRateEntDt) {
        String cacheKey = "NSAB0020.ACCT_DLY_ACTL_EXCH_RATES." + ccyCd + "." + actlExchRateEntDt;
        if (cache.contains(cacheKey)) {
            return (ACCT_DLY_ACTL_EXCH_RATESTMsg) cache.get(cacheKey);
        } else {
            Map<String, String> prm = new HashMap<String, String>();
            prm.put("glblCmpyCd", glblCmpyCd);
            prm.put("ccyCd", ccyCd);
            prm.put("actlExchRateEntDt", actlExchRateEntDt);
            Map<String, String> rsltMap = (Map<String, String>) ssmBatClnt.queryObject("getAcctDlyActlExchRates", prm);
            if (rsltMap == null || rsltMap.isEmpty()) {
                cache.put(cacheKey, null);
                return null;
            } else {
                ACCT_DLY_ACTL_EXCH_RATESTMsg tMsg = new ACCT_DLY_ACTL_EXCH_RATESTMsg();
                ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, glblCmpyCd);
                ZYPEZDItemValueSetter.setValue(tMsg.ccyCd, ccyCd);
                ZYPEZDItemValueSetter.setValue(tMsg.actlExchRateEntDt, rsltMap.get("ACTL_EXCH_RATE_ENT_DT"));
                ACCT_DLY_ACTL_EXCH_RATESTMsg rsltTMsg = (ACCT_DLY_ACTL_EXCH_RATESTMsg) S21CacheTBLAccessor.findByKey(tMsg);
                cache.put(cacheKey, rsltTMsg);
                return rsltTMsg;
            }
        }
    }

    //Del Start 03/18/2016 <QC#5720>
//    private DS_CONTR_INV_DELYTMsgArray getDsContrInvDely(BigDecimal dsContrPk) {
//        DS_CONTR_INV_DELYTMsg tMsg = new DS_CONTR_INV_DELYTMsg();
//        tMsg.setSQLID("001");
//        tMsg.setConditionValue("glblCmpyCd01", glblCmpyCd);
//        tMsg.setConditionValue("dsContrPk01", dsContrPk);
//        return (DS_CONTR_INV_DELYTMsgArray) EZDTBLAccessor.findByCondition(tMsg);
//    }
    //Del End 03/18/2016 <QC#5720>

    private CCYTMsg getCcy(String ccyCd) {
        return (CCYTMsg) ZYPCodeDataUtil.findByCode("CCY", glblCmpyCd, ccyCd);
    }

    @SuppressWarnings("unchecked")
    private Map<String, Object> getMainUnitInfo(BigDecimal dsContrPk, BigDecimal svcConfigMstrPk) {
        Map<String, Object> prm = new HashMap<String, Object>();
        prm.put("glblCmpyCd", glblCmpyCd);
        prm.put("dsContrPk", dsContrPk);
        prm.put("svcConfigMstrPk", svcConfigMstrPk);
        return (Map<String, Object>) ssmBatClnt.queryObject("getMainUnitInfo", prm);
    }

    @SuppressWarnings("unchecked")
    private List<Map<String, Object>> getRegDsContrDtlInfo(BigDecimal dsContrPk
    // QC2536 start
            // START 04/12/2016 T.Aoyagi [QC#6829, MOD]
            // mod start 2018/07/05 QC#27114
            //, String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg, String invTpCd) throws SQLException {
            , String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg, String invTpCd, BigDecimal svcCrRebilPk) throws SQLException {
            // mod end 2018/07/05 QC#27114
            // END 04/12/2016 T.Aoyagi [QC#6829, MOD]
        // QC2536 end
        Map<String, Object> prm = new HashMap<String, Object>();
        prm.put("glblCmpyCd", glblCmpyCd);
        prm.put("slsDt", slsDt);
        //Mod Start 03/17/2016 <QC#4166>
        prm.put("bllgCpltStsCdList", this.bllgCpltStsCdList);
        //Mod End   03/17/2016 <QC#4166>
        prm.put("dsContrPk", dsContrPk);
        // QC2420 start
        prm.put("dsContrDtlTpCd", DS_CONTR_DTL_TP.ACCESSORIES);
        // QC2420 end
        prm.put("dsContrCatgCd", DS_CONTR_CATG.REGULAR);
        // QC2536 start
        prm.put("baseBllgFlg", baseBllgFlg);
        prm.put("mtrBllgFlg", mtrBllgFlg);
        prm.put("invSeptBaseUsgFlg", invSeptBaseUsgFlg);
        // QC2536 end
        // START 04/12/2016 T.Aoyagi [QC#6829, ADD]
        prm.put("invTpCd", invTpCd);
        // END 04/12/2016 T.Aoyagi [QC#6829, ADD]
        // Add Start 08/30/2016 <QC#13706>
        prm.put("svcCovFeatCd", SVC_COV_FEAT.INV_DISP);
        prm.put("slsDt", slsDt);
        prm.put("defEffThruDt", DEF_EFF_THRU_DT);
        // Add End   08/30/2016 <QC#13706>
        // add start 2018/07/05 QC#27114
        prm.put("svcCrRebilPk", svcCrRebilPk);
        // add end 2018/07/05 QC#27114
        return (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getRegDsContrDtlInfo", prm);
    }


    // Mod Start 08/08/2016 <QC#8293>
    // Mod Start 12/16/2016 <QC#16646>
    @SuppressWarnings("unchecked")
    private List<Map<String, Object>> getFleetDsContrDtlInfo(BigDecimal dsContrPk
    // QC2536 start
            // START 04/12/2016 T.Aoyagi [QC#6829, MOD]
            // START 2017/09/28 M.Kidokoro [QC#21286, MOD]
//            , String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg, String invTpCd, String nextBllgDt, String billToCustCd) throws SQLException {
            // START 2018/07/25 K.Kitachi [QC#17068, MOD]
//            , String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg, String invTpCd, String nextBllgDt, String billToCustCd, BigDecimal svcCrRebilPk, BigDecimal svcCrRebilDtlPk) throws SQLException {
            , String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg, String invTpCd, String nextBllgDt, String billToCustCd, BigDecimal svcCrRebilPk, BigDecimal svcCrRebilDtlPk, BigDecimal ctacPsnPk) throws SQLException {
            // END 2018/07/25 K.Kitachi [QC#17068, MOD]
            // END 2017/09/28 M.Kidokoro [QC#21286, MOD]
            // END 04/12/2016 T.Aoyagi [QC#6829, MOD]
        // QC2536 end
        Map<String, Object> prm = new HashMap<String, Object>();
        prm.put("glblCmpyCd", glblCmpyCd);
        prm.put("slsDt", slsDt);
        //Mod Start 03/17/2016 <QC#4166>
        prm.put("bllgCpltStsCdList", this.bllgCpltStsCdList);
        //Mod End   03/17/2016 <QC#4166>
        prm.put("dsContrPk", dsContrPk);
        // QC2420 start
        prm.put("dsContrDtlTpCd", DS_CONTR_DTL_TP.ACCESSORIES);
        // QC2420 end
        prm.put("dsContrCatgCd", DS_CONTR_CATG.FLEET);
        // QC2536 start
        prm.put("baseBllgFlg", baseBllgFlg);
        prm.put("mtrBllgFlg", mtrBllgFlg);
        prm.put("invSeptBaseUsgFlg", invSeptBaseUsgFlg);
        // QC2536 end
        // START 04/12/2016 T.Aoyagi [QC#6829, ADD]
        prm.put("invTpCd", invTpCd);
        // END 04/12/2016 T.Aoyagi [QC#6829, ADD]
        prm.put("nextBllgDt", nextBllgDt);
        // Add Start 08/30/2016 <QC#13706>
        prm.put("svcCovFeatCd", SVC_COV_FEAT.INV_DISP);
        prm.put("slsDt", slsDt);
        prm.put("defEffThruDt", DEF_EFF_THRU_DT);
        prm.put("billToCustCd", billToCustCd);
        // Add End   08/30/2016 <QC#13706>
        // START 2017/09/28 M.Kidokoro [QC#21286, ADD]
        prm.put("svcCrRebilPk", svcCrRebilPk);
        prm.put("svcCrRebilDtlPk", svcCrRebilDtlPk);
        // END 2017/09/28 M.Kidokoro [QC#21286, ADD]
        // START 2018/07/25 K.Kitachi [QC#17068, ADD]
        prm.put("ctacPsnPk", ctacPsnPk);
        // END 2018/07/25 K.Kitachi [QC#17068, ADD]
        return (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getFleetDsContrDtlInfo", prm);
    }
    // Mod End   12/16/2016 <QC#16646>
    // Mod End   08/08/2016 <QC#8293>

    // Mod Strat 08/08/2016 <QC#8293>
    // Mod Strat 12/16/2016 <QC#16646>
    @SuppressWarnings("unchecked")
    private List<Map<String, Object>> getAggDsContrDtlInfo(BigDecimal dsContrPk
            // START 04/12/2016 T.Aoyagi [QC#6829, MOD]
            // START 2017/09/28 M.Kidokoro [QC#21286, MOD]
//            , String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg, String invTpCd, String nextBllgDt, String billToCustCd) throws SQLException {
            // START 2018/07/25 K.Kitachi [QC#17068, MOD]
//            , String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg, String invTpCd, String nextBllgDt, String billToCustCd, BigDecimal svcCrRebilPk, BigDecimal svcCrRebilDtlPk) throws SQLException {
            , String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg, String invTpCd, String nextBllgDt, String billToCustCd, BigDecimal svcCrRebilPk, BigDecimal svcCrRebilDtlPk, BigDecimal ctacPsnPk) throws SQLException {
            // END 2018/07/25 K.Kitachi [QC#17068, MOD]
            // END 2017/09/28 M.Kidokoro [QC#21286, MOD]
            // END 04/12/2016 T.Aoyagi [QC#6829, MOD]
        Map<String, Object> prm = new HashMap<String, Object>();
        prm.put("glblCmpyCd", glblCmpyCd);
        prm.put("slsDt", slsDt);
        //Mod Start 03/17/2016 <QC#4166>
        prm.put("bllgCpltStsCdList", this.bllgCpltStsCdList);
        //Mod End   03/17/2016 <QC#4166>
        prm.put("dsContrPk", dsContrPk);
        prm.put("dsContrDtlTpCd", DS_CONTR_DTL_TP.ACCESSORIES);
        prm.put("dsContrCatgCd", DS_CONTR_CATG.AGGREGATE);
        prm.put("baseBllgFlg", baseBllgFlg);
        prm.put("mtrBllgFlg", mtrBllgFlg);
        prm.put("invSeptBaseUsgFlg", invSeptBaseUsgFlg);
        // START 04/12/2016 T.Aoyagi [QC#6829, ADD]
        prm.put("invTpCd", invTpCd);
        // END 04/12/2016 T.Aoyagi [QC#6829, ADD]
        prm.put("nextBllgDt", nextBllgDt);
        // Add Start 08/30/2016 <QC#13706>
        prm.put("svcCovFeatCd", SVC_COV_FEAT.INV_DISP);
        prm.put("slsDt", slsDt);
        prm.put("defEffThruDt", DEF_EFF_THRU_DT);
        prm.put("billToCustCd", billToCustCd);
        // Add End   08/30/2016 <QC#13706>
        // START 2017/09/28 M.Kidokoro [QC#21286, ADD]
        prm.put("svcCrRebilPk", svcCrRebilPk);
        prm.put("svcCrRebilDtlPk", svcCrRebilDtlPk);
        // END 2017/09/28 M.Kidokoro [QC#21286, ADD]
        // START 2018/07/25 K.Kitachi [QC#17068, ADD]
        prm.put("ctacPsnPk", ctacPsnPk);
        // END 2018/07/25 K.Kitachi [QC#17068, ADD]
        return (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getAggDsContrDtlInfo", prm);
    }
    // Mod End   12/16/2016 <QC#16646>
    // Mod End   08/08/2016 <QC#8293>

    private MDSETMsg getMdse(String mdseCd) {
        MDSETMsg tMsg = new MDSETMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.mdseCd, mdseCd);
        return (MDSETMsg) S21FastTBLAccessor.findByKey(tMsg);
    }

    private SHIP_TO_CUSTTMsg getShipToCust(String shipToCustCd) {
        SHIP_TO_CUSTTMsg tMsg = new SHIP_TO_CUSTTMsg();
        // START 2023/04/26 R.Avelino [QC#61411, MOD]
        // tMsg.setSQLID("004");
        tMsg.setSQLID("024");
        // END 2023/04/26 R.Avelino [QC#61411, MOD]
        tMsg.setConditionValue("glblCmpyCd01", glblCmpyCd);
        tMsg.setConditionValue("shipToCustCd01", shipToCustCd);
        // START 2023/04/26 R.Avelino [QC#61411, ADD]
        tMsg.setConditionValue("rgtnStsCd01", RGTN_STS.READY_FOR_ORDER_TAKING);
        // END 2023/04/26 R.Avelino [QC#61411, ADD]
        SHIP_TO_CUSTTMsgArray tMsgs = (SHIP_TO_CUSTTMsgArray) EZDTBLAccessor.findByCondition(tMsg);
        if (tMsgs.length() == 0) {
            return null;
        } else {
            return tMsgs.no(0);
        }
    }

    private DS_INV_TPTMsg getDsInvTp(String dsInvTpCd) {
        return (DS_INV_TPTMsg) ZYPCodeDataUtil.findByCode(DS_INV_TP.class, glblCmpyCd, dsInvTpCd);
    }

    private SVC_CONTR_BLLGTMsg getSvcContrBllg(BigDecimal svcContrBllgPk) {
        SVC_CONTR_BLLGTMsg tMsg = new SVC_CONTR_BLLGTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.svcContrBllgPk, svcContrBllgPk);
        return (SVC_CONTR_BLLGTMsg) S21FastTBLAccessor.findByKeyForUpdate(tMsg);
    }

    private DS_CONTR_DTLTMsg getDsContrDtl(BigDecimal dsContrDtlPk) {
        DS_CONTR_DTLTMsg tMsg = new DS_CONTR_DTLTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.dsContrDtlPk, dsContrDtlPk);
        return (DS_CONTR_DTLTMsg) S21FastTBLAccessor.findByKeyForUpdate(tMsg);
    }

    private DS_CONTR_DTL_TPTMsg getDsContrDtlTp(String dsContrDtlTpCd) {
        return (DS_CONTR_DTL_TPTMsg) ZYPCodeDataUtil.findByCode(DS_CONTR_DTL_TP.class, glblCmpyCd, dsContrDtlTpCd);
    }

    private SVC_CONTR_BLLG_ALLOCTMsgArray getSvcContrBaseBllgAllocList(BigDecimal svcContrBaseBllgPk) {
        SVC_CONTR_BLLG_ALLOCTMsg tMsg = new SVC_CONTR_BLLG_ALLOCTMsg();
        tMsg.setSQLID("001");
        tMsg.setConditionValue("glblCmpyCd01", glblCmpyCd);
        tMsg.setConditionValue("svcContrBaseBllgPk01", svcContrBaseBllgPk);
        return (SVC_CONTR_BLLG_ALLOCTMsgArray) EZDTBLAccessor.findByCondition(tMsg);
    }

    private SVC_CONTR_BLLG_ALLOCTMsgArray getSvcContrMtrBllgAllocList(BigDecimal svcContrMtrBllgPk) {
        SVC_CONTR_BLLG_ALLOCTMsg tMsg = new SVC_CONTR_BLLG_ALLOCTMsg();
        tMsg.setSQLID("002");
        tMsg.setConditionValue("glblCmpyCd01", glblCmpyCd);
        tMsg.setConditionValue("svcContrMtrBllgPk01", svcContrMtrBllgPk);
        return (SVC_CONTR_BLLG_ALLOCTMsgArray) EZDTBLAccessor.findByCondition(tMsg);
    }

    private SVC_CONTR_BASE_BLLGTMsgArray getSvcContrBaseBllgList(BigDecimal svcContrBllgPk) {
        SVC_CONTR_BASE_BLLGTMsg tMsg = new SVC_CONTR_BASE_BLLGTMsg();
        tMsg.setSQLID("001");
        tMsg.setConditionValue("glblCmpyCd01", glblCmpyCd);
        tMsg.setConditionValue("svcContrBllgPk01", svcContrBllgPk);
        return (SVC_CONTR_BASE_BLLGTMsgArray) EZDTBLAccessor.findByCondition(tMsg);
    }

    private SVC_CONTR_MTR_BLLGTMsgArray getSvcContrMtrBllgList(BigDecimal svcContrBllgPk) {
        SVC_CONTR_MTR_BLLGTMsg tMsg = new SVC_CONTR_MTR_BLLGTMsg();
        tMsg.setSQLID("001");
        tMsg.setConditionValue("glblCmpyCd01", glblCmpyCd);
        tMsg.setConditionValue("svcContrBllgPk01", svcContrBllgPk);
        return (SVC_CONTR_MTR_BLLGTMsgArray) EZDTBLAccessor.findByCondition(tMsg);
    }

    private SVC_CONTR_XS_MTR_BLLGTMsgArray getSvcContrXsMtrBllgList(BigDecimal svcContrMtrBllgPk) {
        SVC_CONTR_XS_MTR_BLLGTMsg tMsg = new SVC_CONTR_XS_MTR_BLLGTMsg();
        tMsg.setSQLID("001");
        tMsg.setConditionValue("glblCmpyCd01", glblCmpyCd);
        tMsg.setConditionValue("svcContrMtrBllgPk01", svcContrMtrBllgPk);
        return (SVC_CONTR_XS_MTR_BLLGTMsgArray) EZDTBLAccessor.findByCondition(tMsg);
    }

    @SuppressWarnings("unchecked")
    private List<BigDecimal> getInvProcSvcPhysMtrRead(BigDecimal dsContrBllgMtrPk, String dsContrBllgMtrId, BigDecimal svcMachMstrPk, BigDecimal dsContrDtlPk, BigDecimal svcPhysMtrReadGrpSq) {
        Map<String, Object> prm = new HashMap<String, Object>();
        prm.put("glblCmpyCd", glblCmpyCd);
        prm.put("dsContrBllgMtrPk", dsContrBllgMtrPk);
        prm.put("svcMachMstrPk", svcMachMstrPk);
        prm.put("dsContrDtlPk", dsContrDtlPk);
        prm.put("svcPhysMtrReadGrpSq", svcPhysMtrReadGrpSq);
        List<Map<String, BigDecimal>> rsltList = (List<Map<String, BigDecimal>>) ssmBatClnt.queryObjectList("getInvProcSvcPhysMtrRead", prm);
        List<BigDecimal> list = new ArrayList<BigDecimal>();
        for (Map<String, BigDecimal> rsltMap : rsltList) {
            list.add((BigDecimal) rsltMap.get("SVC_PHYS_MTR_READ_PK"));
        }
        return list;
    }

    private SVC_PHYS_MTR_READTMsg getSvcPhysMtrRead(BigDecimal svcPhysMtrReadPk) {
        SVC_PHYS_MTR_READTMsg tMsg = new SVC_PHYS_MTR_READTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.svcPhysMtrReadPk, svcPhysMtrReadPk);
        return (SVC_PHYS_MTR_READTMsg) S21FastTBLAccessor.findByKeyForUpdate(tMsg);
    }

    private void adjSvcInvLineAllocFrac(List<SVC_INV_LINE_ALLOCTMsg> oriSvcInvLineAllocTMsgList, BigDecimal grsDealAmt, BigDecimal grsFuncAmt, BigDecimal discDealAmt, BigDecimal discFuncAmt, BigDecimal netDealAmt, BigDecimal netFuncAmt,
            BigDecimal taxDealAmt, BigDecimal taxFuncAmt) {

        // QC2973 start
        List<SVC_INV_LINE_ALLOCTMsg> svcInvLineAllocTMsgList = new ArrayList<SVC_INV_LINE_ALLOCTMsg>(oriSvcInvLineAllocTMsgList);
        // QC2973 end

        if (!svcInvLineAllocTMsgList.isEmpty()) {

            BigDecimal allocTotDealGrsTotPrcAmt = BigDecimal.ZERO;
            BigDecimal allocTotFuncGrsTotPrcAmt = BigDecimal.ZERO;
            BigDecimal allocTotDealNetUnitPrcAmt = BigDecimal.ZERO;
            BigDecimal allocTotFuncNetUnitPrcAmt = BigDecimal.ZERO;
            BigDecimal allocTotDealGrsUnitPrcAmt = BigDecimal.ZERO;
            BigDecimal allocTotFuncGrsUnitPrcAmt = BigDecimal.ZERO;
            BigDecimal allocTotInvLineDealNetAmt = BigDecimal.ZERO;
            BigDecimal allocTotInvLineFuncNetAmt = BigDecimal.ZERO;
            BigDecimal allocTotInvLineFuncTaxAmt = BigDecimal.ZERO;
            BigDecimal allocTotInvLineDealTaxAmt = BigDecimal.ZERO;
            BigDecimal allocTotDealDiscUnitPrcAmt = BigDecimal.ZERO;
            BigDecimal allocTotFuncDiscUnitPrcAmt = BigDecimal.ZERO;

            for (SVC_INV_LINE_ALLOCTMsg svcInvLineAllocTMsg : svcInvLineAllocTMsgList) {
                allocTotDealGrsTotPrcAmt = allocTotDealGrsTotPrcAmt.add(svcInvLineAllocTMsg.dealGrsTotPrcAmt.getValue());
                allocTotFuncGrsTotPrcAmt = allocTotFuncGrsTotPrcAmt.add(svcInvLineAllocTMsg.funcGrsTotPrcAmt.getValue());
                allocTotDealNetUnitPrcAmt = allocTotDealNetUnitPrcAmt.add(svcInvLineAllocTMsg.dealNetUnitPrcAmt.getValue());
                allocTotFuncNetUnitPrcAmt = allocTotFuncNetUnitPrcAmt.add(svcInvLineAllocTMsg.funcNetUnitPrcAmt.getValue());
                allocTotDealGrsUnitPrcAmt = allocTotDealGrsUnitPrcAmt.add(svcInvLineAllocTMsg.dealGrsUnitPrcAmt.getValue());
                allocTotFuncGrsUnitPrcAmt = allocTotFuncGrsUnitPrcAmt.add(svcInvLineAllocTMsg.funcGrsUnitPrcAmt.getValue());
                allocTotInvLineDealNetAmt = allocTotInvLineDealNetAmt.add(svcInvLineAllocTMsg.invLineDealNetAmt.getValue());
                allocTotInvLineFuncNetAmt = allocTotInvLineFuncNetAmt.add(svcInvLineAllocTMsg.invLineFuncNetAmt.getValue());
                allocTotInvLineDealTaxAmt = allocTotInvLineDealTaxAmt.add(svcInvLineAllocTMsg.invLineDealTaxAmt.getValue());
                allocTotInvLineFuncTaxAmt = allocTotInvLineFuncTaxAmt.add(svcInvLineAllocTMsg.invLineFuncTaxAmt.getValue());
                allocTotDealDiscUnitPrcAmt = allocTotDealDiscUnitPrcAmt.add(svcInvLineAllocTMsg.dealDiscUnitPrcAmt.getValue());
                allocTotFuncDiscUnitPrcAmt = allocTotFuncDiscUnitPrcAmt.add(svcInvLineAllocTMsg.funcDiscUnitPrcAmt.getValue());
            }

            // QC2417 start
            // BigDecimal allocAdjDealGrsTotPrcAmt =
            // netDealAmt.subtract(allocTotDealGrsTotPrcAmt);
            // BigDecimal allocAdjFuncGrsTotPrcAmt =
            // netFuncAmt.subtract(allocTotFuncGrsTotPrcAmt);
            BigDecimal allocAdjDealGrsTotPrcAmt = grsDealAmt.subtract(allocTotDealGrsTotPrcAmt);
            BigDecimal allocAdjFuncGrsTotPrcAmt = grsFuncAmt.subtract(allocTotFuncGrsTotPrcAmt);
            // QC2417 end
            BigDecimal allocAdjDealNetUnitPrcAmt = netDealAmt.subtract(allocTotDealNetUnitPrcAmt);
            BigDecimal allocAdjFuncNetUnitPrcAmt = netFuncAmt.subtract(allocTotFuncNetUnitPrcAmt);
            BigDecimal allocAdjDealGrsUnitPrcAmt = grsDealAmt.subtract(allocTotDealGrsUnitPrcAmt);
            BigDecimal allocAdjFuncGrsUnitPrcAmt = grsFuncAmt.subtract(allocTotFuncGrsUnitPrcAmt);
            BigDecimal allocAdjInvLineDealNetAmt = netDealAmt.subtract(allocTotInvLineDealNetAmt);
            BigDecimal allocAdjInvLineFuncNetAmt = netFuncAmt.subtract(allocTotInvLineFuncNetAmt);
            BigDecimal allocAdjInvLineDealTaxAmt = taxDealAmt.subtract(allocTotInvLineDealTaxAmt);
            BigDecimal allocAdjInvLineFuncTaxAmt = taxFuncAmt.subtract(allocTotInvLineFuncTaxAmt);
            BigDecimal allocAdjDealDiscUnitPrcAmt = discDealAmt.subtract(allocTotDealDiscUnitPrcAmt);
            BigDecimal allocAdjFuncDiscUnitPrcAmt = discFuncAmt.subtract(allocTotFuncDiscUnitPrcAmt);

            Collections.sort(svcInvLineAllocTMsgList, new SVC_INV_LINE_ALLOCTMsgComparator());

            SVC_INV_LINE_ALLOCTMsg svcInvLineAllocTMsg = svcInvLineAllocTMsgList.get(0);

            BigDecimal allocDealGrsTotPrcAmt = svcInvLineAllocTMsg.dealGrsTotPrcAmt.getValue().add(allocAdjDealGrsTotPrcAmt);
            BigDecimal allocFuncGrsTotPrcAmt = svcInvLineAllocTMsg.funcGrsTotPrcAmt.getValue().add(allocAdjFuncGrsTotPrcAmt);
            BigDecimal allocDealNetUnitPrcAmt = svcInvLineAllocTMsg.dealNetUnitPrcAmt.getValue().add(allocAdjDealNetUnitPrcAmt);
            BigDecimal allocFuncNetUnitPrcAmt = svcInvLineAllocTMsg.funcNetUnitPrcAmt.getValue().add(allocAdjFuncNetUnitPrcAmt);
            BigDecimal allocDealGrsUnitPrcAmt = svcInvLineAllocTMsg.dealGrsUnitPrcAmt.getValue().add(allocAdjDealGrsUnitPrcAmt);
            BigDecimal allocFuncGrsUnitPrcAmt = svcInvLineAllocTMsg.funcGrsUnitPrcAmt.getValue().add(allocAdjFuncGrsUnitPrcAmt);
            BigDecimal allocInvLineDealNetAmt = svcInvLineAllocTMsg.invLineDealNetAmt.getValue().add(allocAdjInvLineDealNetAmt);
            BigDecimal allocInvLineFuncNetAmt = svcInvLineAllocTMsg.invLineFuncNetAmt.getValue().add(allocAdjInvLineFuncNetAmt);
            BigDecimal allocInvLineDealTaxAmt = svcInvLineAllocTMsg.invLineDealTaxAmt.getValue().add(allocAdjInvLineDealTaxAmt);
            BigDecimal allocInvLineFuncTaxAmt = svcInvLineAllocTMsg.invLineFuncTaxAmt.getValue().add(allocAdjInvLineFuncTaxAmt);
            BigDecimal allocDealDiscUnitPrcAmt = svcInvLineAllocTMsg.dealDiscUnitPrcAmt.getValue().add(allocAdjDealDiscUnitPrcAmt);
            BigDecimal allocFuncDiscUnitPrcAmt = svcInvLineAllocTMsg.funcDiscUnitPrcAmt.getValue().add(allocAdjFuncDiscUnitPrcAmt);

            ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealGrsTotPrcAmt, allocDealGrsTotPrcAmt);
            ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcGrsTotPrcAmt, allocFuncGrsTotPrcAmt);
            ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealNetUnitPrcAmt, allocDealNetUnitPrcAmt);
            ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcNetUnitPrcAmt, allocFuncNetUnitPrcAmt);
            ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealGrsUnitPrcAmt, allocDealGrsUnitPrcAmt);
            ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcGrsUnitPrcAmt, allocFuncGrsUnitPrcAmt);
            ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineDealNetAmt, allocInvLineDealNetAmt);
            ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineFuncNetAmt, allocInvLineFuncNetAmt);
            ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineDealTaxAmt, allocInvLineDealTaxAmt);
            ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.invLineFuncTaxAmt, allocInvLineFuncTaxAmt);
            ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.dealDiscUnitPrcAmt, allocDealDiscUnitPrcAmt);
            ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.funcDiscUnitPrcAmt, allocFuncDiscUnitPrcAmt);
        }
    }

    private SVC_INV_LINETMsg getSvcInvLineTMsg(String custCd, String svcInvNum, BigDecimal svcInvLinePk, String svcInvLineNum, String svcInvChrgTpCd, String mdlNm,
            BigDecimal slsTaxRate, BigDecimal grsDealAmt, BigDecimal grsFuncAmt, BigDecimal discDealAmt, BigDecimal discFuncAmt, BigDecimal netDealAmt, BigDecimal netFuncAmt,
            BigDecimal taxDealAmt, BigDecimal taxFuncAmt, String taxCalcGeoCd, Map<String, Object> dsContrDtlInfo, DS_CONTRTMsg dsContrTMsg, SVC_CONTR_BLLGTMsg svcContrBllgTMsg, SVC_CONTR_BASE_BLLGTMsg svcContrBaseBllgTMsg, SVC_CONTR_MTR_BLLGTMsg svcContrMtrBllgTMsg) {

        String baseChrgFlg = svcContrBllgTMsg.baseChrgFlg.getValue();
        String dsContrDtlTpCd = (String) dsContrDtlInfo.get("DS_CONTR_DTL_TP_CD");
        BigDecimal prntDsContrDtlPk = (BigDecimal) dsContrDtlInfo.get("PRNT_DS_CONTR_DTL_PK");

        SVC_INV_LINETMsg svcInvLineTMsg = new SVC_INV_LINETMsg();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.glblCmpyCd, glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLinePk, svcInvLinePk);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvNum, svcInvNum);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLineNum, svcInvLineNum);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvChrgTpCd, svcInvChrgTpCd);

        // Mod Start 03/29/2016 <QC#5863>
        if (DS_CONTR_DTL_TP.FLEET.equals((String) dsContrDtlInfo.get("DS_CONTR_DTL_TP_CD"))) {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdseCd, spclFltMdseCd);
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdseNm, spclFltMdseNm);
        } else {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdseCd, (String) dsContrDtlInfo.get("MDSE_CD"));
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdseNm, (String) dsContrDtlInfo.get("MDSE_NM"));
        }
        // Mod End 03/29/2016 <QC#5863>

        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.trxCd, TRX.SALES);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.trxRsnCd, TRX_RSN.PURCHASE_STOCK_IN);
        // START 2017/11/17 K.Kojima [QC#21918,MOD]
        // ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.slsRepTocCd, (String) dsContrDtlInfo.get("TOC_CD"));
        if (ZYPCommonFunc.hasValue(dsContrTMsg.dsContrCatgCd) && DS_CONTR_CATG.FLEET.equals(dsContrTMsg.dsContrCatgCd.getValue())) {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.slsRepTocCd, (String) dsContrDtlInfo.get("TOC_CD"));
        } else {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.slsRepTocCd, getSalesRep(svcContrBllgTMsg.svcMachMstrPk.getValue()));
        }
        // END 2017/11/17 K.Kojima [QC#21918,MOD]
        // START 2019/03/11 [QC#30675, ADD]
        if (!hasValue(svcInvLineTMsg.slsRepTocCd)) {
            return null;
        }
        // END 2019/03/11 [QC#30675, ADD]
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvQty, BigDecimal.ONE);
        svcInvLineTMsg.svcInvUnitHrsAot.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dealUnitPrcAmt, grsDealAmt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.funcUnitPrcAmt, grsFuncAmt);
        svcInvLineTMsg.svcInvMnAot.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDealSlsAmt, grsDealAmt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineFuncSlsAmt, grsFuncAmt);
        svcInvLineTMsg.svcLborDealAmt.clear();
        svcInvLineTMsg.svcLborFuncAmt.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDealNetAmt, netDealAmt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineFuncNetAmt, netFuncAmt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.slsTaxRate, slsTaxRate);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDealTaxAmt, taxDealAmt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineFuncTaxAmt, taxFuncAmt);
        svcInvLineTMsg.invLineDiscRate.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDealDiscAmt, discDealAmt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineFuncDiscAmt, discFuncAmt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dealDiscUnitPrcAmt, discDealAmt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.funcDiscUnitPrcAmt, discFuncAmt);
        svcInvLineTMsg.coaCmpyCd.clear();
        svcInvLineTMsg.coaAfflCd.clear();
        svcInvLineTMsg.coaBrCd.clear();
        svcInvLineTMsg.coaChCd.clear();
        svcInvLineTMsg.coaCcCd.clear();
        svcInvLineTMsg.coaAcctCd.clear();
        svcInvLineTMsg.coaProdCd.clear();
        svcInvLineTMsg.coaProjCd.clear();
        svcInvLineTMsg.coaExtnCd.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.shipToCustCd, custCd);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdlNm, mdlNm);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdlId, (BigDecimal) dsContrDtlInfo.get("MDL_ID"));
        svcInvLineTMsg.svcInitChrgPct.clear();
        svcInvLineTMsg.svcTaskNum.clear();
        svcInvLineTMsg.svcInvTz.clear();
        svcInvLineTMsg.svcTaskCpltDt.clear();
        svcInvLineTMsg.svcTaskCpltTm.clear();
        svcInvLineTMsg.crDrSubRsnCd.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcContrBllgPk, svcContrBllgTMsg.svcContrBllgPk);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrPk, dsContrTMsg.dsContrPk);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrDtlPk, svcContrBllgTMsg.dsContrDtlPk);

        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.taxCalcGeoCd, taxCalcGeoCd);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcPgmMdseCd, (String) dsContrDtlInfo.get("SVC_PGM_MDSE_CD"));
        // Add Start 03/23/2016 <QC#5863>
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcPgmMdseNm, getSvcPgmMdseNm((String) dsContrDtlInfo.get("SVC_PGM_MDSE_CD")));
        // Add End   03/23/2016 <QC#5863>
        // Add Start 08/30/2016 <QC#13706>
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invPrintCovTxt, (String) dsContrDtlInfo.get("SVC_COV_DTL_VAL_TXT"));
        // Add End   08/30/2016 <QC#13706>
        if (ZYPConstant.FLG_ON_Y.equals(baseChrgFlg)) {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerFromDt, svcContrBaseBllgTMsg.baseBllgFromDt);
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerThruDt, svcContrBaseBllgTMsg.baseBllgThruDt);
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgCycleCd, (String) dsContrDtlInfo.get("BASE_BLLG_CYCLE_CD"));
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerMthAot, svcContrBaseBllgTMsg.basePerMthAot);
            // START 2016/03/15 T.Aoyagi [QC#3818, MOD]
//            BigDecimal copyInclQty = getCopyInclQty((BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK"));
            //Mod Start 05/25/2016 <QC#7636>
//            BigDecimal copyInclQty = getCopyInclQty(svcContrBllgTMsg.dsContrBllgMtrPk.getValue());
            BigDecimal copyInclQty = getCopyInclQty((BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK"), svcContrBaseBllgTMsg.baseBllgThruDt.getValue());
            //Mod End   05/25/2016 <QC#7636>
            // END 2016/03/15 T.Aoyagi [QC#3818, MOD]
            if (copyInclQty != null) {
                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.copyInclQty, copyInclQty);
            }
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.basePrcAdjDealAmt, svcContrBaseBllgTMsg.basePrcAdjDealAmt);
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.basePrcAdjFuncAmt, svcContrBaseBllgTMsg.basePrcAdjFuncAmt);
        } else {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerFromDt, svcContrMtrBllgTMsg.mtrBllgFromDt);
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerThruDt, svcContrMtrBllgTMsg.mtrBllgThruDt);
            // Mod Start 04/15/2016 <QC#3985>
//            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgCycleCd, (String) dsContrDtlInfo.get("MTR_BLLG_CYCLE_CD"));
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgCycleCd, (String) dsContrDtlInfo.get("BLLG_MTR_BLLG_CYCLE_CD"));
            // Mod End   04/15/2016 <QC#3985>
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerMthAot, svcContrMtrBllgTMsg.mtrPerMthAot);
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.copyInclQty, svcContrMtrBllgTMsg.copyInclQty);
            DS_CONTR_BLLG_MTRTMsg dsContrBllgMtrTMsg = getDsContrBllgMtrTMsg(svcContrBllgTMsg.dsContrBllgMtrPk.getValue());
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.intgMdseCd, dsContrBllgMtrTMsg.intgMdseCd);
        }
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcMachMstrPk, svcContrBllgTMsg.svcMachMstrPk);
        svcInvLineTMsg.prntSvcInvLinePk.clear();
        SVC_MACH_MSTRTMsg svcMachMstrTMsg = getSvcMachMstrTMsg(svcContrBllgTMsg.svcMachMstrPk.getValue());
        if (svcMachMstrTMsg != null) {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.serNum, svcMachMstrTMsg.serNum);
            // START 2018/05/08 K.Kitachi [QC#23604, MOD]
//            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.firstBllgAttrbValTxt, svcMachMstrTMsg.ctrlFldTxt_01);
//            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.scdBllgAttrbValTxt, svcMachMstrTMsg.ctrlFldTxt_02);
//            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.thirdBllgAttrbValTxt, svcMachMstrTMsg.ctrlFldTxt_03);
//            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.frthBllgAttrbValTxt, svcMachMstrTMsg.ctrlFldTxt_04);
//            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.fifthBllgAttrbValTxt, svcMachMstrTMsg.ctrlFldTxt_05);
//            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.sixthBllgAttrbValTxt, svcMachMstrTMsg.ctrlFldTxt_06);
            SVC_MACH_MSTRTMsg mainMachMstrTMsg = getMainMachMstrTMsg(svcMachMstrTMsg);
            if (mainMachMstrTMsg != null) {
                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.firstBllgAttrbValTxt, mainMachMstrTMsg.ctrlFldTxt_01);
                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.scdBllgAttrbValTxt, mainMachMstrTMsg.ctrlFldTxt_02);
                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.thirdBllgAttrbValTxt, mainMachMstrTMsg.ctrlFldTxt_03);
                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.frthBllgAttrbValTxt, mainMachMstrTMsg.ctrlFldTxt_04);
                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.fifthBllgAttrbValTxt, mainMachMstrTMsg.ctrlFldTxt_05);
                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.sixthBllgAttrbValTxt, mainMachMstrTMsg.ctrlFldTxt_06);
            } else {
                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.firstBllgAttrbValTxt, svcMachMstrTMsg.ctrlFldTxt_01);
                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.scdBllgAttrbValTxt, svcMachMstrTMsg.ctrlFldTxt_02);
                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.thirdBllgAttrbValTxt, svcMachMstrTMsg.ctrlFldTxt_03);
                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.frthBllgAttrbValTxt, svcMachMstrTMsg.ctrlFldTxt_04);
                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.fifthBllgAttrbValTxt, svcMachMstrTMsg.ctrlFldTxt_05);
                ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.sixthBllgAttrbValTxt, svcMachMstrTMsg.ctrlFldTxt_06);
            }
            // END 2018/05/08 K.Kitachi [QC#23604, MOD]
        }

        // Mod Start 2019/01/25 QC#29689
        BigDecimal poDsContrDtlPk = null;
        BigDecimal poPrntDsContrDtlPk = null;
        if (DS_CONTR_DTL_TP.ACCESSORIES.equals(dsContrDtlTpCd)) {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLineTpCd, SVC_INV_LINE_TP.ACCESSORY);
            poDsContrDtlPk = svcContrBllgTMsg.dsContrDtlPk.getValue();
            poPrntDsContrDtlPk = prntDsContrDtlPk;
            // Add Start 03/23/2016 <QC#5863>
            // START 2018/08/07 K.Kojima [QC#27510,MOD]
            // ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.prntSvcInvLinePk, getPrntSvcInvLinePk(svcContrBllgTMsg.prntSvcContrBllgPk.getValue()));
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.prntSvcInvLinePk, getPrntSvcInvLinePk(svcContrBllgTMsg.prntSvcContrBllgPk.getValue(), svcInvNum));
            // END 2018/08/07 K.Kojima [QC#27510,MOD]
            // Add End   03/23/2016 <QC#5863>
        // Add Start 03/25/2016 <QC#5864>
        } else if (DS_CONTR_DTL_TP.FLEET.equals(dsContrDtlTpCd)) {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLineTpCd, SVC_INV_LINE_TP.FLEET);
            poDsContrDtlPk = svcContrBllgTMsg.dsContrDtlPk.getValue();
        // Add End 03/25/2016 <QC#5864>
        } else {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLineTpCd, SVC_INV_LINE_TP.MACHINE);
            poDsContrDtlPk = svcContrBllgTMsg.dsContrDtlPk.getValue();
        }
        // Mod Start 2019/01/21 QC#26928
        Map<String, Object> crCardPoInfo = getDsContrCrCardPo(svcContrBllgTMsg.dsContrPk.getValue()
                                                                , poDsContrDtlPk
        // START 2016/10/18 T.Kanasaka [QC#13009, MOD]
//                                                                , svcContrBllgTMsg.dsContrBllgMtrPk.getValue());
                                                                , svcContrBllgTMsg.dsContrBllgMtrPk.getValue()
                                                                , dsContrTMsg.pmtTermCashDiscCd.getValue()
                                                                , svcContrBllgTMsg.svcContrBllgThruDt.getValue()
        // START 2023/08/30 [QC#61805,ADD]
                                                                , svcContrBllgTMsg.svcContrBllgFromDt.getValue()
        // END 2023/08/30 [QC#61805,ADD]
                                                                , poPrntDsContrDtlPk);
        // END 2016/10/18 T.Kanasaka [QC#13009, MOD]
        // Mod End 2019/01/21 QC#26928
        // Mod End 2019/01/25 QC#29689
        if (crCardPoInfo != null) {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.custIssPoNum, (String) crCardPoInfo.get("CUST_PO_NUM"));
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.custIssPoDt, (String) crCardPoInfo.get("PO_DT"));
        }

        BLLG_CYCLETMsg bllgCycleTMsg = getBllgCycleTMsg(svcInvLineTMsg.bllgCycleCd.getValue());
        if (bllgCycleTMsg != null) {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.uomCd, bllgCycleTMsg.bllgCycleUomCd);
        }
        BigDecimal invDispQty = BigDecimal.ONE;
        DS_CONTR_BLLG_SCHDTMsg schdTMsg = getDsContrBllgSchdTMsg(svcContrBllgTMsg.dsContrBllgSchdPk.getValue());
        if (schdTMsg != null) {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invDispUnitPrcAmt, schdTMsg.basePrcDealAmt);

            DS_CONTR_BLLG_SCHD_SMRYTMsg schdSmryTMsg = getDsContrBllgSchdSmryTMsg(schdTMsg.dsContrBllgSchdSmryPk.getValue());
            if (schdSmryTMsg != null && bllgCycleTMsg != null && BLLG_CYCLE.DAILY.equals(schdSmryTMsg.perBllgCycleCd.getValue())) {
                BigDecimal perSchdNum = schdSmryTMsg.perSchdNum.getValue();
                BigDecimal prrtDivRate = bllgCycleTMsg.prrtDivRate.getValue();
                invDispQty = perSchdNum.divide(prrtDivRate, 0, RoundingMode.HALF_UP);
            }
        }
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invDispQty, invDispQty);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrBllgSchdPk, svcContrBllgTMsg.dsContrBllgSchdPk);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvEligFlg, ZYPConstant.FLG_OFF_N);

        // START 2017/09/05 T.Kanasaka [QC#15134,ADD]
        String mtrRollOverFlg = ZYPConstant.FLG_OFF_N;
        String mtrExchFlg = ZYPConstant.FLG_OFF_N;
        if (SVC_INV_CHRG_TP.METER_CHARGE.equals(svcInvChrgTpCd)) {
            List<String> cntrResetTpList = getRolloverExchange(svcInvLineTMsg.dsContrDtlPk.getValue(), svcInvLinePk);
            if (cntrResetTpList.contains(CNTR_RESET_TP.METER_ROLLOVER)) {
                mtrRollOverFlg = ZYPConstant.FLG_ON_Y;
            }
            if (cntrResetTpList.contains(CNTR_RESET_TP.METER_EXCHANGE)) {
                mtrExchFlg = ZYPConstant.FLG_ON_Y;
            }
        }
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mtrRollOverFlg, mtrRollOverFlg);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mtrExchFlg, mtrExchFlg);
        // END 2017/09/05 T.Kanasaka [QC#15134,ADD]

        return svcInvLineTMsg;
    }
    // Add Start 03/23/2016 <QC#5863>
    private String getSvcPgmMdseNm(String svcPrmMdseCd) {
        String mdseNm = null;
        if (!hasValue(svcPrmMdseCd)) {
            return mdseNm;
        }
        MDSETMsg inMsg = getMdse(svcPrmMdseCd);
        if (inMsg != null) {
            mdseNm = inMsg.mdseNm.getValue();
        }
        return mdseNm;
    }

    // START 2018/08/07 K.Kojima [QC#27510,MOD]
    // private BigDecimal getPrntSvcInvLinePk(BigDecimal prntSvcContrBllgPk) {
    private BigDecimal getPrntSvcInvLinePk(BigDecimal prntSvcContrBllgPk, String svcInvNum) {
    // END 2018/08/07 K.Kojima [QC#27510,MOD]
        BigDecimal prntSvcInvLinePk = null;
        if (!hasValue(prntSvcContrBllgPk)) {
            return prntSvcInvLinePk;
        }
        Map<String, Object> prm = new HashMap<String, Object>();
        prm.put("glblCmpyCd", glblCmpyCd);
        prm.put("svcContrBllgPk", prntSvcContrBllgPk);
        // START 2018/08/07 K.Kojima [QC#27510,ADD]
        prm.put("svcInvNum", svcInvNum);
        // END 2018/08/07 K.Kojima [QC#27510,ADD]
        prntSvcInvLinePk = (BigDecimal) ssmBatClnt.queryObject("getPrntSvcInvLinePk", prm);
        return prntSvcInvLinePk;
    }
    // Add End   03/23/2016 <QC#5863>

    // START 2017/09/05 T.Kanasaka [QC#15134,ADD]
    private List<String> getRolloverExchange(BigDecimal dsContrDtlPk, BigDecimal svcInvLinePk) {
        Map<String, Object> prm = new HashMap<String, Object>();
        prm.put("glblCmpyCd", glblCmpyCd);
        prm.put("dsContrDtlPk", dsContrDtlPk);
        prm.put("svcInvLinePk", svcInvLinePk);
        prm.put("cntrResetTpCd_Rollover", CNTR_RESET_TP.METER_ROLLOVER);
        prm.put("cntrResetTpCd_Exchange", CNTR_RESET_TP.METER_EXCHANGE);
        // add start 2018/06/04 QC#26052
        prm.put("billableReads", DS_MTR_READ_TP_GRP.BILLABLE_READS);
        // add end 2018/06/04 QC#26052
        return ssmBatClnt.queryObjectList("getRolloverExchange", prm);
    }
    // END 2017/09/05 T.Kanasaka [QC#15134,ADD]

    private SVC_INV_LINETMsg createSvcInvLineForFleetMachBase(Map<String, Object> fleetMachInfo, SVC_INV_LINETMsg prntSvcInvLineTMsg, String custCd, String svcInvLineNum) {

        BigDecimal svcInvLinePk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_SQ");

        SVC_INV_LINETMsg svcInvLineTMsg = new SVC_INV_LINETMsg();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.glblCmpyCd, glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLinePk, svcInvLinePk);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvNum, prntSvcInvLineTMsg.svcInvNum);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLineNum, svcInvLineNum);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvChrgTpCd, prntSvcInvLineTMsg.svcInvChrgTpCd);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdseCd, (String) fleetMachInfo.get("MDSE_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdseNm, (String) fleetMachInfo.get("MDSE_NM"));
        svcInvLineTMsg.trxCd.clear();
        svcInvLineTMsg.trxRsnCd.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.slsRepTocCd, (String) fleetMachInfo.get("TOC_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvQty, BigDecimal.ONE);
        svcInvLineTMsg.svcInvUnitHrsAot.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dealUnitPrcAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.funcUnitPrcAmt, BigDecimal.ZERO);
        svcInvLineTMsg.svcInvMnAot.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDealSlsAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineFuncSlsAmt, BigDecimal.ZERO);
        svcInvLineTMsg.svcLborDealAmt.clear();
        svcInvLineTMsg.svcLborFuncAmt.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDealNetAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineFuncNetAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.slsTaxRate, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDealTaxAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineFuncTaxAmt, BigDecimal.ZERO);
        svcInvLineTMsg.invLineDiscRate.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDealDiscAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineFuncDiscAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dealDiscUnitPrcAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.funcDiscUnitPrcAmt, BigDecimal.ZERO);
        svcInvLineTMsg.coaCmpyCd.clear();
        svcInvLineTMsg.coaAfflCd.clear();
        svcInvLineTMsg.coaBrCd.clear();
        svcInvLineTMsg.coaChCd.clear();
        svcInvLineTMsg.coaCcCd.clear();
        svcInvLineTMsg.coaAcctCd.clear();
        svcInvLineTMsg.coaProdCd.clear();
        svcInvLineTMsg.coaProjCd.clear();
        svcInvLineTMsg.coaExtnCd.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.shipToCustCd, custCd);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdlNm, (String) fleetMachInfo.get("MDL_NM"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdlId, (BigDecimal) fleetMachInfo.get("MDL_ID"));
        svcInvLineTMsg.svcInitChrgPct.clear();
        svcInvLineTMsg.svcTaskNum.clear();
        svcInvLineTMsg.svcInvTz.clear();
        svcInvLineTMsg.svcTaskCpltDt.clear();
        svcInvLineTMsg.svcTaskCpltTm.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerFromDt, prntSvcInvLineTMsg.bllgPerFromDt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerThruDt, prntSvcInvLineTMsg.bllgPerThruDt);
        svcInvLineTMsg.crDrSubRsnCd.clear();
        svcInvLineTMsg.svcContrBllgPk.clear();

        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrPk, (BigDecimal) fleetMachInfo.get("DS_CONTR_PK"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrDtlPk, (BigDecimal) fleetMachInfo.get("DS_CONTR_DTL_PK"));
        svcInvLineTMsg.svcContrBaseBllgPk.clear();
        svcInvLineTMsg.taxCalcGeoCd.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcPgmMdseCd, prntSvcInvLineTMsg.svcPgmMdseCd);
        // Add Start 08/30/2016 <QC#13706>
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invPrintCovTxt, prntSvcInvLineTMsg.invPrintCovTxt);
        // Add End   08/30/2016 <QC#13706>
        svcInvLineTMsg.intgMdseCd.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcMachMstrPk, (BigDecimal) fleetMachInfo.get("SVC_MACH_MSTR_PK"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.serNum, (String) fleetMachInfo.get("SER_NUM"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.custIssPoNum, prntSvcInvLineTMsg.custIssPoNum);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.custIssPoDt, prntSvcInvLineTMsg.custIssPoDt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.prntSvcInvLinePk, prntSvcInvLineTMsg.svcInvLinePk);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.firstBllgAttrbValTxt, (String) fleetMachInfo.get("CTRL_FLD_TXT_01"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.scdBllgAttrbValTxt, (String) fleetMachInfo.get("CTRL_FLD_TXT_02"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.thirdBllgAttrbValTxt, (String) fleetMachInfo.get("CTRL_FLD_TXT_03"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.frthBllgAttrbValTxt, (String) fleetMachInfo.get("CTRL_FLD_TXT_04"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.fifthBllgAttrbValTxt, (String) fleetMachInfo.get("CTRL_FLD_TXT_05"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.sixthBllgAttrbValTxt, (String) fleetMachInfo.get("CTRL_FLD_TXT_06"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgCycleCd, prntSvcInvLineTMsg.bllgCycleCd);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerMthAot, prntSvcInvLineTMsg.bllgPerMthAot);
        // Mod Start 03/25/2016 <QC#5864>
//        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLineTpCd, prntSvcInvLineTMsg.svcInvLineTpCd);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLineTpCd, SVC_INV_LINE_TP.MACHINE);
        // Mod End 03/25/2016 <QC#5864>
        svcInvLineTMsg.copyInclQty.clear();
        svcInvLineTMsg.invDispUnitPrcAmt.clear();
        svcInvLineTMsg.uomCd.clear();
        svcInvLineTMsg.invDispQty.clear();
        svcInvLineTMsg.dsContrBllgSchdPk.clear();
        svcInvLineTMsg.basePrcAdjDealAmt.clear();
        svcInvLineTMsg.basePrcAdjFuncAmt.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvEligFlg, ZYPConstant.FLG_OFF_N);
        // START 2017/09/05 T.Kanasaka [QC#15134,ADD]
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mtrRollOverFlg, ZYPConstant.FLG_OFF_N);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mtrExchFlg, ZYPConstant.FLG_OFF_N);
        // END 2017/09/05 T.Kanasaka [QC#15134,ADD]

        return svcInvLineTMsg;
    }

    @Override
    protected void termRoutine() {
        sendEmail();
        int errCnt = getSvcInvErrCount();
        setTermState(termCd, normCnt, errCnt);
        // START 2019/03/18 S.Kitamura [QC#30736,ADD]
        if (errCnt > 0) {
            String monthEndFlg = ZYPCodeDataUtil.getVarCharConstValue(NSAB0020_MONTH_END_MODE, glblCmpyCd);
            if (ZYPConstant.FLG_ON_Y.equals(monthEndFlg)) {
                // START 2019/12/02 [QC#54899,ADD]
                commit();
                // END 2019/12/02 [QC#54899,ADD]
                S21InfoLogOutput.println(NSAM0747E);
                throw new S21AbendException(NSAM0747E);
            }
        }
        // END 2019/03/18 S.Kitamura [QC#30736,ADD]
    }

    private BigDecimal exchToFuncAmt(BigDecimal dealToFuncExchRate, String dealCcyAcctArthTpCd, BigDecimal dealAmt, BigDecimal funcCcyAftDeclPntDigitNum) {
        if (ACCT_ARTH_TP_MULTIPLY.equals(dealCcyAcctArthTpCd)) {
            return dealAmt.multiply(dealToFuncExchRate).setScale(funcCcyAftDeclPntDigitNum.intValueExact(), RoundingMode.HALF_UP);
        } else if (ACCT_ARTH_TP_DIVIDE.equals(dealCcyAcctArthTpCd)) {
            return dealAmt.divide(dealToFuncExchRate, funcCcyAftDeclPntDigitNum.intValueExact(), RoundingMode.HALF_UP);
        } else {
            return null;
        }
    }

    // START 2018/05/31 K.Kojima [QC#23685,DEL]
    // private BigDecimal exchToDealAmt(BigDecimal dealToFuncExchRate, String dealCcyAcctArthTpCd, BigDecimal funcAmt, BigDecimal dealCcyAftDeclPntDigitNum) {
    //     if (ACCT_ARTH_TP_MULTIPLY.equals(dealCcyAcctArthTpCd)) {
    //         return funcAmt.divide(dealToFuncExchRate, dealCcyAftDeclPntDigitNum.intValueExact(), RoundingMode.HALF_UP);
    //     } else if (ACCT_ARTH_TP_DIVIDE.equals(dealCcyAcctArthTpCd)) {
    //         return funcAmt.multiply(dealToFuncExchRate).setScale(dealCcyAftDeclPntDigitNum.intValueExact(), RoundingMode.HALF_UP);
    //     } else {
    //         return null;
    //     }
    // }
    // END 2018/05/31 K.Kojima [QC#23685,DEL]

//    /**
//     * @param dsContrDtlPk
//     * @param svcMachMstrPk
//     * @param dsContrBllgMtrPk
//     * @param dsContrBllgMtrId
//     * @return
//     */
//    private String getMaxInvMtrReadDt(BigDecimal dsContrDtlPk, BigDecimal svcMachMstrPk, BigDecimal dsContrBllgMtrPk, String dsContrBllgMtrId, String reProcFlg, String mtrBllgThruDt) {
//        Map<String, Object> param = new HashMap<String, Object>();
//        param.put("glblCmpyCd", glblCmpyCd);
//        param.put("dsContrDtlPk", dsContrDtlPk);
//        param.put("svcMachMstrPk", svcMachMstrPk);
//        param.put("dsContrBllgMtrPk", dsContrBllgMtrPk);
//        param.put("dsContrBllgMtrId", dsContrBllgMtrId);
//        param.put("reProcFlg", reProcFlg);
//        param.put("mtrBllgThruDt", mtrBllgThruDt);
//        return (String) ssmBatClnt.queryObject("getMaxInvMtrReadDt", param);
//    }

    /**
     * @param svcContrBllgPk BigDecimal
     * @return Map<String, Object>
     */
    private List<Map<String, Object>> getSvcContrBllgAlloc(BigDecimal svcContrBllgPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("svcContrBllgPk", svcContrBllgPk);
        return (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getSvcContrBllgAlloc", param);
    }

    // START 2016/10/18 T.Kanasaka [QC#13009, MOD]
    // START 2016/06/15 T.Kanasaka [QC#9869, MOD]
    /**
     * @param svcContrBllgPk BigDecimal
     * @return Map<String, Object>
     */
    // Mod Start 2019/01/21 QC#26928
    // Mod Start 2019/01/25 QC#29689
    // START 2023/08/30 [QC#61805,MOD]
    //private Map<String, Object> getDsContrCrCardPo(BigDecimal dsContrPk, BigDecimal dsContrDtlPk, BigDecimal dsContrBllgMtrPk, String pmtTermCashDiscCd, String thruDt, BigDecimal prntDsContrDtlPk) {
    private Map<String, Object> getDsContrCrCardPo(BigDecimal dsContrPk, BigDecimal dsContrDtlPk, BigDecimal dsContrBllgMtrPk, String pmtTermCashDiscCd, String thruDt, String fromDt, BigDecimal prntDsContrDtlPk) {
    // END 2023/08/30 [QC#61805,MOD]
    // Mod End 2019/01/25 QC#29689
    // Mod End 2019/01/21 QC#26928
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("dsContrPk", dsContrPk);
        param.put("dsContrDtlPk", dsContrDtlPk);
        param.put("dsContrBllgMtrPk", dsContrBllgMtrPk);
        // START 2019/01/09 K.Morita [QC#26928,ADD]
        param.put("slsDt", thruDt);
        // END 2019/01/09 K.Morita [QC#26928,ADD]
        // Add Start 2019/01/25 QC#29689
        param.put("hdrSrchFlg", ZYPConstant.FLG_OFF_N);
        // Add End 2019/01/25 QC#29689
        // START 2019/03/28 [QC#30958,ADD]
        param.put("dsContrMachLvl1", DS_CONTR_MACH_LVL_NUM_1);
        param.put("dsContrMachLvl2", DS_CONTR_MACH_LVL_NUM_2);
        param.put("dsContrMachLvl3", DS_CONTR_MACH_LVL_NUM_3);
        // END 2019/03/28 [QC#30958,ADD]
        // START 2023/08/30 [QC#61805,ADD]
        param.put("svcContrBllgFromDt", fromDt);
        // END 2023/08/30 [QC#61805,ADD]

        Map<String, Object> crCardMap = null;
        if (PMT_TERM_CASH_DISC.CREDIT_CARD.equals(pmtTermCashDiscCd)) {
            crCardMap = (Map<String, Object>) ssmBatClnt.queryObject("getDsContrCrCard", param);
        }

        Map<String, Object> poMap = (Map<String, Object>) ssmBatClnt.queryObject("getDsContrPo", param);

        // Add Start 2019/01/25 QC#29689
        if (crCardMap == null || poMap == null) {
            param.put("hdrSrchFlg", ZYPConstant.FLG_ON_Y);
            if (hasValue(prntDsContrDtlPk)) {
                param.put("dsContrDtlPk", prntDsContrDtlPk);
            }

            if (crCardMap == null && PMT_TERM_CASH_DISC.CREDIT_CARD.equals(pmtTermCashDiscCd)) {
                crCardMap = (Map<String, Object>) ssmBatClnt.queryObject("getDsContrCrCard", param);
            }
            if (poMap == null) {
                poMap = (Map<String, Object>) ssmBatClnt.queryObject("getDsContrPo", param);
            }
        }
        // Add End 2019/01/25 QC#29689
        if (crCardMap != null && poMap != null) {
            crCardMap.putAll(poMap);
            return crCardMap;
        } else if (crCardMap == null && poMap != null) {
            return poMap;
        } else if (crCardMap != null && poMap == null) {
            return crCardMap;
        } else {
            return null;
        }
    }
    // END 2016/06/15 T.Kanasaka [QC#9869, MOD]
    // END 2016/10/18 T.Kanasaka [QC#13009, MOD]

    private SVC_CR_REBILTMsg getSvcCrRebilTMsg(BigDecimal svcCrRebilPk) {

        SVC_CR_REBILTMsg tMsg = new SVC_CR_REBILTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.svcCrRebilPk, svcCrRebilPk);
        return (SVC_CR_REBILTMsg) S21FastTBLAccessor.findByKey(tMsg);
    }

    private SVC_CR_REBIL_DTLTMsg getSvcCrRebilDtlTMsg(BigDecimal svcCrRebilDtlPk) {

        SVC_CR_REBIL_DTLTMsg tMsg = new SVC_CR_REBIL_DTLTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.svcCrRebilDtlPk, svcCrRebilDtlPk);
        return (SVC_CR_REBIL_DTLTMsg) S21FastTBLAccessor.findByKey(tMsg);
    }

    private DS_CONTR_CLSTMsg getDsContrClsTMsg(String dsContrClsCd) {

        DS_CONTR_CLSTMsg tMsg = new DS_CONTR_CLSTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.dsContrClsCd, dsContrClsCd);
        return (DS_CONTR_CLSTMsg) S21FastTBLAccessor.findByKey(tMsg);
    }

    private Map<String, Object> getBillToCust(String sellToCustCd) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("sellToCustCd", sellToCustCd);
        return (Map<String, Object>) ssmBatClnt.queryObject("getBillToCust", param);
    }

    private DS_CONTR_BLLG_MTRTMsg getDsContrBllgMtrTMsg(BigDecimal dsContrBllgMtrPk) {

        DS_CONTR_BLLG_MTRTMsg tMsg = new DS_CONTR_BLLG_MTRTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.dsContrBllgMtrPk, dsContrBllgMtrPk);
        return (DS_CONTR_BLLG_MTRTMsg) S21FastTBLAccessor.findByKey(tMsg);
    }

    private SVC_MACH_MSTRTMsg getSvcMachMstrTMsg(BigDecimal svcMachMstrPk) {

        SVC_MACH_MSTRTMsg tMsg = new SVC_MACH_MSTRTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.svcMachMstrPk, svcMachMstrPk);
        return (SVC_MACH_MSTRTMsg) S21FastTBLAccessor.findByKey(tMsg);
    }

    // START 2018/05/08 K.Kitachi [QC#23604, ADD]
    private SVC_CONFIG_MSTRTMsg getSvcConfigMstrTMsg(BigDecimal svcConfigMstrPk) {

        SVC_CONFIG_MSTRTMsg tMsg = new SVC_CONFIG_MSTRTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.svcConfigMstrPk, svcConfigMstrPk);
        return (SVC_CONFIG_MSTRTMsg) S21FastTBLAccessor.findByKey(tMsg);
    }
    // END 2018/05/08 K.Kitachi [QC#23604, ADD]

    private DS_CONTR_BLLG_SCHDTMsg getDsContrBllgSchdTMsg(BigDecimal dsContrBllgSchdPk) {

        DS_CONTR_BLLG_SCHDTMsg tMsg = new DS_CONTR_BLLG_SCHDTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.dsContrBllgSchdPk, dsContrBllgSchdPk);
        return (DS_CONTR_BLLG_SCHDTMsg) S21FastTBLAccessor.findByKey(tMsg);
    }

    private DS_CONTR_BLLG_SCHD_SMRYTMsg getDsContrBllgSchdSmryTMsg(BigDecimal dsContrBllgSchdSmryPk) {

        DS_CONTR_BLLG_SCHD_SMRYTMsg tMsg = new DS_CONTR_BLLG_SCHD_SMRYTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.dsContrBllgSchdSmryPk, dsContrBllgSchdSmryPk);
        return (DS_CONTR_BLLG_SCHD_SMRYTMsg) S21FastTBLAccessor.findByKey(tMsg);
    }

    private BLLG_CYCLETMsg getBllgCycleTMsg(String bllgCycleCd) {

        BLLG_CYCLETMsg tMsg = new BLLG_CYCLETMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.bllgCycleCd, bllgCycleCd);
        return (BLLG_CYCLETMsg) S21FastTBLAccessor.findByKey(tMsg);
    }

    private Map<String, Object> getSvcInvLine(BigDecimal dsContrBllgSchdPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("dsContrBllgSchdPk", dsContrBllgSchdPk);
        return (Map<String, Object>) ssmBatClnt.queryObject("getSvcInvLine", param);
    }

    // Add Start 04/25/2016 <QC#7244>
    private DS_CONTR_STS_VTMsg getDsContrStsVTMsg(BigDecimal dsContrPk) {
        DS_CONTR_STS_VTMsg tMsg = new DS_CONTR_STS_VTMsg();
        tMsg.setSQLID("002");
        tMsg.setConditionValue("glblCmpyCd01", this.glblCmpyCd);
        tMsg.setConditionValue("dsContrPk01", dsContrPk);
        DS_CONTR_STS_VTMsgArray dsContrStsVTMsgArray = (DS_CONTR_STS_VTMsgArray) EZDTBLAccessor.findByCondition(tMsg);
        if (dsContrStsVTMsgArray != null && dsContrStsVTMsgArray.getValidCount() > 0) {
            return dsContrStsVTMsgArray.no(0);
        }
        return null;
    }
    // Add End  04/25/2016 <QC#7244>

    private DS_CONTR_DTL_STS_VTMsg getDsContrDtlStsVTMsg(BigDecimal dsContrDtlPk) {
        DS_CONTR_DTL_STS_VTMsg tMsg = new DS_CONTR_DTL_STS_VTMsg();
        tMsg.setSQLID("002");
        tMsg.setConditionValue("glblCmpyCd01", this.glblCmpyCd);
        tMsg.setConditionValue("dsContrDtlPk01", dsContrDtlPk);
        DS_CONTR_DTL_STS_VTMsgArray dsContrDtlStsVTMsgArray = (DS_CONTR_DTL_STS_VTMsgArray) EZDTBLAccessor.findByCondition(tMsg);
        if (dsContrDtlStsVTMsgArray != null && dsContrDtlStsVTMsgArray.getValidCount() > 0) {
            return dsContrDtlStsVTMsgArray.no(0);
        }
        return null;
    }

    // START 2016/10/19 T.Kanasaka [QC#13009, MOD]
    // Add Start 04/25/2016 <QC#7244>
    private DS_CONTR_PRC_EFF_STS_VTMsg getDsContrPrcEffStsV(BigDecimal dsContrPrcEffPk) {
        DS_CONTR_PRC_EFF_STS_VTMsg tMsg = new DS_CONTR_PRC_EFF_STS_VTMsg();
        tMsg.setSQLID("002");
        tMsg.setConditionValue("glblCmpyCd01", this.glblCmpyCd);
        tMsg.setConditionValue("dsContrPrcEffPk01", dsContrPrcEffPk);
        DS_CONTR_PRC_EFF_STS_VTMsgArray dsContrPrcEffStsVTMsgArray = (DS_CONTR_PRC_EFF_STS_VTMsgArray) EZDTBLAccessor.findByCondition(tMsg);
        if (dsContrPrcEffStsVTMsgArray != null && dsContrPrcEffStsVTMsgArray.getValidCount() > 0) {
            return dsContrPrcEffStsVTMsgArray.no(0);
        }
        return null;
    }
    // Add End  04/25/2016 <QC#7244>
    // END 2016/10/19 T.Kanasaka [QC#13009, MOD]

    private Map<String, String> getDsContrBllgMtrStsV(BigDecimal dsContrBllgMtrPk, BigDecimal dsContrDtlPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("dsContrBllgMtrPk", dsContrBllgMtrPk);
        param.put("dsContrDtlPk", dsContrDtlPk);
        return (Map<String, String>) ssmBatClnt.queryObject("getDsContrBllgMtrStsV", param);
    }

//    @SuppressWarnings("unchecked")
//    private List<BigDecimal> getSvcContrAddlChrgBllg(BigDecimal svcContrBllgPk, BigDecimal svcContrBaseBllgPk, BigDecimal svcContrMtrllgPk) {
//        Map<String, Object> param = new HashMap<String, Object>();
//        param.put("glblCmpyCd", this.glblCmpyCd);
//        param.put("svcContrBllgPk", svcContrBllgPk);
//        param.put("svcContrBaseBllgPk", svcContrBaseBllgPk);
//        param.put("svcContrMtrllgPk", svcContrMtrllgPk);
//        return (List<BigDecimal>) ssmBatClnt.queryObject("getSvcContrAddlChrgBllg", param);
//    }

    private SVC_CONTR_ADDL_CHRG_BLLGTMsg getSvcContrAddlChrgBllgTMsg(BigDecimal svcContrAddlChrgBllgPk) {
        SVC_CONTR_ADDL_CHRG_BLLGTMsg tMsg = new SVC_CONTR_ADDL_CHRG_BLLGTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.svcContrAddlChrgBllgPk, svcContrAddlChrgBllgPk);
        return (SVC_CONTR_ADDL_CHRG_BLLGTMsg) S21FastTBLAccessor.findByKey(tMsg);
    }

    // START 2024/01/31 H.Iinuma [QC#61468,ADD]
    /**
     * @param svcInvNum String
     * @return FRT_CHRG_REPL_INFOTMsg
     */
    private List<FRT_CHRG_REPL_INFOTMsg> getFrtChrgReplInfoTMsgList(String svcInvNum) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", glblCmpyCd);
        param.put("svcInvNum", svcInvNum);
        param.put("frtChrgReplStsCd", FRT_CHRG_REPL_STS.PROCESSED);
        return (List<FRT_CHRG_REPL_INFOTMsg>) ssmBatClnt.queryObjectList("getFrtChrgReplInfoTMsgList", param);
    }
    
    /**
     * @param svcInvNum String
     * @return FRT_CHRG_REPL_DTLTMsg
     */
    private List<FRT_CHRG_REPL_DTLTMsg> getFrtChrgReplDtlTMsgList(String svcInvNum) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", glblCmpyCd);
        param.put("svcInvNum", svcInvNum);
        return (List<FRT_CHRG_REPL_DTLTMsg>) ssmBatClnt.queryObjectList("getFrtChrgReplDtlTMsgList", param);
    }
    
    
    /**
     * @param svcInvNum String
     * @param svcInvLineNum String
     * @return Map<String, Object>
     */
    private Map<String, Object> getOrigSvcInvLineForFc(String svcInvNum, String svcInvLineNum) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", glblCmpyCd);
        param.put("svcInvNum", svcInvNum);
        param.put("svcInvLineNum", svcInvLineNum);
        return (Map<String, Object>) ssmBatClnt.queryObject("getOrigSvcInvLineForFc", param);
    }

    /**
     * @param svcInvNum String
     * @param svcMachMstrPk BigDecimal
     * @return boolean
     */
    private boolean checkSvcInvLineForFcExists(String svcInvNum, BigDecimal svcMachMstrPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", glblCmpyCd);
        param.put("svcInvNum", svcInvNum);
        param.put("svcMachMstrPk", svcMachMstrPk);
        param.put("svcInvChrgTpCd", SVC_INV_CHRG_TP.FREIGHT_CHARGE);
        BigDecimal count = (BigDecimal) ssmBatClnt.queryObject("countSvcInvLineForFc", param);
        if (BigDecimal.ZERO.equals(count)) {
            return false;
        }
        return true;
    }

    /**
     * @param svcInvLine Map
     * @return SVC_INV_LINETMsg
     */
    private SVC_INV_LINETMsg createSvcInvLineForFc(Map<String, Object> svcInvLine) {
        SVC_INV_LINETMsg svcInvLineTMsg = new SVC_INV_LINETMsg();
        String svcInvChrgTpCd = SVC_INV_CHRG_TP.FREIGHT_CHARGE;
        Map<String, String> svcInvChrgTpInfo = getSvcInvChrgTpInfo(svcInvChrgTpCd);
        String trxCd = svcInvChrgTpInfo.get("TRX_CD");
        String trxRsnCd = svcInvChrgTpInfo.get("TRX_RSN_CD");
        String mdseCd = ZYPCodeDataUtil.getVarCharConstValue(FRT_TAX_DUMMY_MDSE_CD, glblCmpyCd);
        String mdseNm = getMdseNmforFc(mdseCd);
        String svcInvLineTpCd = SVC_INV_LINE_TP.FREIGHT_CHARGE;
        String uomCd = ZYPCodeDataUtil.getVarCharConstValue(QTY_BASED_FEE_UOM, glblCmpyCd);
        BigDecimal svcInvQty = BigDecimal.ONE;
        BigDecimal invDispQty = BigDecimal.ONE;
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvNum, (String) svcInvLine.get("SVC_INV_NUM"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvChrgTpCd, svcInvChrgTpCd);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdseCd, mdseCd);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdseNm, mdseNm);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.trxCd, trxCd);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.trxRsnCd, trxRsnCd);
        svcInvLineTMsg.slsRepTocCd.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvQty, svcInvQty);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvUnitHrsAot, (BigDecimal) svcInvLine.get("SVC_INV_UNIT_HRS_AOT"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dealUnitPrcAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.funcUnitPrcAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvMnAot, (BigDecimal) svcInvLine.get("SVC_INV_MN_AOT"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDealSlsAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineFuncSlsAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcLborDealAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcLborFuncAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDealNetAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineFuncNetAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.slsTaxRate, (BigDecimal) svcInvLine.get("SLS_TAX_RATE"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDealTaxAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineFuncTaxAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDiscRate, (BigDecimal) svcInvLine.get("INV_LINE_DISC_RATE"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDealDiscAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineFuncDiscAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dealDiscUnitPrcAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.funcDiscUnitPrcAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.coaCmpyCd, (String) svcInvLine.get("COA_CMPY_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.coaAfflCd, (String) svcInvLine.get("COA_AFFL_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.coaBrCd, (String) svcInvLine.get("COA_BR_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.coaChCd, (String) svcInvLine.get("COA_CH_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.coaCcCd, (String) svcInvLine.get("COA_CC_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.coaAcctCd, (String) svcInvLine.get("COA_ACCT_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.coaProdCd, (String) svcInvLine.get("COA_PROD_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.coaProjCd, (String) svcInvLine.get("COA_PROJ_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.coaExtnCd, (String) svcInvLine.get("COA_EXTN_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.shipToCustCd, (String) svcInvLine.get("SHIP_TO_CUST_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdlNm, (String) svcInvLine.get("MDL_NM"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdlId, (BigDecimal) svcInvLine.get("MDL_ID"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInitChrgPct, (BigDecimal) svcInvLine.get("SVC_INIT_CHRG_PCT"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcTaskNum, (String) svcInvLine.get("SVC_TASK_NUM"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvTz, (String) svcInvLine.get("SVC_INV_TZ"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcTaskCpltDt, (String) svcInvLine.get("SVC_TASK_CPLT_DT"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcTaskCpltTm, (String) svcInvLine.get("SVC_TASK_CPLT_TM"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.crDrSubRsnCd, (String) svcInvLine.get("CR_DR_SUB_RSN_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerFromDt, (String) svcInvLine.get("BLLG_PER_FROM_DT"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerThruDt, (String) svcInvLine.get("BLLG_PER_THRU_DT"));
        svcInvLineTMsg.svcContrBllgPk.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrPk, (BigDecimal) svcInvLine.get("DS_CONTR_PK"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrDtlPk, (BigDecimal) svcInvLine.get("DS_CONTR_DTL_PK"));
        svcInvLineTMsg.svcContrBaseBllgPk.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.taxCalcGeoCd, (String) svcInvLine.get("TAX_CALC_GEO_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcPgmMdseCd, (String) svcInvLine.get("SVC_PGM_MDSE_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.intgMdseCd, (String) svcInvLine.get("INTG_MDSE_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcMachMstrPk, (BigDecimal) svcInvLine.get("SVC_MACH_MSTR_PK"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.serNum, (String) svcInvLine.get("SER_NUM"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.custIssPoNum, (String) svcInvLine.get("CUST_ISS_PO_NUM"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.custIssPoDt, (String) svcInvLine.get("CUST_ISS_PO_DT"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.prntSvcInvLinePk, (BigDecimal) svcInvLine.get("PRNT_SVC_INV_LINE_PK"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.firstBllgAttrbValTxt, (String) svcInvLine.get("FIRST_BLLG_ATTRB_VAL_TXT"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.scdBllgAttrbValTxt, (String) svcInvLine.get("SCD_BLLG_ATTRB_VAL_TXT"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.thirdBllgAttrbValTxt, (String) svcInvLine.get("THIRD_BLLG_ATTRB_VAL_TXT"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.frthBllgAttrbValTxt, (String) svcInvLine.get("FRTH_BLLG_ATTRB_VAL_TXT"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.fifthBllgAttrbValTxt, (String) svcInvLine.get("FIFTH_BLLG_ATTRB_VAL_TXT"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.sixthBllgAttrbValTxt, (String) svcInvLine.get("SIXTH_BLLG_ATTRB_VAL_TXT"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgCycleCd, (String) svcInvLine.get("BLLG_CYCLE_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerMthAot, (BigDecimal) svcInvLine.get("BLLG_PER_MTH_AOT"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLineTpCd, svcInvLineTpCd);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.copyInclQty, (BigDecimal) svcInvLine.get("COPY_INCL_QTY"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invDispUnitPrcAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.uomCd, uomCd);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invDispQty, invDispQty);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrBllgSchdPk, (BigDecimal) svcInvLine.get("DS_CONTR_BLLG_SCHD_PK"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.basePrcAdjDealAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.basePrcAdjFuncAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcPgmMdseNm, (String) svcInvLine.get("SVC_PGM_MDSE_NM"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.prntSerNum, (String) svcInvLine.get("PRNT_SER_NUM"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.prntMachMstrId, (BigDecimal) svcInvLine.get("PRNT_MACH_MSTR_ID"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvEligFlg, ZYPConstant.FLG_OFF_N);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrAddlChrgPk, (BigDecimal) svcInvLine.get("DS_CONTR_ADDL_CHRG_PK"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invPrintCovTxt, (String) svcInvLine.get("INV_PRINT_COV_TXT"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mtrRollOverFlg, ZYPConstant.FLG_OFF_N);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mtrExchFlg, ZYPConstant.FLG_OFF_N);
        return svcInvLineTMsg;
    }

    /**
     * @param svcInvNum String
     * @param svcMachMstrPk BigDecimal
     * @return BigDecimal
     */
    private BigDecimal getDsContrBllgSchdPkForFc(String svcInvNum, BigDecimal svcMachMstrPk) {
        BigDecimal dsContrBllgSchdPk = null;
        List<BigDecimal> baseDsContrBllgSchdPkList = getBaseDsContrBllgSchdPkList(svcInvNum, svcMachMstrPk);
        if (baseDsContrBllgSchdPkList.size() > 0) {
            dsContrBllgSchdPk = baseDsContrBllgSchdPkList.get(0);
        } else {
            List<BigDecimal> mtrDsContrBllgSchdPkList = getMtrDsContrBllgSchdPkList(svcInvNum, svcMachMstrPk);
            dsContrBllgSchdPk = mtrDsContrBllgSchdPkList.get(0);
        }
        return dsContrBllgSchdPk;
    }

    /**
     * @param svcInvNum String
     * @param svcMachMstrPk BigDecimal
     * @return BigDecimal
     */
    private List<BigDecimal> getBaseDsContrBllgSchdPkList(String svcInvNum, BigDecimal svcMachMstrPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", glblCmpyCd);
        param.put("svcInvNum", svcInvNum);
        param.put("svcMachMstrPk", svcMachMstrPk);
        param.put("svcInvChrgTpCd", SVC_INV_CHRG_TP.BASE_CHARGE);
        return (List<BigDecimal>) ssmBatClnt.queryObjectList("getBaseDsContrBllgSchdPkList", param);
    }

    /**
     * @param svcInvNum String
     * @param svcMachMstrPk BigDecimal
     * @return BigDecimal
     */
    private List<BigDecimal> getMtrDsContrBllgSchdPkList(String svcInvNum, BigDecimal svcMachMstrPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", glblCmpyCd);
        param.put("svcInvNum", svcInvNum);
        param.put("svcMachMstrPk", svcMachMstrPk);
        param.put("svcInvChrgTpCd", SVC_INV_CHRG_TP.METER_CHARGE);
        return (List<BigDecimal>) ssmBatClnt.queryObjectList("getMtrDsContrBllgSchdPkList", param);
    }

    /**
     * @param svcInvNum String
     * @return Map<String, Object>
     */
    private List<Map<String, Object>> getSvcInvLineInfoList(String svcInvNum) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", glblCmpyCd);
        param.put("svcInvNum", svcInvNum);
        return (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getSvcInvLineInfoList", param);
    }

    /**
     * @param dsContrPk BigDecimal
     * @param svcMachMstrPk BigDecimal
     * @return Map<String, Object>
     */
    private List<Map<String, Object>> getBaseSvcInvLineList(BigDecimal dsContrPk, BigDecimal svcMachMstrPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", glblCmpyCd);
        param.put("svcInvChrgTpCd", SVC_INV_CHRG_TP.BASE_CHARGE);
        param.put("dsContrPk", dsContrPk);
        param.put("svcMachMstrPk", svcMachMstrPk);
        return (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getBaseSvcInvLineList", param);
    }

    /**
     * @param dsContrPk BigDecimal
     * @param svcMachMstrPk BigDecimal
     * @return Map<String, Object>
     */
    private List<Map<String, Object>> getMtrSvcInvLineList(BigDecimal dsContrPk, BigDecimal svcMachMstrPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", glblCmpyCd);
        param.put("svcInvChrgTpCd", SVC_INV_CHRG_TP.METER_CHARGE);
        param.put("dsContrPk", dsContrPk);
        param.put("svcMachMstrPk", svcMachMstrPk);
        return (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getMtrSvcInvLineList", param);
    }

    /**
     * @param svcInvChrgTpCd String
     * @return Map<String, Object>
     */
    private Map<String, String> getSvcInvChrgTpInfo(String svcInvChrgTpCd) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", glblCmpyCd);
        param.put("svcInvChrgTpCd", svcInvChrgTpCd);
        return (Map<String, String>) ssmBatClnt.queryObject("getSvcInvChrgTpInfo", param);
    }

    /**
     * @param mdseCd String
     * @return String
     */
    private String getMdseNmforFc(String mdseCd) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", glblCmpyCd);
        param.put("mdseCd", mdseCd);
        return (String) ssmBatClnt.queryObject("getMdseNmforFc", param);
    }

    /**
     * @param dsContrNum String
     * @param svcMachMstrPk BigDecimal
     * @param bllgPerFromDt String
     * @param bllgPerThruDt String
     * @return boolean
     */
    private boolean checkCpoExists(String dsContrNum, BigDecimal svcMachMstrPk, String bllgPerFromDt, String bllgPerThruDt) {
        Map<String, Object> param = new HashMap<String, Object>();
        String dsOrdCatgCd = DS_ORD_CATG.CONTRACT_SUPPLY_CSA;
        String mdseCd = ZYPCodeDataUtil.getVarCharConstValue(FRT_TAX_DUMMY_MDSE_CD, glblCmpyCd);
        String dsInvTpCd = DS_INV_TP.INVOICE_SUPPLIES_CONTRACT;
        param.put("glblCmpyCd", glblCmpyCd);
        param.put("dsOrdCatgCd", dsOrdCatgCd);
        String frtReplOrdTp = ZYPCodeDataUtil.getVarCharConstValue(NSAB087001Constant.FRT_REPL_ORD_TP, this.glblCmpyCd);
        List<String> frtReplOrdTpList;
        if (ZYPCommonFunc.hasValue(frtReplOrdTp)) {
            frtReplOrdTpList = Arrays.asList(frtReplOrdTp.split(","));
        } else {
            frtReplOrdTpList = null;
        }
        param.put("frtReplOrdTpList", frtReplOrdTpList);
        param.put("dsContrNum", dsContrNum);
        param.put("bllgPerFromDt", bllgPerFromDt);
        param.put("bllgPerThruDt", bllgPerThruDt);
        param.put("mdseCd", mdseCd);
        param.put("svcMachMstrPk", svcMachMstrPk);
        param.put("dsInvTpCd", dsInvTpCd);
        BigDecimal count = (BigDecimal) ssmBatClnt.queryObject("countCpoList", param);
        if (BigDecimal.ZERO.equals(count)) {
            return false;
        }
        return true;
    }
    // END 2024/01/31 H.Iinuma [QC#61468,ADD]

    private List<Map<String, BigDecimal>> getSvcContrAddlChrgBllgInfo(BigDecimal prntSvcContrBllgPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        //Mod Start 03/17/2016 <QC#4166>
        param.put("bllgCpltStsCdList", this.bllgCpltStsCdList);
        //Mod End   03/17/2016 <QC#4166>
        param.put("slsDt", this.slsDt);
        param.put("prntSvcContrBllgPk", prntSvcContrBllgPk);
        return (List<Map<String, BigDecimal>>) ssmBatClnt.queryObjectList("getSvcContrAddlChrgBllgInfo", param);
    }

    private DS_CONTR_ADDL_CHRGTMsg getDsContrAddlChrg(BigDecimal dsContrAddlChrgPk) {
        DS_CONTR_ADDL_CHRGTMsg inTMsg = new DS_CONTR_ADDL_CHRGTMsg();
        ZYPEZDItemValueSetter.setValue(inTMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(inTMsg.dsContrAddlChrgPk, dsContrAddlChrgPk);
        return (DS_CONTR_ADDL_CHRGTMsg) S21FastTBLAccessor.findByKey(inTMsg);
    }

    private List<BigDecimal> getSvcContrBllgAllocPkForAddl(BigDecimal svcContrAddlChrgBllgPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("svcContrAddlChrgBllgPk", svcContrAddlChrgBllgPk);
        return (List<BigDecimal>) ssmBatClnt.queryObjectList("getSvcContrBllgAllocPkForAddl", param);
    }

    private SVC_CONTR_BLLG_ALLOCTMsg getSvcContrBllgAllocTMsg(BigDecimal svcContrBllgAllocPk) {
        SVC_CONTR_BLLG_ALLOCTMsg inTMsg = new SVC_CONTR_BLLG_ALLOCTMsg();
        ZYPEZDItemValueSetter.setValue(inTMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(inTMsg.svcContrBllgAllocPk, svcContrBllgAllocPk);
        return (SVC_CONTR_BLLG_ALLOCTMsg) S21FastTBLAccessor.findByKey(inTMsg);
    }

    private List<BigDecimal> getChildSvcContrBllgPkList(BigDecimal prntSvcContrBllgPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("prntSvcContrBllgPk", prntSvcContrBllgPk);
        return (List<BigDecimal>) ssmBatClnt.queryObjectList("getChildSvcContrBllgPkList", param);
    }

    private List<BigDecimal> getSvcContrBaseBllgPkList(BigDecimal svcContrBllgPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("svcContrBllgPk", svcContrBllgPk);
        return (List<BigDecimal>) ssmBatClnt.queryObjectList("getSvcContrBaseBllgPkList", param);
    }

    private List<BigDecimal> getSvcContrMtrBllgPkList(BigDecimal svcContrBllgPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("svcContrBllgPk", svcContrBllgPk);
        return (List<BigDecimal>) ssmBatClnt.queryObjectList("getSvcContrMtrBllgPkList", param);
    }

    private List<BigDecimal> getSvcContrXsMtrBllgPkList(BigDecimal svcContrBllgPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("svcContrBllgPk", svcContrBllgPk);
        return (List<BigDecimal>) ssmBatClnt.queryObjectList("getSvcContrXsMtrBllgPkList", param);
    }

    private List<BigDecimal> getSvcContrAddlChrgBllgPkList(BigDecimal svcContrBllgPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("svcContrBllgPk", svcContrBllgPk);
        return (List<BigDecimal>) ssmBatClnt.queryObjectList("getSvcContrAddlChrgBllgPkList", param);
    }

    private List<BigDecimal> getSvcContrBllgAllocPkList(BigDecimal svcContrBllgPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("svcContrBllgPk", svcContrBllgPk);
        return (List<BigDecimal>) ssmBatClnt.queryObjectList("getSvcContrBllgAllocPkList", param);
    }

    // START 2022/05/23 K.Kitachi [QC#60054, ADD]
    private List<BigDecimal> getAddlChrgSvcContrBllgPkList(BigDecimal prntSvcContrBllgPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("prntSvcContrBllgPk", prntSvcContrBllgPk);
        return (List<BigDecimal>) ssmBatClnt.queryObjectList("getAddlChrgSvcContrBllgPkList", param);
    }
    // END 2022/05/23 K.Kitachi [QC#60054, ADD]

    // START 2016/03/15 T.Aoyagi [QC#3818, MOD]
    // START 04/08/2016 T.Aoyagi [QC#6762, MOD]
    private Map<String, String> getMtrLbDescTxt(BigDecimal dsContrBllgMtrPk) {
        if (!hasValue(dsContrBllgMtrPk)) {
            return null;
        }
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("dsContrBllgMtrPk", dsContrBllgMtrPk);
        return (Map<String, String>) ssmBatClnt.queryObject("getMtrLbDescTxt", param);
    }
    // END 04/08/2016 T.Aoyagi [QC#6762, MOD]
    // END 2016/03/15 T.Aoyagi [QC#3818, MOD]

    private BigDecimal getOrigXsMtrFormCopyQty(BigDecimal dsContrBllgSchdPk, BigDecimal contrXsCopyPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("dsContrBllgSchdPk", dsContrBllgSchdPk);
        param.put("contrXsCopyPk", contrXsCopyPk);
        return (BigDecimal) ssmBatClnt.queryObject("getOrigXsMtrFormCopyQty", param);
    }

    // START 2016/03/15 T.Aoyagi [QC#3818, MOD]
    //Mod Start 05/25/2016 <QC#7636>
    private BigDecimal getCopyInclQty(BigDecimal dsContrDtlPk, String bllgThruDt) {
        if (!hasValue(dsContrDtlPk)) {
            return null;
        }
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("dsContrDtlPk", dsContrDtlPk);
        param.put("bllgThruDt", bllgThruDt);
        return (BigDecimal) ssmBatClnt.queryObject("getCopyInclQty", param);
    }
    //Mod End   05/25/2016 <QC#7636>
    // END 2016/03/15 T.Aoyagi [QC#3818, MOD]

    private List<Map<String, Object>> getFleetMachInfo(BigDecimal dsContrPk, String baseChrgFlg) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("dsContrPk", dsContrPk);
        param.put("dsContrDtlStsCd", DS_CONTR_DTL_STS.CANCELLED);
        param.put("slsDt", slsDt);
        if (ZYPConstant.FLG_ON_Y.equals(baseChrgFlg)) {
            param.put("baseChrgFlg", baseChrgFlg);
        } else {
            param.put("usgChrgFlg", ZYPConstant.FLG_ON_Y);
        }
        return (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getFleetMachInfo", param);
    }

    /**
     * Create SVC_INV key
     * @param dsContrPk BigDecimal
     * @param svcConfigMstrPk BigDecimal
     * @return String
     */
    // QC2536 start
    // private static String createRegSvcInvKey(BigDecimal dsContrPk,
    // BigDecimal svcConfigMstrPk) {
    // return dsContrPk.toPlainString() + ":" +
    // svcConfigMstrPk.toPlainString();
    // }
    // START 04/12/2016 T.Aoyagi [QC#6829, MOD]
    // mod start 2018/07/05 QC#27114
    //private static String createRegSvcInvKey(BigDecimal dsContrPk, String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg, String invTpCd) {
    private static String createRegSvcInvKey(BigDecimal dsContrPk, String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg, String invTpCd, BigDecimal svcCrRebilPk) {
    // mod end 2018/07/05 QC#27114
        // START 2016/03/15 T.Aoyagi [QC#3818, MOD]
//        return dsContrPk.toPlainString() + ":" +  baseBllgFlg + ":" + mtrBllgFlg + ":" + invSeptBaseUsgFlg;
        StringBuilder sb = new StringBuilder();
        sb.append(dsContrPk.toPlainString());
        sb.append(":");
        sb.append(baseBllgFlg);
        sb.append(":");
        sb.append(mtrBllgFlg);
        sb.append(":");
        sb.append(invSeptBaseUsgFlg);
        sb.append(":");
        sb.append(invTpCd);
        // add start 2018/07/05 QC#27114
        sb.append(":");
        sb.append(svcCrRebilPk);
        // add end 2018/07/05 QC#27114
        return sb.toString();
        // END 2016/03/15 T.Aoyagi [QC#3818, MOD]
    }
    // END 04/12/2016 T.Aoyagi [QC#6829, MOD]

    // QC2536 end

    /**
     * Create SVC_INV key
     * @param dsContrPk BigDecimal
     * @param svcConfigMstrPk BigDecimal
     * @return String
     */
    // QC2536 start
    // private static String createFleetSvcInvKey(BigDecimal
    // dsContrPk) {
    // return dsContrPk.toPlainString();
    // }
    // START 04/12/2016 T.Aoyagi [QC#6829, MOD]
    // Mod Start 12/16/2016 <QC#16646>
    // START 2017/09/28 M.Kidokoro [QC#21286, MOD]
//    private static String createFleetSvcInvKey(BigDecimal dsContrPk, String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg, String invTpCd, String billToCustCd) {
    // START 2018/07/25 K.Kitachi [QC#17068, MOD]
//    private static String createFleetSvcInvKey(BigDecimal dsContrPk, String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg, String invTpCd, String billToCustCd, BigDecimal svcCrRebilPk, BigDecimal svcCrRebilDtlPk) {
    private static String createFleetSvcInvKey(BigDecimal dsContrPk, String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg, String invTpCd, String billToCustCd, BigDecimal svcCrRebilPk, BigDecimal svcCrRebilDtlPk, BigDecimal ctacPsnPk) {
    // END 2018/07/25 K.Kitachi [QC#17068, MOD]
    // END 2017/09/28 M.Kidokoro [QC#21286, MOD]
        // START 2016/03/15 T.Aoyagi [QC#3818, MOD]
//        return dsContrPk.toPlainString() + ":" +  baseBllgFlg + ":" + mtrBllgFlg + ":" + invSeptBaseUsgFlg;
        StringBuilder sb = new StringBuilder();
        sb.append(dsContrPk.toPlainString());
        sb.append(":");
        sb.append(baseBllgFlg);
        sb.append(":");
        sb.append(mtrBllgFlg);
        sb.append(":");
        sb.append(invSeptBaseUsgFlg);
        sb.append(":");
        sb.append(invTpCd);
        sb.append(":");
        sb.append(billToCustCd);
        // START 2017/09/28 M.Kidokoro [QC#21286, ADD]
        sb.append(":");
        sb.append(svcCrRebilPk);
        sb.append(":");
        sb.append(svcCrRebilDtlPk);
        // END 2017/09/28 M.Kidokoro [QC#21286, ADD]
        // START 2018/07/25 K.Kitachi [QC#17068, ADD]
        sb.append(":");
        sb.append(ctacPsnPk);
        // END 2018/07/25 K.Kitachi [QC#17068, ADD]
        return sb.toString();
        // END 2016/03/15 T.Aoyagi [QC#3818, MOD]
    }
    // Mod End   12/16/2016 <QC#16646>
    // END 04/12/2016 T.Aoyagi [QC#6829, MOD]
    // QC2536 end

    /**
     * Create SVC_INV key
     * @param dsContrPk BigDecimal
     * @param svcConfigMstrPk BigDecimal
     * @return String
     */
    // START 04/12/2016 T.Aoyagi [QC#6829, MOD]
    // Mod Start 12/16/2016 <QC#16646>
    // START 2017/09/28 M.Kidokoro [QC#21286, MOD]
//    private static String createAggSvcInvKey(BigDecimal dsContrPk, String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg, String invTpCd, String billToCustCd) {
    // START 2018/07/25 K.Kitachi [QC#17068, MOD]
//    private static String createAggSvcInvKey(BigDecimal dsContrPk, String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg, String invTpCd, String billToCustCd, BigDecimal svcCrRebilPk, BigDecimal svcCrRebilDtlPk) {
    private static String createAggSvcInvKey(BigDecimal dsContrPk, String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg, String invTpCd, String billToCustCd, BigDecimal svcCrRebilPk, BigDecimal svcCrRebilDtlPk, BigDecimal ctacPsnPk) {
    // END 2018/07/25 K.Kitachi [QC#17068, MOD]
    // END 2017/09/28 M.Kidokoro [QC#21286, MOD]
        // START 2016/03/15 T.Aoyagi [QC#3818, MOD]
//        return dsContrPk.toPlainString() + ":" +  baseBllgFlg + ":" + mtrBllgFlg + ":" + invSeptBaseUsgFlg;
        StringBuilder sb = new StringBuilder();
        sb.append(dsContrPk.toPlainString());
        sb.append(":");
        sb.append(baseBllgFlg);
        sb.append(":");
        sb.append(mtrBllgFlg);
        sb.append(":");
        sb.append(invSeptBaseUsgFlg);
        sb.append(":");
        sb.append(invTpCd);
        sb.append(":");
        sb.append(billToCustCd);
        // START 2017/09/28 M.Kidokoro [QC#21286, ADD]
        sb.append(":");
        sb.append(svcCrRebilPk);
        sb.append(":");
        sb.append(svcCrRebilDtlPk);
        // END 2017/09/28 M.Kidokoro [QC#21286, ADD]
        // START 2018/07/25 K.Kitachi [QC#17068, ADD]
        sb.append(":");
        sb.append(ctacPsnPk);
        // END 2018/07/25 K.Kitachi [QC#17068, ADD]
        return sb.toString();
        // END 2016/03/15 T.Aoyagi [QC#3818, MOD]
    }
    // Mod End   12/16/2016 <QC#16646>
    // END 04/12/2016 T.Aoyagi [QC#6829, MOD]

    /**
     * Parse SVC_INV key
     * @param svcInvKey String
     * @return String[]
     */
    private static String[] parseRegSvcInvKey(String svcInvKey) {
        List<String> keys = new ArrayList<String>();
        int lastIndex = -1;
        for (int i = 0; i < svcInvKey.length(); i++) {
            int firstIndex = svcInvKey.indexOf(":", lastIndex + 1);
            if (firstIndex >= 0) {
                keys.add(svcInvKey.substring(lastIndex + 1, firstIndex));
                lastIndex = firstIndex;
            } else {
                keys.add(svcInvKey.substring(lastIndex + 1));
                break;
            }
        }
        return keys.toArray(new String[keys.size()]);
    }

    /**
     * Parse SVC_INV key
     * @param svcInvKey String
     * @return String[]
     */
    private static String[] parseFleetSvcInvKey(String svcInvKey) {
        List<String> keys = new ArrayList<String>();
        int lastIndex = -1;
        for (int i = 0; i < svcInvKey.length(); i++) {
            int firstIndex = svcInvKey.indexOf(":", lastIndex + 1);
            if (firstIndex >= 0) {
                keys.add(svcInvKey.substring(lastIndex + 1, firstIndex));
                lastIndex = firstIndex;
            } else {
                keys.add(svcInvKey.substring(lastIndex + 1));
                break;
            }
        }
        return keys.toArray(new String[keys.size()]);
    }

    /**
     * Parse SVC_INV key
     * @param svcInvKey String
     * @return String[]
     */
    private static String[] parseAggSvcInvKey(String svcInvKey) {
        List<String> keys = new ArrayList<String>();
        int lastIndex = -1;
        for (int i = 0; i < svcInvKey.length(); i++) {
            int firstIndex = svcInvKey.indexOf(":", lastIndex + 1);
            if (firstIndex >= 0) {
                keys.add(svcInvKey.substring(lastIndex + 1, firstIndex));
                lastIndex = firstIndex;
            } else {
                keys.add(svcInvKey.substring(lastIndex + 1));
                break;
            }
        }
        return keys.toArray(new String[keys.size()]);
    }

    private void addMessage(String dsContrCatgCd, String svcInvKey, int errKbn, String msgId, String... prms) {

        EZDMessageInfo msg = new EZDMessageInfo(msgId, prms, errKbn);

        if (DS_CONTR_CATG.REGULAR.equals(dsContrCatgCd)) {

            List<EZDMessageInfo> msgList = regSvcInvMsg.get(svcInvKey);
            if (msgList == null) {
                msgList = new ArrayList<EZDMessageInfo>();
                regSvcInvMsg.put(svcInvKey, msgList);
            }
            msgList.add(msg);
        } else if (DS_CONTR_CATG.FLEET.equals(dsContrCatgCd)) {

            List<EZDMessageInfo> msgList = fleetSvcInvMsg.get(svcInvKey);
            if (msgList == null) {
                msgList = new ArrayList<EZDMessageInfo>();
                fleetSvcInvMsg.put(svcInvKey, msgList);
            }
            msgList.add(msg);
        } else if (DS_CONTR_CATG.AGGREGATE.equals(dsContrCatgCd)) {

            List<EZDMessageInfo> msgList = aggSvcInvMsg.get(svcInvKey);
            if (msgList == null) {
                msgList = new ArrayList<EZDMessageInfo>();
                aggSvcInvMsg.put(svcInvKey, msgList);
            }
            msgList.add(msg);
        }
    }

    private int getSvcInvErrCount() {

        if (regSvcInvMsg.isEmpty() && fleetSvcInvMsg.isEmpty() && aggSvcInvMsg.isEmpty()) {
            return 0;
        }

        int error = 0;

        for (Map.Entry<String, List<EZDMessageInfo>> entry : regSvcInvMsg.entrySet()) {
            List<EZDMessageInfo> msgList = entry.getValue();
            for (EZDMessageInfo msg : msgList) {
                if (EZDMessageInfo.MSGTYPE_ERROR == msg.getMessageType()) {
                    error++;
                    break;
                }
            }
        }

        for (Map.Entry<String, List<EZDMessageInfo>> entry : fleetSvcInvMsg.entrySet()) {
            List<EZDMessageInfo> msgList = entry.getValue();
            for (EZDMessageInfo msg : msgList) {
                if (EZDMessageInfo.MSGTYPE_ERROR == msg.getMessageType()) {
                    error++;
                    break;
                }
            }
        }

        for (Map.Entry<String, List<EZDMessageInfo>> entry : aggSvcInvMsg.entrySet()) {
            List<EZDMessageInfo> msgList = entry.getValue();
            for (EZDMessageInfo msg : msgList) {
                if (EZDMessageInfo.MSGTYPE_ERROR == msg.getMessageType()) {
                    error++;
                    break;
                }
            }
        }
        return error;
    }

    private Set<String> getRegSvcInvErrKey() {

        if (regSvcInvMsg.isEmpty()) {
            return Collections.emptySet();
        }

        Set<String> errKeys = new HashSet<String>();

        for (Map.Entry<String, List<EZDMessageInfo>> entry : regSvcInvMsg.entrySet()) {
            List<EZDMessageInfo> msgList = entry.getValue();
            for (EZDMessageInfo msg : msgList) {
                if (EZDMessageInfo.MSGTYPE_ERROR == msg.getMessageType()) {
                    errKeys.add(entry.getKey());
                    break;
                }
            }
        }

        return errKeys;
    }

    private Set<String> getFleetSvcInvErrKey() {

        if (fleetSvcInvMsg.isEmpty()) {
            return Collections.emptySet();
        }

        Set<String> errKeys = new HashSet<String>();

        for (Map.Entry<String, List<EZDMessageInfo>> entry : fleetSvcInvMsg.entrySet()) {
            List<EZDMessageInfo> msgList = entry.getValue();
            for (EZDMessageInfo msg : msgList) {
                if (EZDMessageInfo.MSGTYPE_ERROR == msg.getMessageType()) {
                    errKeys.add(entry.getKey());
                    break;
                }
            }
        }

        return errKeys;
    }

    private Set<String> getAggSvcInvErrKey() {

        if (aggSvcInvMsg.isEmpty()) {
            return Collections.emptySet();
        }

        Set<String> errKeys = new HashSet<String>();

        for (Map.Entry<String, List<EZDMessageInfo>> entry : aggSvcInvMsg.entrySet()) {
            List<EZDMessageInfo> msgList = entry.getValue();
            for (EZDMessageInfo msg : msgList) {
                if (EZDMessageInfo.MSGTYPE_ERROR == msg.getMessageType()) {
                    errKeys.add(entry.getKey());
                    break;
                }
            }
        }

        return errKeys;
    }

    /**
     * Key
     * 
     * <pre>
     * Date         Company         Name            Create/Update   Defect No
     * ----------------------------------------------------------------------
     * 2013/08/13   SRAA            N.Otsuji        Create          N/A
     *</pre>
     */
    private static final class Key {

        /**
         * Keys
         */
        private Map<String, Object> keys;

        public Key() {
            keys = new LinkedHashMap<String, Object>();
        }

        public void add(String key, Object value) {
            keys.put(key, value);
        }

        public String toString() {
            StringBuilder buf = new StringBuilder();
            boolean first = true;
            for (Map.Entry<String, Object> entry : keys.entrySet()) {
                if (first) {
                    first = false;
                } else {
                    buf.append(", ");
                }
                buf.append(entry.getKey());
                buf.append("=");
                buf.append(String.valueOf(entry.getValue()));
            }
            return buf.toString();
        }
    }

    /**
     * SVC_INV_LINE_ALLOCTMsg Comparator for sorting
     * SVC_INV_LINE_ALLOCTMsgs in the same invoice line by
     * INV_LINE_FUNC_NET_AMT in descending order.
     * 
     * <pre>
     * Date         Company         Name            Create/Update   Defect No
     * ----------------------------------------------------------------------
     * 2013/08/13   SRAA            N.Otsuji        Create          N/A
     *</pre>
     */
    private static final class SVC_INV_LINE_ALLOCTMsgComparator implements Comparator<SVC_INV_LINE_ALLOCTMsg>, Serializable {

        /**
         * Serial Version UID
         */
        private static final long serialVersionUID = 1L;

        @Override
        public int compare(SVC_INV_LINE_ALLOCTMsg t1, SVC_INV_LINE_ALLOCTMsg t2) {
            int cmp = t2.invLineDealNetAmt.getValue().compareTo(t1.invLineDealNetAmt.getValue());
            if (cmp == 0) {
                cmp = t1.svcInvLineAllocNum.getValue().compareTo(t2.svcInvLineAllocNum.getValue());
            }
            return cmp;
        }
    }

    /**
     * Send email
     */
    private void sendEmail() {

        if (regSvcInvMsg.isEmpty() && fleetSvcInvMsg.isEmpty() && aggSvcInvMsg.isEmpty()) {
            return;
        }

        S21MailGroup fromGrp = new S21MailGroup(glblCmpyCd, "FROM0003");
        fromGrp.setMailKey1("NS");
        List<S21MailAddress> fromAddrList = fromGrp.getMailAddress();

        S21Mail mail = new S21Mail(glblCmpyCd);

        if (fromAddrList.size() > 0) {

            mail.setFromAddress(fromAddrList.get(0));

            S21MailGroup toGrp = new S21MailGroup(glblCmpyCd, "NSAB0020");
            List<S21MailAddress> toAddrList = toGrp.getMailAddress();
            if (!toAddrList.isEmpty()) {

                mail.setToAddressList(toAddrList);

                S21MailTemplate tmpl = new S21MailTemplate(glblCmpyCd, "NSAB0020M001");

                if (ZYPCommonFunc.hasValue(tmpl.getSubject())) {

                    String newLine = System.getProperty("line.separator");

                    StringBuilder msgBuf = new StringBuilder();

                    for (Map.Entry<String, List<EZDMessageInfo>> entry : regSvcInvMsg.entrySet()) {

                        String svcInvKey = entry.getKey();
                        String[] keys = parseRegSvcInvKey(svcInvKey);
                        List<EZDMessageInfo> msgList = entry.getValue();

                        // Header
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // msgBuf.append(String.format("DS_CONTR_PK: %1$s SVC_CONFIG_MSTR_PK: %2$s", keys[0], keys[1]));
                        msgBuf.append(String.format("DS_CONTR_PK: %1$s", keys[0]));
                        msgBuf.append(newLine);
                        // END 2016/12/13 N.Arai [QC#16400, MOD]

                        // Detail
                        for (EZDMessageInfo msg : msgList) {
                            msgBuf.append(String.format("   Error: %1$s %2$s", msg.getCode(), msg.getMessage()));
                            msgBuf.append(newLine);
                        }
                        msgBuf.append(newLine);
                    }

                    for (Map.Entry<String, List<EZDMessageInfo>> entry : fleetSvcInvMsg.entrySet()) {

                        String svcInvKey = entry.getKey();
                        String[] keys = parseFleetSvcInvKey(svcInvKey);
                        List<EZDMessageInfo> msgList = entry.getValue();

                        // Header
                        msgBuf.append(String.format("DS_CONTR_PK: %1$s", keys[0]));
                        msgBuf.append(newLine);

                        // Detail
                        for (EZDMessageInfo msg : msgList) {
                            msgBuf.append(String.format("   Error: %1$s %2$s", msg.getCode(), msg.getMessage()));
                            msgBuf.append(newLine);
                        }
                        msgBuf.append(newLine);
                    }

                    for (Map.Entry<String, List<EZDMessageInfo>> entry : aggSvcInvMsg.entrySet()) {

                        String svcInvKey = entry.getKey();
                        String[] keys = parseAggSvcInvKey(svcInvKey);
                        List<EZDMessageInfo> msgList = entry.getValue();

                        // Header
                        // START 2016/12/13 N.Arai [QC#16400, MOD]
                        // msgBuf.append(String.format("DS_CONTR_PK: %1$s SVC_CONFIG_MSTR_PK: %2$s", keys[0], keys[1]));
                        msgBuf.append(String.format("DS_CONTR_PK: %1$s", keys[0]));
                        msgBuf.append(newLine);
                        // END 2016/12/13 N.Arai [QC#16400, MOD]

                        // Detail
                        for (EZDMessageInfo msg : msgList) {
                            msgBuf.append(String.format("   Error: %1$s %2$s", msg.getCode(), msg.getMessage()));
                            msgBuf.append(newLine);
                        }
                        msgBuf.append(newLine);
                    }

                    SimpleDateFormat errTmFmt = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");

                    tmpl.setTemplateParameter("batchId", "NSAB0020");
                    tmpl.setTemplateParameter("errDate", errTmFmt.format(new Date()));
                    tmpl.setTemplateParameter("message", msgBuf.toString());

                    mail.setMailTemplate(tmpl);
                    mail.postMail();

                    //Add Start 05/25/2016 <QC#8656>
                    StringBuilder logBuf = new StringBuilder();
                    logBuf.append(newLine);
                    logBuf.append("==================== Skip or Error Data ====================");
                    logBuf.append(newLine);
                    logBuf.append(msgBuf);
                    logBuf.append("============================================================");
                    S21InfoLogOutput.println(logBuf.toString());
                    //Add End   05/25/2016 <QC#8656>
                }
            }
        }
    }

    // QC2973 start
    private List<SVC_INV_LINE_ALLOCTMsg> mergeSvcInvLineAllocTMsg(List<List<SVC_INV_LINE_ALLOCTMsg>> svcInvLineAllocTMsgListList) {
        List<SVC_INV_LINE_ALLOCTMsg> svcInvLineAllocTMsgList = new ArrayList<SVC_INV_LINE_ALLOCTMsg>();

        for (int i = 0; i < svcInvLineAllocTMsgListList.size(); i++) {
            List<SVC_INV_LINE_ALLOCTMsg> tempSvcInvLineAllocTMsgList = svcInvLineAllocTMsgListList.get(i);

            if (i == 0) {
                for (int j = 0; j < tempSvcInvLineAllocTMsgList.size(); j++) {
                    SVC_INV_LINE_ALLOCTMsg svcInvLineAllocTMsg = tempSvcInvLineAllocTMsgList.get(j);
                    BigDecimal svcInvLineAllocPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_ALLOC_SQ");
                    ZYPEZDItemValueSetter.setValue(svcInvLineAllocTMsg.svcInvLineAllocPk, svcInvLineAllocPk);
                    svcInvLineAllocTMsg.svcContrBllgAllocPk.clear();
                    svcInvLineAllocTMsg.svcContrMtrBllgPk.clear();
                }
                svcInvLineAllocTMsgList = tempSvcInvLineAllocTMsgList;
            } else {
                for (int j = 0; j < tempSvcInvLineAllocTMsgList.size(); j++) {
                    if (svcInvLineAllocTMsgList.size() <= j) {
                        break;
                    }
                    SVC_INV_LINE_ALLOCTMsg svcInvLineAllocTMsg = tempSvcInvLineAllocTMsgList.get(j);
                    SVC_INV_LINE_ALLOCTMsg updateSvcInvLineAllocTMsg = svcInvLineAllocTMsgList.get(j);

                    // svcContrChrgAllocAmt
                    if (updateSvcInvLineAllocTMsg.svcContrChrgAllocAmt.getValue() != null && svcInvLineAllocTMsg.svcContrChrgAllocAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.svcContrChrgAllocAmt, updateSvcInvLineAllocTMsg.svcContrChrgAllocAmt.getValue().add(svcInvLineAllocTMsg.svcContrChrgAllocAmt.getValue()));
                    } else if (updateSvcInvLineAllocTMsg.svcContrChrgAllocAmt.getValue() == null && svcInvLineAllocTMsg.svcContrChrgAllocAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.svcContrChrgAllocAmt, svcInvLineAllocTMsg.svcContrChrgAllocAmt);
                    }
                    // dealGrsUnitPrcAmt
                    if (updateSvcInvLineAllocTMsg.dealGrsUnitPrcAmt.getValue() != null && svcInvLineAllocTMsg.dealGrsUnitPrcAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.dealGrsUnitPrcAmt, updateSvcInvLineAllocTMsg.dealGrsUnitPrcAmt.getValue().add(svcInvLineAllocTMsg.dealGrsUnitPrcAmt.getValue()));
                    } else if (updateSvcInvLineAllocTMsg.dealGrsUnitPrcAmt.getValue() == null && svcInvLineAllocTMsg.dealGrsUnitPrcAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.dealGrsUnitPrcAmt, svcInvLineAllocTMsg.dealGrsUnitPrcAmt);
                    }
                    // dealDiscUnitPrcAmt
                    if (updateSvcInvLineAllocTMsg.dealDiscUnitPrcAmt.getValue() != null && svcInvLineAllocTMsg.dealDiscUnitPrcAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.dealDiscUnitPrcAmt, updateSvcInvLineAllocTMsg.dealDiscUnitPrcAmt.getValue().add(svcInvLineAllocTMsg.dealDiscUnitPrcAmt.getValue()));
                    } else if (updateSvcInvLineAllocTMsg.dealDiscUnitPrcAmt.getValue() == null && svcInvLineAllocTMsg.dealDiscUnitPrcAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.dealDiscUnitPrcAmt, svcInvLineAllocTMsg.dealDiscUnitPrcAmt);
                    }
                    // dealNetUnitPrcAmt
                    if (updateSvcInvLineAllocTMsg.dealNetUnitPrcAmt.getValue() != null && svcInvLineAllocTMsg.dealNetUnitPrcAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.dealNetUnitPrcAmt, updateSvcInvLineAllocTMsg.dealNetUnitPrcAmt.getValue().add(svcInvLineAllocTMsg.dealNetUnitPrcAmt.getValue()));
                    } else if (updateSvcInvLineAllocTMsg.dealNetUnitPrcAmt.getValue() == null && svcInvLineAllocTMsg.dealNetUnitPrcAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.dealNetUnitPrcAmt, svcInvLineAllocTMsg.dealNetUnitPrcAmt);
                    }
                    // dealGrsTotPrcAmt
                    if (updateSvcInvLineAllocTMsg.dealGrsTotPrcAmt.getValue() != null && svcInvLineAllocTMsg.dealGrsTotPrcAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.dealGrsTotPrcAmt, updateSvcInvLineAllocTMsg.dealGrsTotPrcAmt.getValue().add(svcInvLineAllocTMsg.dealGrsTotPrcAmt.getValue()));
                    } else if (updateSvcInvLineAllocTMsg.dealGrsTotPrcAmt.getValue() == null && svcInvLineAllocTMsg.dealGrsTotPrcAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.dealGrsTotPrcAmt, svcInvLineAllocTMsg.dealGrsTotPrcAmt);
                    }
                    // invLineDealNetAmt
                    if (updateSvcInvLineAllocTMsg.invLineDealNetAmt.getValue() != null && svcInvLineAllocTMsg.invLineDealNetAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.invLineDealNetAmt, updateSvcInvLineAllocTMsg.invLineDealNetAmt.getValue().add(svcInvLineAllocTMsg.invLineDealNetAmt.getValue()));
                    } else if (updateSvcInvLineAllocTMsg.invLineDealNetAmt.getValue() == null && svcInvLineAllocTMsg.invLineDealNetAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.invLineDealNetAmt, svcInvLineAllocTMsg.invLineDealNetAmt);
                    }
                    // invLineDealTaxAmt
                    if (updateSvcInvLineAllocTMsg.invLineDealTaxAmt.getValue() != null && svcInvLineAllocTMsg.invLineDealTaxAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.invLineDealTaxAmt, updateSvcInvLineAllocTMsg.invLineDealTaxAmt.getValue().add(svcInvLineAllocTMsg.invLineDealTaxAmt.getValue()));
                    } else if (updateSvcInvLineAllocTMsg.invLineDealTaxAmt.getValue() == null && svcInvLineAllocTMsg.invLineDealTaxAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.invLineDealTaxAmt, svcInvLineAllocTMsg.invLineDealTaxAmt);
                    }
                    // funcGrsUnitPrcAmt
                    if (updateSvcInvLineAllocTMsg.funcGrsUnitPrcAmt.getValue() != null && svcInvLineAllocTMsg.funcGrsUnitPrcAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.funcGrsUnitPrcAmt, updateSvcInvLineAllocTMsg.funcGrsUnitPrcAmt.getValue().add(svcInvLineAllocTMsg.funcGrsUnitPrcAmt.getValue()));
                    } else if (updateSvcInvLineAllocTMsg.funcGrsUnitPrcAmt.getValue() == null && svcInvLineAllocTMsg.funcGrsUnitPrcAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.funcGrsUnitPrcAmt, svcInvLineAllocTMsg.funcGrsUnitPrcAmt);
                    }
                    // funcDiscUnitPrcAmt
                    if (updateSvcInvLineAllocTMsg.funcDiscUnitPrcAmt.getValue() != null && svcInvLineAllocTMsg.funcDiscUnitPrcAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.funcDiscUnitPrcAmt, updateSvcInvLineAllocTMsg.funcDiscUnitPrcAmt.getValue().add(svcInvLineAllocTMsg.funcDiscUnitPrcAmt.getValue()));
                    } else if (updateSvcInvLineAllocTMsg.funcDiscUnitPrcAmt.getValue() == null && svcInvLineAllocTMsg.funcDiscUnitPrcAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.funcDiscUnitPrcAmt, svcInvLineAllocTMsg.funcDiscUnitPrcAmt);
                    }
                    // funcNetUnitPrcAmt
                    if (updateSvcInvLineAllocTMsg.funcNetUnitPrcAmt.getValue() != null && svcInvLineAllocTMsg.funcNetUnitPrcAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.funcNetUnitPrcAmt, updateSvcInvLineAllocTMsg.funcNetUnitPrcAmt.getValue().add(svcInvLineAllocTMsg.funcNetUnitPrcAmt.getValue()));
                    } else if (updateSvcInvLineAllocTMsg.funcNetUnitPrcAmt.getValue() == null && svcInvLineAllocTMsg.funcNetUnitPrcAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.funcNetUnitPrcAmt, svcInvLineAllocTMsg.funcNetUnitPrcAmt);
                    }
                    // funcGrsTotPrcAmt
                    if (updateSvcInvLineAllocTMsg.funcGrsTotPrcAmt.getValue() != null && svcInvLineAllocTMsg.funcGrsTotPrcAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.funcGrsTotPrcAmt, updateSvcInvLineAllocTMsg.funcGrsTotPrcAmt.getValue().add(svcInvLineAllocTMsg.funcGrsTotPrcAmt.getValue()));
                    } else if (updateSvcInvLineAllocTMsg.funcGrsTotPrcAmt.getValue() == null && svcInvLineAllocTMsg.funcGrsTotPrcAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.funcGrsTotPrcAmt, svcInvLineAllocTMsg.funcGrsTotPrcAmt);
                    }
                    // invLineFuncNetAmt
                    if (updateSvcInvLineAllocTMsg.invLineFuncNetAmt.getValue() != null && svcInvLineAllocTMsg.invLineFuncNetAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.invLineFuncNetAmt, updateSvcInvLineAllocTMsg.invLineFuncNetAmt.getValue().add(svcInvLineAllocTMsg.invLineFuncNetAmt.getValue()));
                    } else if (updateSvcInvLineAllocTMsg.invLineFuncNetAmt.getValue() == null && svcInvLineAllocTMsg.invLineFuncNetAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.invLineFuncNetAmt, svcInvLineAllocTMsg.invLineFuncNetAmt);
                    }
                    // invLineFuncTaxAmt
                    if (updateSvcInvLineAllocTMsg.invLineFuncTaxAmt.getValue() != null && svcInvLineAllocTMsg.invLineFuncTaxAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.invLineFuncTaxAmt, updateSvcInvLineAllocTMsg.invLineFuncTaxAmt.getValue().add(svcInvLineAllocTMsg.invLineFuncTaxAmt.getValue()));
                    } else if (updateSvcInvLineAllocTMsg.invLineFuncTaxAmt.getValue() == null && svcInvLineAllocTMsg.invLineFuncTaxAmt.getValue() != null) {
                        ZYPEZDItemValueSetter.setValue(updateSvcInvLineAllocTMsg.invLineFuncTaxAmt, svcInvLineAllocTMsg.invLineFuncTaxAmt);
                    }
                }
            }
        }

        return svcInvLineAllocTMsgList;
    }

    // QC2973 end

//    // QC2848 start
//    private void updateSvcInvLineTMsg(SVC_INV_LINETMsg updateSvcInvLineTMsg, SVC_INV_LINETMsg svcInvLineTMsg) {
//        // svcInvUnitHrsAot
//        if (updateSvcInvLineTMsg.svcInvUnitHrsAot.getValue() != null && svcInvLineTMsg.svcInvUnitHrsAot.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.svcInvUnitHrsAot, updateSvcInvLineTMsg.svcInvUnitHrsAot.getValue().add(svcInvLineTMsg.svcInvUnitHrsAot.getValue()));
//        } else if (updateSvcInvLineTMsg.svcInvUnitHrsAot.getValue() == null && svcInvLineTMsg.svcInvUnitHrsAot.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.svcInvUnitHrsAot, svcInvLineTMsg.svcInvUnitHrsAot);
//        }
//        // dealUnitPrcAmt
//        if (updateSvcInvLineTMsg.dealUnitPrcAmt.getValue() != null && svcInvLineTMsg.dealUnitPrcAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.dealUnitPrcAmt, updateSvcInvLineTMsg.dealUnitPrcAmt.getValue().add(svcInvLineTMsg.dealUnitPrcAmt.getValue()));
//        } else if (updateSvcInvLineTMsg.dealUnitPrcAmt.getValue() == null && svcInvLineTMsg.dealUnitPrcAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.dealUnitPrcAmt, svcInvLineTMsg.dealUnitPrcAmt);
//        }
//        // funcUnitPrcAmt
//        if (updateSvcInvLineTMsg.funcUnitPrcAmt.getValue() != null && svcInvLineTMsg.funcUnitPrcAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.funcUnitPrcAmt, updateSvcInvLineTMsg.funcUnitPrcAmt.getValue().add(svcInvLineTMsg.funcUnitPrcAmt.getValue()));
//        } else if (updateSvcInvLineTMsg.funcUnitPrcAmt.getValue() == null && svcInvLineTMsg.funcUnitPrcAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.funcUnitPrcAmt, svcInvLineTMsg.funcUnitPrcAmt);
//        }
//        // svcInvMnAot
//        if (updateSvcInvLineTMsg.svcInvMnAot.getValue() != null && svcInvLineTMsg.svcInvMnAot.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.svcInvMnAot, updateSvcInvLineTMsg.svcInvMnAot.getValue().add(svcInvLineTMsg.svcInvMnAot.getValue()));
//        } else if (updateSvcInvLineTMsg.svcInvMnAot.getValue() == null && svcInvLineTMsg.svcInvMnAot.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.svcInvMnAot, svcInvLineTMsg.svcInvMnAot);
//        }
//        // invLineDealSlsAmt
//        if (updateSvcInvLineTMsg.invLineDealSlsAmt.getValue() != null && svcInvLineTMsg.invLineDealSlsAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.invLineDealSlsAmt, updateSvcInvLineTMsg.invLineDealSlsAmt.getValue().add(svcInvLineTMsg.invLineDealSlsAmt.getValue()));
//        } else if (updateSvcInvLineTMsg.invLineDealSlsAmt.getValue() == null && svcInvLineTMsg.invLineDealSlsAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.invLineDealSlsAmt, svcInvLineTMsg.invLineDealSlsAmt);
//        }
//        // invLineFuncSlsAmt
//        if (updateSvcInvLineTMsg.invLineFuncSlsAmt.getValue() != null && svcInvLineTMsg.invLineFuncSlsAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.invLineFuncSlsAmt, updateSvcInvLineTMsg.invLineFuncSlsAmt.getValue().add(svcInvLineTMsg.invLineFuncSlsAmt.getValue()));
//        } else if (updateSvcInvLineTMsg.invLineFuncSlsAmt.getValue() == null && svcInvLineTMsg.invLineFuncSlsAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.invLineFuncSlsAmt, svcInvLineTMsg.invLineFuncSlsAmt);
//        }
//        // svcLborDealAmt
//        if (updateSvcInvLineTMsg.svcLborDealAmt.getValue() != null && svcInvLineTMsg.svcLborDealAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.svcLborDealAmt, updateSvcInvLineTMsg.svcLborDealAmt.getValue().add(svcInvLineTMsg.svcLborDealAmt.getValue()));
//        } else if (updateSvcInvLineTMsg.svcLborDealAmt.getValue() == null && svcInvLineTMsg.svcLborDealAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.svcLborDealAmt, svcInvLineTMsg.svcLborDealAmt);
//        }
//        // svcLborFuncAmt
//        if (updateSvcInvLineTMsg.svcLborFuncAmt.getValue() != null && svcInvLineTMsg.svcLborFuncAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.svcLborFuncAmt, updateSvcInvLineTMsg.svcLborFuncAmt.getValue().add(svcInvLineTMsg.svcLborFuncAmt.getValue()));
//        } else if (updateSvcInvLineTMsg.svcLborFuncAmt.getValue() == null && svcInvLineTMsg.svcLborFuncAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.svcLborFuncAmt, svcInvLineTMsg.svcLborFuncAmt);
//        }
//        // invLineDealNetAmt
//        if (updateSvcInvLineTMsg.invLineDealNetAmt.getValue() != null && svcInvLineTMsg.invLineDealNetAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.invLineDealNetAmt, updateSvcInvLineTMsg.invLineDealNetAmt.getValue().add(svcInvLineTMsg.invLineDealNetAmt.getValue()));
//        } else if (updateSvcInvLineTMsg.invLineDealNetAmt.getValue() == null && svcInvLineTMsg.invLineDealNetAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.invLineDealNetAmt, svcInvLineTMsg.invLineDealNetAmt);
//        }
//        // invLineFuncNetAmt
//        if (updateSvcInvLineTMsg.invLineFuncNetAmt.getValue() != null && svcInvLineTMsg.invLineFuncNetAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.invLineFuncNetAmt, updateSvcInvLineTMsg.invLineFuncNetAmt.getValue().add(svcInvLineTMsg.invLineFuncNetAmt.getValue()));
//        } else if (updateSvcInvLineTMsg.invLineFuncNetAmt.getValue() == null && svcInvLineTMsg.invLineFuncNetAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.invLineFuncNetAmt, svcInvLineTMsg.invLineFuncNetAmt);
//        }
//        // QC3032 start
//        // slsTaxRate
//        if (updateSvcInvLineTMsg.slsTaxRate.getValue() == null || updateSvcInvLineTMsg.slsTaxRate.getValue().doubleValue() == 0) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.slsTaxRate, svcInvLineTMsg.slsTaxRate);
//        }
//        // QC3032 end
//        // invLineDealTaxAmt
//        if (updateSvcInvLineTMsg.invLineDealTaxAmt.getValue() != null && svcInvLineTMsg.invLineDealTaxAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.invLineDealTaxAmt, updateSvcInvLineTMsg.invLineDealTaxAmt.getValue().add(svcInvLineTMsg.invLineDealTaxAmt.getValue()));
//        } else if (updateSvcInvLineTMsg.invLineDealTaxAmt.getValue() == null && svcInvLineTMsg.invLineDealTaxAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.invLineDealTaxAmt, svcInvLineTMsg.invLineDealTaxAmt);
//        }
//        // invLineFuncTaxAmt
//        if (updateSvcInvLineTMsg.invLineFuncTaxAmt.getValue() != null && svcInvLineTMsg.invLineFuncTaxAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.invLineFuncTaxAmt, updateSvcInvLineTMsg.invLineFuncTaxAmt.getValue().add(svcInvLineTMsg.invLineFuncTaxAmt.getValue()));
//        } else if (updateSvcInvLineTMsg.invLineFuncTaxAmt.getValue() == null && svcInvLineTMsg.invLineFuncTaxAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.invLineFuncTaxAmt, svcInvLineTMsg.invLineFuncTaxAmt);
//        }
//        // invLineDealDiscAmt
//        if (updateSvcInvLineTMsg.invLineDealDiscAmt.getValue() != null && svcInvLineTMsg.invLineDealDiscAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.invLineDealDiscAmt, updateSvcInvLineTMsg.invLineDealDiscAmt.getValue().add(svcInvLineTMsg.invLineDealDiscAmt.getValue()));
//        } else if (updateSvcInvLineTMsg.invLineDealDiscAmt.getValue() == null && svcInvLineTMsg.invLineDealDiscAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.invLineDealDiscAmt, svcInvLineTMsg.invLineDealDiscAmt);
//        }
//        // invLineFuncDiscAmt
//        if (updateSvcInvLineTMsg.invLineFuncDiscAmt.getValue() != null && svcInvLineTMsg.invLineFuncDiscAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.invLineFuncDiscAmt, updateSvcInvLineTMsg.invLineFuncDiscAmt.getValue().add(svcInvLineTMsg.invLineFuncDiscAmt.getValue()));
//        } else if (updateSvcInvLineTMsg.invLineFuncDiscAmt.getValue() == null && svcInvLineTMsg.invLineFuncDiscAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.invLineFuncDiscAmt, svcInvLineTMsg.invLineFuncDiscAmt);
//        }
//        // dealDiscUnitPrcAmt
//        if (updateSvcInvLineTMsg.dealDiscUnitPrcAmt.getValue() != null && svcInvLineTMsg.dealDiscUnitPrcAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.dealDiscUnitPrcAmt, updateSvcInvLineTMsg.dealDiscUnitPrcAmt.getValue().add(svcInvLineTMsg.dealDiscUnitPrcAmt.getValue()));
//        } else if (updateSvcInvLineTMsg.dealDiscUnitPrcAmt.getValue() == null && svcInvLineTMsg.dealDiscUnitPrcAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.dealDiscUnitPrcAmt, svcInvLineTMsg.dealDiscUnitPrcAmt);
//        }
//        // funcDiscUnitPrcAmt
//        if (updateSvcInvLineTMsg.funcDiscUnitPrcAmt.getValue() != null && svcInvLineTMsg.funcDiscUnitPrcAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.funcDiscUnitPrcAmt, updateSvcInvLineTMsg.funcDiscUnitPrcAmt.getValue().add(svcInvLineTMsg.funcDiscUnitPrcAmt.getValue()));
//        } else if (updateSvcInvLineTMsg.funcDiscUnitPrcAmt.getValue() == null && svcInvLineTMsg.funcDiscUnitPrcAmt.getValue() != null) {
//            ZYPEZDItemValueSetter.setValue(updateSvcInvLineTMsg.funcDiscUnitPrcAmt, svcInvLineTMsg.funcDiscUnitPrcAmt);
//        }
//    }
//    // QC2848 end
// START 2022/02/09 S.Kitamura [QC#59683, ADD]
    private List<List<Map<String, Object>>> getGroupList(List<Map<String, Object>> contrDtlInfoList, String allLineTogetherFlg) {
        for (int i = 0; i < contrDtlInfoList.size(); i++) {
            Map<String, Object> contrDtlInfo = contrDtlInfoList.get(i);
            Map<String, Object> crCardPoInfo = getDsContrCrCardPo((BigDecimal) contrDtlInfo.get("DS_CONTR_PK")
                                                                    , (BigDecimal) contrDtlInfo.get("DS_CONTR_DTL_PK")
                                                                    , (BigDecimal) contrDtlInfo.get("DS_CONTR_BLLG_MTR_PK")
                                                                    , (String) contrDtlInfo.get("PMT_TERM_CASH_DISC_CD")
                                                                    , (String) contrDtlInfo.get("SVC_CONTR_BLLG_THRU_DT")
            // START 2023/08/30 [QC#61805,ADD]
                                                                    , (String) contrDtlInfo.get("SVC_CONTR_BLLG_FROM_DT")
            // END 2023/08/30 [QC#61805,ADD]
                                                                    , null);
            if (crCardPoInfo != null) {
                contrDtlInfo.put("CR_CARD_CUST_REF_NUM", (String) crCardPoInfo.get("CR_CARD_CUST_REF_NUM"));
                contrDtlInfo.put("CUST_PO_NUM", (String) crCardPoInfo.get("CUST_PO_NUM"));
            }
            String defInvGrpCd = callNMZC610001((String) contrDtlInfo.get("BILL_TO_CUST_CD"));
            StringBuilder sb = new StringBuilder();
            if (ZYPConstant.FLG_ON_Y.equals(allLineTogetherFlg)) {
                sb.append((String) contrDtlInfo.get("BILL_TO_CUST_CD")).append(":");
                sb.append((BigDecimal) contrDtlInfo.get("CTAC_PSN_PK")).append(":");
                // START 2022/09/01 L.Mandanas [QC#58350, ADD]
                sb.append((String) contrDtlInfo.get("MIN_SVC_CONTR_BLLG_FROM_DT")).append(":");
                // END 2022/09/01 L.Mandanas [QC#58350, ADD]
                sb.append((String) contrDtlInfo.get("ORIG_SVC_INV_NUM")).append(":");
                sb.append((String) contrDtlInfo.get("CR_CARD_CUST_REF_NUM")).append(":");
                sb.append(getGrpNextBllgDt(contrDtlInfo)).append(":");
                if (hasValue(defInvGrpCd)) {
                    if (DEF_INV_GRP.MODEL.equals(defInvGrpCd)) {
                        sb.append((String) contrDtlInfo.get("MDL_ID"));
                    }
                    if (DEF_INV_GRP.SERIAL_NUM.equals(defInvGrpCd)) {
                        sb.append((String) contrDtlInfo.get("SER_NUM"));
                    }
                    if (DEF_INV_GRP.PO_NUM.equals(defInvGrpCd)) {
                        sb.append((String) contrDtlInfo.get("CUST_PO_NUM"));
                    }
                    if (DEF_INV_GRP.IB_CONTROL_FIELDS1.equals(defInvGrpCd)) {
                        sb.append((String) contrDtlInfo.get("CTRL_FLD_TXT_01"));
                    }
                    if (DEF_INV_GRP.IB_CONTROL_FIELDS2.equals(defInvGrpCd)) {
                        sb.append((String) contrDtlInfo.get("CTRL_FLD_TXT_02"));
                    }
                    if (DEF_INV_GRP.IB_CONTROL_FIELDS3.equals(defInvGrpCd)) {
                        sb.append((String) contrDtlInfo.get("CTRL_FLD_TXT_03"));
                    }
                    if (DEF_INV_GRP.IB_CONTROL_FIELDS4.equals(defInvGrpCd)) {
                        sb.append((String) contrDtlInfo.get("CTRL_FLD_TXT_04"));
                    }
                    if (DEF_INV_GRP.IB_CONTROL_FIELDS5.equals(defInvGrpCd)) {
                        sb.append((String) contrDtlInfo.get("CTRL_FLD_TXT_05"));
                    }
                    if (DEF_INV_GRP.IB_CONTROL_FIELDS6.equals(defInvGrpCd)) {
                        sb.append((String) contrDtlInfo.get("CTRL_FLD_TXT_06"));
                    }
                }
            } else {
                sb.append((BigDecimal) contrDtlInfo.get("SVC_MACH_MSTR_PK")).append(":");
                sb.append((String) contrDtlInfo.get("BILL_TO_CUST_CD")).append(":");
                sb.append((BigDecimal) contrDtlInfo.get("CTAC_PSN_PK")).append(":");
                // START 2022/09/01 L.Mandanas [QC#58350, ADD]
                sb.append((String) contrDtlInfo.get("MIN_SVC_CONTR_BLLG_FROM_DT")).append(":");
                // END 2022/09/01 L.Mandanas [QC#58350, ADD]
                sb.append((String) contrDtlInfo.get("ORIG_SVC_INV_NUM")).append(":");
                sb.append((String) contrDtlInfo.get("CR_CARD_CUST_REF_NUM")).append(":");
                sb.append(getGrpNextBllgDt(contrDtlInfo)).append(":");
                if (hasValue(defInvGrpCd)) {
                    if (DEF_INV_GRP.PO_NUM.equals(defInvGrpCd)) {
                        sb.append((String) contrDtlInfo.get("CUST_PO_NUM"));
                    }
                }
            }
            String grpKey = sb.toString();
            contrDtlInfo.put("GROUP_KEY", grpKey);
        }
        Collections.sort(contrDtlInfoList, grpKeySortRule);
        List<List<Map<String, Object>>> resultGroupList = new ArrayList<List<Map<String, Object>>>();
        List<Map<String, Object>> grpList;
        String prevGrpKey = "";
        int grpIdx = -1;
        for (int i = 0; i < contrDtlInfoList.size(); i++) {
            Map<String, Object> contrDtlInfo = contrDtlInfoList.get(i);
            if (prevGrpKey.equals((String) contrDtlInfo.get("GROUP_KEY"))) {
                resultGroupList.get(grpIdx).add(contrDtlInfo);
            } else {
                grpIdx++;
                grpList = new ArrayList<Map<String, Object>>();
                grpList.add(contrDtlInfo);
                resultGroupList.add(grpList);
                prevGrpKey = (String) contrDtlInfo.get("GROUP_KEY");
            }
        }
        return resultGroupList;
    }
    
    private Comparator<Map<String, Object>> grpKeySortRule = new Comparator<Map<String, Object>>() {
        public int compare(Map<String, Object> m1, Map<String, Object> m2) {
            return ((String)m1.get("GROUP_KEY")).compareTo((String) m2.get("GROUP_KEY"));
        }
    };
// END 2022/02/09 S.Kitamura [QC#59683, ADD]
// START 2022/02/09 S.Kitamura [QC#59683, DEL]
     //Mod Start 06/27/2016 <QC#8293>
//    private List<List<Map<String, Object>>> getGroupList(List<Map<String, Object>> contrDtlInfoList) {
//        List<List<Map<String, Object>>> resultGroupList = new ArrayList<List<Map<String, Object>>>();
//        List<ContrGrpInfo> grpKeyList = new ArrayList<ContrGrpInfo>();
//
//        for (int i = 0; i < contrDtlInfoList.size(); i++) {
//            Map<String, Object> contrDtlInfo = contrDtlInfoList.get(i);
//
//            ContrGrpInfo contrGrp = new ContrGrpInfo();
//          //  contrGrp.setDsContrDtlTpCd((String) contrDtlInfo.get("DS_CONTR_DTL_TP_CD"));
//            contrGrp.setBillToCustCd((String) contrDtlInfo.get("BILL_TO_CUST_CD"));
//            contrGrp.setCtacPsnPk((BigDecimal) contrDtlInfo.get("CTAC_PSN_PK"));
//            contrGrp.setOrigSvcInvNum((String) contrDtlInfo.get("ORIG_SVC_INV_NUM"));
//            contrGrp.setCurLocAcctNum((String) contrDtlInfo.get("CUR_LOC_ACCT_NUM"));
//            contrGrp.setCurLocNum((String) contrDtlInfo.get("CUR_LOC_NUM"));
//            contrGrp.setBaseChrgFlg((String) contrDtlInfo.get("BASE_CHRG_FLG"));
//            contrGrp.setSvcContrBllgFromDt((String) contrDtlInfo.get("SVC_CONTR_BLLG_FROM_DT"));
//            contrGrp.setSvcContrBllgThruDt((String) contrDtlInfo.get("SVC_CONTR_BLLG_THRU_DT"));
//            contrGrp.setMdlId((BigDecimal) contrDtlInfo.get("MDL_ID"));
//            contrGrp.setSerNum((String) contrDtlInfo.get("SER_NUM"));
//            contrGrp.setInvSeptBaseUsgFlg((String) contrDtlInfo.get("INV_SEPT_BASE_USG_FLG"));
//            contrGrp.setBaseBllgNextBllgDt((String) contrDtlInfo.get("BASE_BLLG_NEXT_BLLG_DT"));
//            contrGrp.setMtrBllgNextBllgDt((String) contrDtlInfo.get("MTR_BLLG_NEXT_BLLG_DT"));
//            contrGrp.setOvrdNextBllgDt((String) contrDtlInfo.get("OVRD_NEXT_BLLG_DT"));
//            // START 2018/05/08 K.Kitachi [QC#23604, ADD]
//            // START 2018/06/26 U.Kim [QC#26703,MOD]
//            // contrGrp.setDefInvGrpTxt((String) contrDtlInfo.get("DEF_INV_GRP_TXT"));
//            contrGrp.setCtrlFldTxt01((String) contrDtlInfo.get("CTRL_FLD_TXT_01"));
//            contrGrp.setCtrlFldTxt02((String) contrDtlInfo.get("CTRL_FLD_TXT_02"));
//            contrGrp.setCtrlFldTxt03((String) contrDtlInfo.get("CTRL_FLD_TXT_03"));
//            contrGrp.setCtrlFldTxt04((String) contrDtlInfo.get("CTRL_FLD_TXT_04"));
//            contrGrp.setCtrlFldTxt05((String) contrDtlInfo.get("CTRL_FLD_TXT_05"));
//            contrGrp.setCtrlFldTxt06((String) contrDtlInfo.get("CTRL_FLD_TXT_06"));
//            // END 2018/06/26 U.Kim [QC#26703,MOD]
//            // END 2018/05/08 K.Kitachi [QC#23604, ADD]
//
//            // START 2018/08/24 K.Kojima [QC#27919,DEL]
//            // List<Map<String, Object>> allocList = getSvcContrBllgAlloc((BigDecimal) contrDtlInfo.get("SVC_CONTR_BLLG_PK"));
//            // if (!allocList.isEmpty()) {
//            //     contrGrp.setDfrdAcctgRuleCd((String) allocList.get(0).get("DFRD_ACCTG_RULE_CD"));
//            //     // contrGrp.setDfrdAcctgRuleDurnAot((BigDecimal) allocList.get(0).get("DFRD_ACCTG_RULE_DURN_AOT"));
//            // }
//            // END 2018/08/24 K.Kojima [QC#27919,DEL]
//            // Mod Start 2019/01/25 QC#29689
//            // Mod Start 2019/01/21 QC#26928
//            // START 2016/06/15 T.Kanasaka [QC#9869, MOD]
//            Map<String, Object> crCardPoInfo = getDsContrCrCardPo((BigDecimal) contrDtlInfo.get("DS_CONTR_PK")
//                                                                    , (BigDecimal) contrDtlInfo.get("DS_CONTR_DTL_PK")
//            // START 2016/10/18 T.Kanasaka [QC#13009, MOD]
////                                                                    , (BigDecimal) contrDtlInfo.get("DS_CONTR_BLLG_MTR_PK"));
//                                                                    , (BigDecimal) contrDtlInfo.get("DS_CONTR_BLLG_MTR_PK")
//                                                                    , (String) contrDtlInfo.get("PMT_TERM_CASH_DISC_CD")
//                                                                    , (String) contrDtlInfo.get("SVC_CONTR_BLLG_THRU_DT")
//                                                                    , null);
//            // END 2016/10/18 T.Kanasaka [QC#13009, MOD]
//            // END 2016/06/15 T.Kanasaka [QC#9869, MOD]
//            // Mod End 2019/01/21 QC#26928
//            // Mod End 2019/01/25 QC#29689
//            if (crCardPoInfo != null) {
//                contrGrp.setCrCardCustRefNum((String) crCardPoInfo.get("CR_CARD_CUST_REF_NUM"));
//                contrGrp.setCustPoNum((String) crCardPoInfo.get("CUST_PO_NUM"));
//            }
//            contrGrp.setOrigIdx(i);
//            grpKeyList.add(contrGrp);
//        }
//
//        List<Map<String, Object>> grpList;
//        int grpIdx = 0;
//
//        for (int i = 0; i < contrDtlInfoList.size(); i++) {
//            Map<String, Object> contrDtlInfo = contrDtlInfoList.get(i);
//            // START 2019/07/17 T.Aoyagi [QC#51576, MOD]
//            setGrpKeyToContrInfo(contrDtlInfo, grpKeyList.get(i));
//            // END 2019/07/17 T.Aoyagi [QC#51576, MOD]
//            if (i == 0) {
//                grpList = new ArrayList<Map<String, Object>>();
//                grpList.add(contrDtlInfo);
//                grpKeyList.get(i).setGrpIdx(grpIdx);
//                resultGroupList.add(grpList);
//                continue;
//            }
//
//            int findIdx = findGrpKey(i, grpKeyList);
//
//            if (findIdx > -1) {
//                grpKeyList.get(i).setGrpIdx(findIdx);
//                resultGroupList.get(findIdx).add(contrDtlInfo);
//            } else {
//                grpIdx++;
//                grpList = new ArrayList<Map<String, Object>>();
//                grpList.add(contrDtlInfo);
//                grpKeyList.get(i).setGrpIdx(grpIdx);
//                resultGroupList.add(grpList);
//            }
//        }
//
//        return resultGroupList;
//    }
//
//    // START 2019/07/17 T.Aoyagi [QC#51576, ADD]
//    private void setGrpKeyToContrInfo(Map<String, Object> contrDtlInfo, ContrGrpInfo contrGrp) {
//
//        contrDtlInfo.put("CR_CARD_CUST_REF_NUM", contrGrp.getCrCardCustRefNum());
//    }
//    // END 2019/07/17 T.Aoyagi [QC#51576, ADD]
//
//    private int findGrpKey(int curIdx, List<ContrGrpInfo> grpKeyList) {
//
//        ContrGrpInfo curGrp = grpKeyList.get(curIdx);
//
//        // START 2018/08/03 K.Kojima [QC#27510,DEL]
//        // if (DS_CONTR_DTL_TP.ACCESSORIES.equals(curGrp.getDsContrDtlTpCd())) {
//        //     int rtnIdx = 0;
//        //     if (curIdx > 0) {
//        //         rtnIdx = grpKeyList.get(curIdx - 1).getGrpIdx();
//        //     }
//        //     return rtnIdx;
//        // }
//        // END 2018/08/03 K.Kojima [QC#27510,DEL]
//
//        String curGrpNextBllgDt = getGrpNextBllgDt(curGrp);
//
//        for (int i = 0; i < curIdx; i++) {
//
//            ContrGrpInfo compGrp = grpKeyList.get(i);
//            if (!equals(curGrp.getBillToCustCd(), compGrp.getBillToCustCd())) {
//                continue;
//            }
//            if (!equals(curGrp.getCtacPsnPk(), compGrp.getCtacPsnPk())) {
//                continue;
//            }
//            if (!equals(curGrp.getOrigSvcInvNum(), compGrp.getOrigSvcInvNum())) {
//                continue;
//            }
//            // START 2017/08/01 U.Kim [QC#20058, ADD]
//            if (!ZYPConstant.FLG_OFF_N.equals(curGrp.getInvSeptBaseUsgFlg())) {
//            // END 2017/08/01 U.Kim [QC#20058, ADD]
//                if (!equals(curGrp.getCurLocAcctNum(), compGrp.getCurLocAcctNum())) {
//                    continue;
//                }
//                if (!equals(curGrp.getCurLocNum(), compGrp.getCurLocNum())) {
//                    continue;
//                }
//            // START 2017/08/01 U.Kim [QC#20058, ADD]
//            }
//            // END 2017/08/01 U.Kim [QC#20058, ADD]
//            if (!equals(curGrp.getCrCardCustRefNum(), compGrp.getCrCardCustRefNum())) {
//                continue;
//            }
//            // Mod Start 08/08/2016 <QC#8293>
//            String compGrpNextBllgDt = getGrpNextBllgDt(compGrp);
//            if (!equals(curGrpNextBllgDt, compGrpNextBllgDt)) {
//                continue;
//            }
//
//            // Mod Start 08/22/2016 <QC#13533>
//            if (!ZYPConstant.FLG_OFF_N.equals(curGrp.getInvSeptBaseUsgFlg())) {
//            // Mod End   08/22/2016 <QC#13533>
////                if (!equals(curGrp.getBaseChrgFlg(), compGrp.getBaseChrgFlg())) {
////                    continue;
////                }
////                if (!equals(curGrp.getSvcContrBllgFromDt(), compGrp.getSvcContrBllgFromDt())) {
////                    continue;
////                }
////                if (!equals(curGrp.getSvcContrBllgThruDt(), compGrp.getSvcContrBllgThruDt())) {
////                    continue;
////                }
//                // START 2018/08/24 K.Kojima [QC#27919,DEL]
//                // if (!equals(curGrp.getDfrdAcctgRuleCd(), compGrp.getDfrdAcctgRuleCd())) {
//                //     continue;
//                // }
//                // END 2018/08/24 K.Kojima [QC#27919,DEL]
////                if (!equals(curGrp.getDfrdAcctgRuleDurnAot(), compGrp.getDfrdAcctgRuleDurnAot())) {
////                    continue;
////                }
//            }
//            // Mod End   08/08/2016 <QC#8293>
//            String defInvGrpCd = callNMZC610001(curGrp.getBillToCustCd());
//            if (hasValue(defInvGrpCd)) {
//                if (DEF_INV_GRP.MODEL.equals(defInvGrpCd)) {
//                    if (!equals(curGrp.getMdlId(), compGrp.getMdlId())) {
//                        continue;
//                    }
//                }
//                if (DEF_INV_GRP.SERIAL_NUM.equals(defInvGrpCd)) {
//                    if (!equals(curGrp.getSerNum(), compGrp.getSerNum())) {
//                        continue;
//                    }
//                }
//                if (DEF_INV_GRP.PO_NUM.equals(defInvGrpCd)) {
//                    if (!equals(curGrp.getCustPoNum(), compGrp.getCustPoNum())) {
//                        continue;
//                    }
//                }
//                // START 2018/05/08 K.Kitachi [QC#23604, ADD]
//                // START 2018/06/26 U.Kim [QC#26703,MOD]
//                // if (DEF_INV_GRP.IB_CONTROL_FIELDS.equals(defInvGrpCd)) {
//                //     if (!equals(curGrp.getDefInvGrpTxt(), compGrp.getDefInvGrpTxt())) {
//                //         continue;
//                //     }
//                // }
//                if (DEF_INV_GRP.IB_CONTROL_FIELDS1.equals(defInvGrpCd)) {
//                    if (!equals(curGrp.getCtrlFldTxt01(), compGrp.getCtrlFldTxt01())) {
//                        continue;
//                    }
//                }
//                if (DEF_INV_GRP.IB_CONTROL_FIELDS2.equals(defInvGrpCd)) {
//                    if (!equals(curGrp.getCtrlFldTxt02(), compGrp.getCtrlFldTxt02())) {
//                        continue;
//                    }
//                }
//                if (DEF_INV_GRP.IB_CONTROL_FIELDS3.equals(defInvGrpCd)) {
//                    if (!equals(curGrp.getCtrlFldTxt03(), compGrp.getCtrlFldTxt03())) {
//                        continue;
//                    }
//                }
//                if (DEF_INV_GRP.IB_CONTROL_FIELDS4.equals(defInvGrpCd)) {
//                    if (!equals(curGrp.getCtrlFldTxt04(), compGrp.getCtrlFldTxt04())) {
//                        continue;
//                    }
//                }
//                if (DEF_INV_GRP.IB_CONTROL_FIELDS5.equals(defInvGrpCd)) {
//                    if (!equals(curGrp.getCtrlFldTxt05(), compGrp.getCtrlFldTxt05())) {
//                        continue;
//                    }
//                }
//                if (DEF_INV_GRP.IB_CONTROL_FIELDS6.equals(defInvGrpCd)) {
//                    if (!equals(curGrp.getCtrlFldTxt06(), compGrp.getCtrlFldTxt06())) {
//                        continue;
//                    }
//                }
//                // END 2018/06/26 U.Kim [QC#26703,MOD]
//                // END 2018/05/08 K.Kitachi [QC#23604, ADD]
//            }
//
//            return compGrp.getGrpIdx();
//        }
//        // Not found
//        return -1;
//    }
    //Mod End   06/27/2016 <QC#8293>

//    //Add Start 06/27/2016 <QC#8293>
//    private String getGrpNextBllgDt(ContrGrpInfo grpInfo) {
//        if (hasValue(grpInfo.getOvrdNextBllgDt())) {
//            return grpInfo.getOvrdNextBllgDt();
//        } else if (FLG_ON_Y.equals(grpInfo.getBaseChrgFlg())) {
//            return grpInfo.getBaseBllgNextBllgDt();
//        } else {
//            return grpInfo.getMtrBllgNextBllgDt();
//        }
//    }
//    //Add End   06/27/2016 <QC#8293>
// END 2022/02/09 S.Kitamura [QC#59683, DEL]
    //Add Start 06/27/2016 <QC#8293>
    private String getGrpNextBllgDt(Map<String, Object> contrDtlInfo) {
        if (hasValue((String) contrDtlInfo.get("OVRD_NEXT_BLLG_DT"))) {
            return (String) contrDtlInfo.get("OVRD_NEXT_BLLG_DT");
        } else if (FLG_ON_Y.equals((String) contrDtlInfo.get("BASE_CHRG_FLG"))) {
            return (String) contrDtlInfo.get("BASE_BLLG_NEXT_BLLG_DT");
        } else {
            return (String) contrDtlInfo.get("MTR_BLLG_NEXT_BLLG_DT");
        }
    }
    //Add End   06/27/2016 <QC#8293>
    // END 2022/02/09 S.Kitamura [QC#59683, MOD]

    private String callNMZC610001(String billToCustCd) {
        // START 2022/02/09 S.Kitamura [QC#59683, ADD]
        if (this.defInvGrpCdMap.containsKey(billToCustCd)) {
            return this.defInvGrpCdMap.get(billToCustCd);
        }
        // END 2022/02/09 S.Kitamura [QC#59683, ADD]
        NMZC610001 nMZC610001 = new NMZC610001();
        NMZC610001PMsg pMsg = new NMZC610001PMsg();

        ZYPEZDItemValueSetter.setValue(pMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(pMsg.xxModeCd, NMZC610001Constant.PROCESS_MODE_INVOICE);
        ZYPEZDItemValueSetter.setValue(pMsg.custInvSrcCd, CUST_INV_SRC.SERVICE_CONTRACT);
        ZYPEZDItemValueSetter.setValue(pMsg.billToCustCd, billToCustCd);

        nMZC610001.execute(pMsg, ONBATCH_TYPE.BATCH);
        if (!S21ApiUtil.isXxMsgId(pMsg)) {
            for (int i = 0; i < pMsg.InvoiceRuleList.getValidCount(); i++) {
                // START 2022/02/09 S.Kitamura [QC#59683, ADD]
                this.defInvGrpCdMap.put(billToCustCd, pMsg.InvoiceRuleList.no(i).defInvGrpCd.getValue());
                // END 2022/02/09 S.Kitamura [QC#59683, ADD]
                return pMsg.InvoiceRuleList.no(i).defInvGrpCd.getValue();
            }
        }
        // START 2022/02/09 S.Kitamura [QC#59683, ADD]
        this.defInvGrpCdMap.put(billToCustCd, "");
        // END 2022/02/09 S.Kitamura [QC#59683, ADD]
        return "";
    }

    private boolean equals(String str1, String str2) {

        if (!hasValue(str1) && !hasValue(str2)) {
            return true;
        }
        if (hasValue(str1) && hasValue(str2)) {
            if (str1.equals(str2)) {
                return true;
            }
        }
        return false;
    }

    private boolean equals(BigDecimal bd1, BigDecimal bd2) {

        if (!hasValue(bd1) && !hasValue(bd2)) {
            return true;
        }
        if (hasValue(bd1) && hasValue(bd2)) {
            if (bd1.compareTo(bd2) == 0) {
                return true;
            }
        }
        return false;
    }

    private boolean isSameShipTo(List<Map<String, Object>> dsContrDtlInfoList) {

        boolean result = true;
        String prevCurLocNum = null;

        for (Map<String, Object> dsContrDtlInfoMap : dsContrDtlInfoList) {

            String dsContrDtlTpCd = (String) dsContrDtlInfoMap.get("DS_CONTR_DTL_TP_CD");
            if (DS_CONTR_DTL_TP.FLEET.equals(dsContrDtlTpCd) || DS_CONTR_DTL_TP.AGGREGATE.equals(dsContrDtlTpCd)) {
                continue;
            }
            if (prevCurLocNum != null) {
                String curCurLocNum = (String) dsContrDtlInfoMap.get("CUR_LOC_NUM");
                if (!prevCurLocNum.equals(curCurLocNum)) {
                    result = false;
                    break;
                }
            } else {
                prevCurLocNum = (String) dsContrDtlInfoMap.get("CUR_LOC_NUM");
            }
        }
        return result;
    }

    // START 2018/02/02 K.Kojima [QC#22242,ADD]
    private String getFirstMachineShipTo(List<Map<String, Object>> dsContrDtlInfoList) {
        for (Map<String, Object> dsContrDtlInfoMap : dsContrDtlInfoList) {
            String dsContrDtlTpCd = (String) dsContrDtlInfoMap.get("DS_CONTR_DTL_TP_CD");
            if (DS_CONTR_DTL_TP.FLEET.equals(dsContrDtlTpCd) || DS_CONTR_DTL_TP.AGGREGATE.equals(dsContrDtlTpCd)) {
                continue;
            }
            String curLocNum = (String) dsContrDtlInfoMap.get("CUR_LOC_NUM");
            if (hasValue(curLocNum)) {
                return curLocNum;
            }
        }
        return null;
    }

    // END 2018/02/02 K.Kojima [QC#22242,ADD]

    // START 2016/10/18 T.Kanasaka [QC#13009, MOD]
    //Add Start 05/25/2016 <QC#8591>
//    private boolean checkBllblFlg(BigDecimal dsContrPk, String svcInvKey, List<Map<String, Object>> contrDtlInfoList, String dsContrCatgCd) {
//        for (Map<String, Object> dsContrDtlInfo : contrDtlInfoList) {
//            DS_CONTRTMsg dsContrTMsg = getDsContr(dsContrPk);
//            if (dsContrTMsg == null) {
//                Key key = new Key();
//                key.add("DS_CONTR_PK", dsContrPk);
//                addMessage(dsContrCatgCd, svcInvKey, 1, NSZM0396E, "DS_CONTR", key.toString());
//                return false;
//            }
//
//            BigDecimal svcContrBllgPk = (BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK");
//            SVC_CONTR_BLLGTMsg svcContrBllgTMsg = getSvcContrBllg(svcContrBllgPk);
//            if (svcContrBllgTMsg == null) {
//                Key key = new Key();
//                key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
//                addMessage(dsContrCatgCd, svcInvKey, 1, NSZM0396E, "SVC_CONTR_BLLG", key.toString());
//                return false;
//            }
//
//            // Check billable flag
//            if (!checkBllblFlg(svcContrBllgTMsg, dsContrTMsg, dsContrDtlInfo, svcInvKey)) {
//                return false;
//            }
//        }
//        return true;
//    }
//    //Add End   05/25/2016 <QC#8591>
//
//    // Mod Start 04/25/2016 <QC#7244>
//    private boolean checkBllblFlg(SVC_CONTR_BLLGTMsg svcContrBllgTMsg, DS_CONTRTMsg dsContrTMsg, Map<String, Object> dsContrDtlInfo, String svcInvKey) {
//
//        if (!hasValue(svcContrBllgTMsg.svcCrRebilPk)) {
//            // DS_CONTR_STS_V
//            DS_CONTR_STS_VTMsg dsContrStsVTMsg = getDsContrStsVTMsg(dsContrTMsg.dsContrPk.getValue());
//            if (dsContrStsVTMsg == null || !ZYPConstant.FLG_ON_Y.equals(dsContrStsVTMsg.bllblFlg.getValue())) {
//                String status = "";
//                if (dsContrStsVTMsg != null) {
//                    status = dsContrStsVTMsg.dsContrCtrlStsNm.getValue();
//                }
//                Key key = new Key();
//                key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
//                key.add("DS_CONTR_PK", dsContrTMsg.dsContrPk.getValue());
//                addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0411W, status, key.toString());
//                return false;
//            }
//
//            // DS_CONTR_DTL_STS_V
//            DS_CONTR_DTL_STS_VTMsg dsContrDtlStsVTMsg = getDsContrDtlStsVTMsg(svcContrBllgTMsg.dsContrDtlPk.getValue());
//            if (dsContrDtlStsVTMsg == null || !ZYPConstant.FLG_ON_Y.equals(dsContrDtlStsVTMsg.bllblFlg.getValue())) {
//                String status = "";
//                if (dsContrDtlStsVTMsg != null) {
//                    status = dsContrDtlStsVTMsg.dsContrCtrlStsNm.getValue();
//                }
//                Key key = new Key();
//                key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
//                key.add("SER_NUM", (String) dsContrDtlInfo.get("SER_NUM"));
//                key.add("DS_CONTR_DTL_PK", (BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK"));
//                addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0411W, status, key.toString());
//                return false;
//            }
//
//            // DS_CONTR_PRC_EFF_STS_V
//            if (!DS_CONTR_CATG.FLEET.equals(dsContrTMsg.dsContrCatgCd.getValue()) || DS_CONTR_DTL_TP.FLEET.equals((String) dsContrDtlInfo.get("DS_CONTR_DTL_TP_CD"))) {
//                Map<String, String> dsContrPrcEffStsV = getDsContrPrcEffStsV(svcContrBllgTMsg.dsContrBllgSchdPk.getValue());
//                if (dsContrPrcEffStsV == null || !ZYPConstant.FLG_ON_Y.equals((String) dsContrPrcEffStsV.get("BLLBL_FLG"))) {
//                    String status = "";
//                    if (dsContrPrcEffStsV != null) {
//                        status = (String) dsContrPrcEffStsV.get("DS_CONTR_CTRL_STS_NM");
//                    }
//                    Key key = new Key();
//                    key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
//                    key.add("SER_NUM", (String) dsContrDtlInfo.get("SER_NUM"));
//                    key.add("DS_CONTR_BLLG_SCHD_PK", svcContrBllgTMsg.dsContrBllgSchdPk.getValue());
//                    addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0411W, status, key.toString());
//                    return false;
//                }
//            }
//
//            // Usage Charge
//            if (ZYPConstant.FLG_ON_Y.equals(svcContrBllgTMsg.usgChrgFlg.getValue())) {
//                // DS_CONTR_BLLG_MTR_STS_V
//                Map<String, String> dsContrBllgMtrStsV = getDsContrBllgMtrStsV(svcContrBllgTMsg.dsContrBllgMtrPk.getValue(), svcContrBllgTMsg.dsContrDtlPk.getValue());
//                if (dsContrBllgMtrStsV == null || !ZYPConstant.FLG_ON_Y.equals((String) dsContrBllgMtrStsV.get("BLLBL_FLG"))) {
//                    String status = "";
//                    if (dsContrBllgMtrStsV != null) {
//                        status = (String) dsContrBllgMtrStsV.get("DS_CONTR_CTRL_STS_NM");
//                    }
//                    Key key = new Key();
//                    key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
//                    key.add("SER_NUM", (String) dsContrDtlInfo.get("SER_NUM"));
//                    key.add("DS_CONTR_DTL_PK", (BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK"));
//                    addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0411W, status, key.toString());
//                    return false;
//                }
//            }
//        }
//
//        return true;
//    }
//    // Mod End  04/25/2016 <QC#7244>

    // START 2017/09/14 K.Kim [QC#20040, MOD]
    // private boolean checkBllblFlg(BigDecimal dsContrPk, String svcInvKey, List<Map<String, Object>> contrDtlInfoList, String dsContrCatgCd) {
    private boolean checkBllblFlg(BigDecimal dsContrPk, String svcInvKey, List<Map<String, Object>> contrDtlInfoList, String dsContrCatgCd, String invTpCd) {
    // START 2017/09/14 K.Kim [QC#20040, MOD]
        DS_CONTRTMsg dsContrTMsg = getDsContr(dsContrPk);
        if (dsContrTMsg == null) {
            Key key = new Key();
            key.add("DS_CONTR_PK", dsContrPk);
            // START 2016/12/13 N.Arai [QC#16400, MOD]
            // addMessage(dsContrCatgCd, svcInvKey, 1, NSZM0396E, "DS_CONTR", key.toString());
            addMessage(dsContrCatgCd, svcInvKey, 1, NSZM1079E, key.toString());
            // END 2016/12/13 N.Arai [QC#16400, MOD]
            return false;
        }

        // DS_CONTR_STS_V
        DS_CONTR_STS_VTMsg dsContrStsVTMsg = getDsContrStsVTMsg(dsContrTMsg.dsContrPk.getValue());
          if (dsContrStsVTMsg == null || !ZYPConstant.FLG_ON_Y.equals(dsContrStsVTMsg.bllblFlg.getValue())) {
            String status = "";
            if (dsContrStsVTMsg != null) {
                status = dsContrStsVTMsg.dsContrCtrlStsNm.getValue();
            }
            Key key = new Key();
            key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
            key.add("DS_CONTR_PK", dsContrTMsg.dsContrPk.getValue());
// START 2016/12/13 N.Arai [QC#16400, MOD]
            // addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0411W, status, key.toString());
            addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0617W, status, key.toString());
// END 2016/12/13 N.Arai [QC#16400, MOD]
            return false;
        }

        for (Map<String, Object> dsContrDtlInfo : contrDtlInfoList) {
            // DS_CONTR_DTL_STS_V
            DS_CONTR_DTL_STS_VTMsg dsContrDtlStsVTMsg = getDsContrDtlStsVTMsg((BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK"));
            // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
            // if (dsContrDtlStsVTMsg == null || !ZYPConstant.FLG_ON_Y.equals(dsContrDtlStsVTMsg.bllblFlg.getValue())) {
            if (dsContrDtlStsVTMsg == null || !checkStatusAndBllblFlg(dsContrDtlStsVTMsg.dsContrCtrlStsCd.getValue(), dsContrDtlStsVTMsg.bllblFlg.getValue())) {
            // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                String status = "";
                if (dsContrDtlStsVTMsg != null) {
                    status = dsContrDtlStsVTMsg.dsContrCtrlStsNm.getValue();
                }
                Key key = new Key();
                key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
                key.add("SER_NUM", (String) dsContrDtlInfo.get("SER_NUM"));
                key.add("DS_CONTR_DTL_PK", (BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK"));
// START 2016/12/13 N.Arai [QC#16400, MOD]
                // addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0411W, status, key.toString());
                addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0618W, status, key.toString());
// END 2016/12/13 N.Arai [QC#16400, MOD]
                return false;
            }

            // DS_CONTR_PRC_EFF_STS_V
            // START 2017/09/14 K.Kim [QC#20040, MOD]
            // if (!hasValue((BigDecimal) dsContrDtlInfo.get("SVC_CR_REBIL_PK"))) {
            if (!hasValue((BigDecimal) dsContrDtlInfo.get("SVC_CR_REBIL_PK")) && INV_TP.INVOICE.equals(invTpCd)) {
            // END 2017/09/14 K.Kim [QC#20040, MOD]
                if (!DS_CONTR_CATG.FLEET.equals(dsContrTMsg.dsContrCatgCd.getValue()) || DS_CONTR_DTL_TP.FLEET.equals((String) dsContrDtlInfo.get("DS_CONTR_DTL_TP_CD"))) {
                    DS_CONTR_PRC_EFF_STS_VTMsg dsContrPrcEffStsVTMsg = getDsContrPrcEffStsV((BigDecimal) dsContrDtlInfo.get("DS_CONTR_PRC_EFF_PK"));
                    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    // if (dsContrPrcEffStsVTMsg == null || !ZYPConstant.FLG_ON_Y.equals(dsContrPrcEffStsVTMsg.bllblFlg.getValue())) {
                    if (dsContrPrcEffStsVTMsg == null || !checkStatusAndBllblFlg(dsContrPrcEffStsVTMsg.dsContrCtrlStsCd.getValue(), dsContrPrcEffStsVTMsg.bllblFlg.getValue())) {
                    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                        String status = "";
                        if (dsContrPrcEffStsVTMsg != null) {
                            status = dsContrPrcEffStsVTMsg.dsContrCtrlStsNm.getValue();
                        }
                        Key key = new Key();
                        key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
                        key.add("SER_NUM", (String) dsContrDtlInfo.get("SER_NUM"));
// START 2016/12/13 N.Arai [QC#16400, MOD]
                        // key.add("DS_CONTR_BLLG_SCHD_PK", (BigDecimal) dsContrDtlInfo.get("DS_CONTR_PRC_EFF_PK"));
                        // addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0411W, status, key.toString());
                        key.add("DS_CONTR_PRC_EFF_PK", (BigDecimal) dsContrDtlInfo.get("DS_CONTR_PRC_EFF_PK"));
                        addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0619W, status, key.toString());
// END 2016/12/13 N.Arai [QC#16400, MOD]
                        return false;
                    }
                }
            }

            // Usage Charge
            if (ZYPConstant.FLG_ON_Y.equals((String) dsContrDtlInfo.get("USG_CHRG_FLG"))) {
                // DS_CONTR_BLLG_MTR_STS_V
                Map<String, String> dsContrBllgMtrStsV = getDsContrBllgMtrStsV((BigDecimal) dsContrDtlInfo.get("DS_CONTR_BLLG_MTR_PK"), (BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK"));
                // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                // if (dsContrBllgMtrStsV == null || !ZYPConstant.FLG_ON_Y.equals((String) dsContrBllgMtrStsV.get("BLLBL_FLG"))) {
                if (dsContrBllgMtrStsV == null || !checkStatusAndBllblFlg((String) dsContrBllgMtrStsV.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrBllgMtrStsV.get("BLLBL_FLG"))) {
                // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    String status = "";
                    if (dsContrBllgMtrStsV != null) {
                        status = (String) dsContrBllgMtrStsV.get("DS_CONTR_CTRL_STS_NM");
                    }
                    Key key = new Key();
                    key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
                    key.add("SER_NUM", (String) dsContrDtlInfo.get("SER_NUM"));
                    key.add("DS_CONTR_DTL_PK", (BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK"));
// START 2016/12/13 N.Arai [QC#16400, MOD]
                    // addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0411W, status, key.toString());
                    addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0620W, status, key.toString());
// END 2016/12/13 N.Arai [QC#16400, MOD]
                    return false;
                }
            }
        }

        return true;
    }
    // END 2016/10/18 T.Kanasaka [QC#13009, MOD]

    // START 2017/09/01 M.Kidokoro [QC#20079, ADD]
    // START 2017/09/14 K.Kim [QC#20040, MOD]
    // private boolean checkBllblFlgForRegular(BigDecimal dsContrPk, String svcInvKey, List<Map<String, Object>> contrDtlInfoList, String dsContrCatgCd) {
    // START 2022/02/09 S.Kitamura [QC#59683, MOD]
    //private boolean checkBllblFlgForRegular(BigDecimal dsContrPk, String svcInvKey, List<Map<String, Object>> contrDtlInfoList, String dsContrCatgCd, String invTpCd) {
    private boolean checkBllblFlgForRegular(BigDecimal dsContrPk, String svcInvKey, List<Map<String, Object>> contrDtlInfoList, String dsContrCatgCd, String invTpCd, String allLineTogetherFlg) {
    // END 2022/02/09 S.Kitamura [QC#59683, MOD]
    // END 2017/09/14 K.Kim [QC#20040, MOD]
        DS_CONTRTMsg dsContrTMsg = getDsContr(dsContrPk);
        if (dsContrTMsg == null) {
            Key key = new Key();
            key.add("DS_CONTR_PK", dsContrPk);
            addMessage(dsContrCatgCd, svcInvKey, 1, NSZM1079E, key.toString());
            return false;
        }

        // START 2022/02/09 S.Kitamura [QC#59683, MOD]
        // START 2019/07/16 T.Kanasaka [QC#51576, ADD]
        // header status check. Should check in case of together.
        // if (!ZYPConstant.FLG_ON_Y.equals(dsContrTMsg.invSeptBaseUsgFlg.getValue())) {
         if (ZYPConstant.FLG_ON_Y.equals(allLineTogetherFlg)) {
        // END 2022/02/09 S.Kitamura [QC#59683, MOD]
            // DS_CONTR_STS_V
            DS_CONTR_STS_VTMsg dsContrStsVTMsg = getDsContrStsVTMsg(dsContrPk);
            if (dsContrStsVTMsg == null || !ZYPConstant.FLG_ON_Y.equals(dsContrStsVTMsg.bllblFlg.getValue())) {
                String status = "";
                if (dsContrStsVTMsg != null) {
                    status = dsContrStsVTMsg.dsContrCtrlStsNm.getValue();
                }
                Key key = new Key();
                key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
                key.add("DS_CONTR_PK", dsContrTMsg.dsContrPk.getValue());
                addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0617W, status, key.toString());
                return false;
            }
        }
        // END 2019/07/16 T.Kanasaka [QC#51576, ADD]

         int ngCntForDsContrDtlSts = 0;
        // START 2018/04/25 K.Kojima [QC#25446,ADD]
        List<Map<String, Object>> targetContrDtlInfoList = new ArrayList<Map<String, Object>>();
        // END 2018/04/25 K.Kojima [QC#25446,ADD]
        for (Map<String, Object> dsContrDtlInfo : contrDtlInfoList) {
            // DS_CONTR_DTL_STS_V
            DS_CONTR_DTL_STS_VTMsg dsContrDtlStsVTMsg = getDsContrDtlStsVTMsg((BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK"));
            // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
            // if (dsContrDtlStsVTMsg == null || !ZYPConstant.FLG_ON_Y.equals(dsContrDtlStsVTMsg.bllblFlg.getValue())) {
            if (dsContrDtlStsVTMsg == null || !checkStatusAndBllblFlg(dsContrDtlStsVTMsg.dsContrCtrlStsCd.getValue(), dsContrDtlStsVTMsg.bllblFlg.getValue())) {
            // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                String status = "";
                if (dsContrDtlStsVTMsg != null) {
                    status = dsContrDtlStsVTMsg.dsContrCtrlStsNm.getValue();
                }
                Key key = new Key();
                key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
                key.add("SER_NUM", (String) dsContrDtlInfo.get("SER_NUM"));
                key.add("DS_CONTR_DTL_PK", (BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK"));
                addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0618W, status, key.toString());
                ngCntForDsContrDtlSts++;
                // START 2018/04/25 K.Kojima [QC#25446,ADD]
            } else {
                targetContrDtlInfoList.add(dsContrDtlInfo);
                // END 2018/04/25 K.Kojima [QC#25446,ADD]
            }
        }
        if (ngCntForDsContrDtlSts == contrDtlInfoList.size()) {
            return false;
        }
        // START 2018/04/25 K.Kojima [QC#25446,ADD]
        // START 2019/07/18 T.Kanasaka [QC#51576, MOD]
        // START 2022/02/09 S.Kitamura [QC#59683, MOD]
        // In case of Not Together.
        // if (ZYPConstant.FLG_ON_Y.equals(dsContrTMsg.invSeptBaseUsgFlg.getValue())) {
        if (ZYPConstant.FLG_OFF_N.equals(allLineTogetherFlg)) {
        // END 2022/02/09 S.Kitamura [QC#59683, MOD]
            contrDtlInfoList.clear();
            contrDtlInfoList.addAll(targetContrDtlInfoList);
        }
        // END 2019/07/18 T.Kanasaka [QC#51576, MOD]
        // END 2018/04/25 K.Kojima [QC#25446,ADD]

        int ngCntForDsContrPrvEffSts = 0;
        for (Map<String, Object> dsContrDtlInfo : contrDtlInfoList) {
            // DS_CONTR_PRC_EFF_STS_V
            // START 2017/09/14 K.Kim [QC#20040, MOD]
            // if (!hasValue((BigDecimal) dsContrDtlInfo.get("SVC_CR_REBIL_PK"))) {
            if (!hasValue((BigDecimal) dsContrDtlInfo.get("SVC_CR_REBIL_PK")) && INV_TP.INVOICE.equals(invTpCd)) {
            // END 2017/09/14 K.Kim [QC#20040, MOD]
                DS_CONTR_PRC_EFF_STS_VTMsg dsContrPrcEffStsVTMsg = getDsContrPrcEffStsV((BigDecimal) dsContrDtlInfo.get("DS_CONTR_PRC_EFF_PK"));
                // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                // if (dsContrPrcEffStsVTMsg == null || !ZYPConstant.FLG_ON_Y.equals(dsContrPrcEffStsVTMsg.bllblFlg.getValue())) {
                if (dsContrPrcEffStsVTMsg == null || !checkStatusAndBllblFlg(dsContrPrcEffStsVTMsg.dsContrCtrlStsCd.getValue(), dsContrPrcEffStsVTMsg.bllblFlg.getValue())) {
                // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    String status = "";
                    if (dsContrPrcEffStsVTMsg != null) {
                        status = dsContrPrcEffStsVTMsg.dsContrCtrlStsNm.getValue();
                    }
                    Key key = new Key();
                    key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
                    key.add("SER_NUM", (String) dsContrDtlInfo.get("SER_NUM"));
                    key.add("DS_CONTR_PRC_EFF_PK", (BigDecimal) dsContrDtlInfo.get("DS_CONTR_PRC_EFF_PK"));
                    addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0619W, status, key.toString());
                    ngCntForDsContrPrvEffSts++;
                }
            }
        }
        if (ngCntForDsContrPrvEffSts == contrDtlInfoList.size()) {
            return false;
        }

        int ngCntForDsContrBllgMtrSts = 0;
        for (Map<String, Object> dsContrDtlInfo : contrDtlInfoList) {
            // Usage Charge
            if (ZYPConstant.FLG_ON_Y.equals((String) dsContrDtlInfo.get("USG_CHRG_FLG"))) {
                // DS_CONTR_BLLG_MTR_STS_V
                Map<String, String> dsContrBllgMtrStsV = getDsContrBllgMtrStsV((BigDecimal) dsContrDtlInfo.get("DS_CONTR_BLLG_MTR_PK"), (BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK"));
                // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                // if (dsContrBllgMtrStsV == null || !ZYPConstant.FLG_ON_Y.equals((String) dsContrBllgMtrStsV.get("BLLBL_FLG"))) {
                if (dsContrBllgMtrStsV == null || !checkStatusAndBllblFlg((String) dsContrBllgMtrStsV.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrBllgMtrStsV.get("BLLBL_FLG"))) {
                // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                    String status = "";
                    if (dsContrBllgMtrStsV != null) {
                        status = (String) dsContrBllgMtrStsV.get("DS_CONTR_CTRL_STS_NM");
                    }
                    Key key = new Key();
                    key.add("DS_CONTR_NUM", dsContrTMsg.dsContrNum.getValue());
                    key.add("SER_NUM", (String) dsContrDtlInfo.get("SER_NUM"));
                    key.add("DS_CONTR_DTL_PK", (BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK"));
                    addMessage(dsContrTMsg.dsContrCatgCd.getValue(), svcInvKey, 2, NSAM0620W, status, key.toString());
                    ngCntForDsContrBllgMtrSts++;
                }
            }
        }
        if (ngCntForDsContrBllgMtrSts == contrDtlInfoList.size()) {
            return false;
        }

        return true;
    }
    // END 2017/09/01 M.Kidokoro [QC#20079, ADD]

    // START 2018/08/24 K.Kojima [QC#27922,ADD]
    // START 2019/10/09 [QC#54058,MOD]
    // private boolean existBaseUsgChrg(Map<String, Object> curDsContrDtlInfo, List<Map<String, Object>> dsContrDtlInfoList, String baseChrgFlg) {
    //     return existBaseUsgChrg(curDsContrDtlInfo, dsContrDtlInfoList, baseChrgFlg, false);
    // }
    private boolean existBaseUsgChrg(Map<String, Object> curDsContrDtlInfo, List<Map<String, Object>> dsContrDtlInfoList, String baseChrgFlg, String invTpCd) {
        return existBaseUsgChrg(curDsContrDtlInfo, dsContrDtlInfoList, baseChrgFlg, false, invTpCd);
    }
    // END 2019/10/09 [QC#54058,MOD]
    // END 2018/08/24 K.Kojima [QC#27922,ADD]

    //Mod Start 07/08/2016 <QC#8293>
    // START 2018/08/24 K.Kojima [QC#27922,MOD]
    // private boolean existBaseUsgChrg(Map<String, Object> curDsContrDtlInfo, List<Map<String, Object>> dsContrDtlInfoList, String baseChrgFlg) {
    // START 2019/10/09 [QC#54058,MOD]
    // private boolean existBaseUsgChrg(Map<String, Object> curDsContrDtlInfo, List<Map<String, Object>> dsContrDtlInfoList, String baseChrgFlg, boolean aggFlg) {
    private boolean existBaseUsgChrg(Map<String, Object> curDsContrDtlInfo, List<Map<String, Object>> dsContrDtlInfoList, String baseChrgFlg, boolean aggFlg, String invTpCd) {
    // END 2019/10/09 [QC#54058,MOD]
    // END 2018/08/24 K.Kojima [QC#27922,MOD]

        String dsContrDtlTpCd = (String) curDsContrDtlInfo.get("DS_CONTR_DTL_TP_CD");
        if (DS_CONTR_DTL_TP.ACCESSORIES.equals(dsContrDtlTpCd) || DS_CONTR_DTL_TP.BASE_ONLY.equals(dsContrDtlTpCd)) {
            return true;
        }

        BigDecimal curPk = (BigDecimal) curDsContrDtlInfo.get("DS_CONTR_DTL_PK");
        // Add Start 12/16/2016 <QC#16646>
        String curBillToCustCd = (String) curDsContrDtlInfo.get("BILL_TO_CUST_CD");
        if (!hasSameBillToCust(curPk, curBillToCustCd)) {
            return true;
        }
        // Add End   12/16/2016 <QC#16646>
        String curNextBllgDt = getNextBllgDt(curDsContrDtlInfo, baseChrgFlg);

        for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {

            BigDecimal comparePk = (BigDecimal) dsContrDtlInfo.get("DS_CONTR_DTL_PK");
            if (curPk.compareTo(comparePk) == 0) {
                String compareBaseChrgFlg = (String) dsContrDtlInfo.get("BASE_BLLG_FLG");
                String compareNextBllgDt = getNextBllgDt(dsContrDtlInfo, compareBaseChrgFlg);
                if (!baseChrgFlg.equals(compareBaseChrgFlg) && curNextBllgDt.equals(compareNextBllgDt)) {
                    return true;
                }
            }
        }

        String searchBaseChrgFlg = FLG_ON_Y;
        if (FLG_ON_Y.equals(baseChrgFlg)) {
            searchBaseChrgFlg = FLG_OFF_N;
        }
        //Mod Start 11/08/2017 <QC#21286>
        // START 2018/08/24 K.Kojima [QC#27922,MOD]
        // BigDecimal dsContrBllgSchdPk = getDsContrBllgSchdPk(curPk, curNextBllgDt, searchBaseChrgFlg, (BigDecimal) curDsContrDtlInfo.get("SVC_CR_REBIL_DTL_PK"));
        // START 2019/10/09 [QC#54058,MOD]
        // BigDecimal dsContrBllgSchdPk = getDsContrBllgSchdPk(curPk, curNextBllgDt, searchBaseChrgFlg, (BigDecimal) curDsContrDtlInfo.get("SVC_CR_REBIL_DTL_PK"), aggFlg);
        BigDecimal dsContrBllgSchdPk = getDsContrBllgSchdPk(curPk, curNextBllgDt, searchBaseChrgFlg, (BigDecimal) curDsContrDtlInfo.get("SVC_CR_REBIL_DTL_PK"), aggFlg, invTpCd);
        // END 2019/10/09 [QC#54058,MOD]
        // END 2018/08/24 K.Kojima [QC#27922,MOD]
        //Mod End   11/08/2017 <QC#21286>
        if (dsContrBllgSchdPk == null) {
            return true;
        }

        return false;
    }
    //Mod End   07/08/2016 <QC#8293>

    // Add Start 12/16/2016 <QC#16646>
    private boolean hasSameBillToCust(BigDecimal dsContrDtlPk, String billToCustCd) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("dsContrDtlPk", dsContrDtlPk);
        param.put("billToCustCd", billToCustCd);
        BigDecimal rslt = (BigDecimal) ssmBatClnt.queryObject("hasSameBillToCust", param);
        if (!hasValue(rslt) || BigDecimal.ZERO.compareTo(rslt) == 0) {
            return false;
        }
        return true;
    }
    // Add End  12/16/2016 <QC#16646>

    //Add Start 07/08/2016 <QC#8293>
    private String getNextBllgDt(Map<String, Object> dsContrDtlInfo, String baseChrgFlg) {
        String curNextBllgDt = null;
        if (hasValue((String) dsContrDtlInfo.get("OVRD_NEXT_BLLG_DT"))) {
            curNextBllgDt = (String) dsContrDtlInfo.get("OVRD_NEXT_BLLG_DT");
        } else if (FLG_ON_Y.equals(baseChrgFlg)) {
            curNextBllgDt = (String) dsContrDtlInfo.get("BASE_BLLG_NEXT_BLLG_DT");
        } else {
            curNextBllgDt = (String) dsContrDtlInfo.get("MTR_BLLG_NEXT_BLLG_DT");
        }
        return curNextBllgDt;
    }

    //Mod Start 11/08/2017 <QC#21286>
    // START 2018/08/24 K.Kojima [QC#27922,MOD]
    // private BigDecimal getDsContrBllgSchdPk(BigDecimal dsContrDtlPk, String nextBllgDt, String baseChrgFlg, BigDecimal svcCrRebilDtlPk) {
    // START 2019/10/09 [QC#54058,MOD]
    // private BigDecimal getDsContrBllgSchdPk(BigDecimal dsContrDtlPk, String nextBllgDt, String baseChrgFlg, BigDecimal svcCrRebilDtlPk, boolean aggFlg) {
    private BigDecimal getDsContrBllgSchdPk(BigDecimal dsContrDtlPk, String nextBllgDt, String baseChrgFlg, BigDecimal svcCrRebilDtlPk, boolean aggFlg, String invTpCd) {
    // END 2019/10/09 [QC#54058,MOD]
    // END 2018/08/24 K.Kojima [QC#27922,MOD]
        Map<String, Object> prm = new HashMap<String, Object>();
        prm.put("glblCmpyCd", glblCmpyCd);
        prm.put("dsContrDtlPk", dsContrDtlPk);
        prm.put("nextBllgDt", nextBllgDt);
        prm.put("baseChrgFlg", baseChrgFlg);
        prm.put("svcCrRebilDtlPk", svcCrRebilDtlPk);
        // START 2018/08/24 K.Kojima [QC#27922,ADD]
        prm.put("aggFlg", aggFlg);
        // END 2018/08/24 K.Kojima [QC#27922,ADD]
        // START 2019/10/09 [QC#54058,ADD]
        prm.put("invTpCd", invTpCd);
        // END 2019/10/09 [QC#54058,ADD]
        return (BigDecimal) ssmBatClnt.queryObject("getDsContrBllgSchdPk", prm);
    }
    //Mod End   11/08/2017 <QC#21286>
    //Add End   07/08/2016 <QC#8293>

    private boolean existUsgCharge(List<Map<String, Object>> dsContrDtlInfoList) {

        for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
            if (ZYPConstant.FLG_ON_Y.equals((String) dsContrDtlInfo.get("MTR_BLLG_FLG"))) {
                return true;
            }
        }
        return false;
    }

    // START 2018/05/31 K.Kojima [QC#23685,DEL]
    // private BigDecimal getTaxFuncAmt(NWZC036101PMsg taxApiPMsg) {
    //     BigDecimal taxFuncAmt = BigDecimal.ZERO;
    //     if (taxApiPMsg.taxCalculateOutputLine.getValidCount() > 0) {
    // 
    //         NWZC036101_taxCalculateOutputLinePMsg linePMsg = taxApiPMsg.taxCalculateOutputLine.no(0);
    //         // START 2016/03/15 T.Aoyagi [QC#5492, MOD]
    //         taxFuncAmt = taxFuncAmt.add(nullToZero(linePMsg.taxAmt_01.getValue()));
    //         taxFuncAmt = taxFuncAmt.add(nullToZero(linePMsg.taxAmt_02.getValue()));
    //         taxFuncAmt = taxFuncAmt.add(nullToZero(linePMsg.taxAmt_03.getValue()));
    //         // END 2016/03/15 T.Aoyagi [QC#5492, MOD]
    //     }
    //     return taxFuncAmt;
    // }
    // END 2018/05/31 K.Kojima [QC#23685,DEL]

    // START 2018/05/31 K.Kojima [QC#23685,DEL]
    // private BigDecimal getTaxRate(NWZC036101PMsg taxApiPMsg) {
    //     BigDecimal taxRate = BigDecimal.ZERO;
    //     if (taxApiPMsg.taxCalculateOutputLine.getValidCount() > 0) {
    // 
    //         NWZC036101_taxCalculateOutputLinePMsg linePMsg = taxApiPMsg.taxCalculateOutputLine.no(0);
    //         // START 2016/03/15 T.Aoyagi [QC#5492, MOD]
    //         taxRate = nullToZero(linePMsg.xxTaxCalcLineTaxPct.getValue());
    //         // END 2016/03/15 T.Aoyagi [QC#5492, MOD]
    //     }
    //     return taxRate;
    // }
    // END 2018/05/31 K.Kojima [QC#23685,DEL]

    // START 2018/05/31 K.Kojima [QC#23685,DEL]
    // // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
    // // private NWZC036101PMsg callTaxCalcAPIForBase(Map<String, Object> dsContrDtlInfo, SVC_CONTR_BLLGTMsg svcContrBllgTMsg, BigDecimal funcAmt) {
    // // START 2017/09/27 K.Yamada [QC#21233, MOD]
    // // private NWZC036101PMsg callTaxCalcAPIForBase(Map<String, Object> dsContrDtlInfo, SVC_CONTR_BLLGTMsg svcContrBllgTMsg, BigDecimal funcAmt, String svcInvNum) {
    // private NWZC036101PMsg callTaxCalcAPIForBase(Map<String, Object> dsContrDtlInfo, SVC_CONTR_BLLGTMsg svcContrBllgTMsg, BigDecimal funcAmt, String svcInvNum, String invDt) {
    // // END 2017/09/27 K.Yamada [QC#21233, MOD]
    // // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
    // 
    //     CallTaxCalcAPIForBaseBean inBean = new CallTaxCalcAPIForBaseBean();
    // 
    //     inBean.setGlblCmpyCd(glblCmpyCd);
    //     inBean.setSlsDt(slsDt);
    //     // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
    //     // inBean.setXxProcMd(PROC_MODE_INVOICE);
    //     inBean.setXxProcMd(NWZC036101Constant.PROC_MODE_INVOICE);
    //     // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
    //     inBean.setInvTp(svcContrBllgTMsg.invTpCd.getValue());
    //     inBean.setDsAcctNum((String) dsContrDtlInfo.get("DS_ACCT_NUM"));
    //     inBean.setBaseBillToCustCd((String) dsContrDtlInfo.get("BILL_TO_CUST_CD"));
    //     inBean.setDsContrDtlTpCd((String) dsContrDtlInfo.get("DS_CONTR_DTL_TP_CD"));
    //     inBean.setSvcMachMstrPk(svcContrBllgTMsg.svcMachMstrPk.getValue());
    //     inBean.setDsContrPk((BigDecimal) dsContrDtlInfo.get("DS_CONTR_PK"));
    //     // START 2017/09/27 K.Yamada [QC#21233, MOD]
    //     // inBean.setNextBllgDt(svcContrBllgTMsg.baseBllgNextBllgDt.getValue());
    //     inBean.setNextBllgDt(invDt);
    //     // END 2017/09/27 K.Yamada [QC#21233, MOD]
    //     inBean.setDsContrBllgSchdPk(svcContrBllgTMsg.dsContrBllgSchdPk.getValue());
    //     // START 2017/08/07 M.Kidokoro [QC#20073, ADD]
    //     inBean.setSvcInvNum(svcInvNum);
    //     // END 2017/08/07 M.Kidokoro [QC#20073, ADD]
    //     inBean.setSvcPgmMdseCd((String) dsContrDtlInfo.get("SVC_PGM_MDSE_CD"));
    //     inBean.setBaseFuncAmt(funcAmt);
    //     // START 2017/10/16 U.Kim [QC#21584, ADD]
    //     inBean.setOrigSvcInvNum(svcContrBllgTMsg.origSvcInvNum.getValue());
    //     // END 2017/10/16 U.Kim [QC#21584, ADD]
    //     // Add Start 12/26/2017 <QC#22407>
    //     inBean.setInvTp(svcContrBllgTMsg.invTpCd.getValue());
    //     // Add End   12/26/2017 <QC#22407>
    // 
    //     return NSXC003001CallTaxCalcAPIForBase.callTaxCalcApi(inBean, ONBATCH_TYPE.BATCH);
    // }
    // END 2018/05/31 K.Kojima [QC#23685,DEL]

    // START 2018/05/31 K.Kojima [QC#23685,DEL]
    // // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
    // // private NWZC036101PMsg callTaxCalcAPIForUsg(Map<String, Object> dsContrDtlInfo, SVC_CONTR_BLLGTMsg svcContrBllgTMsg, BigDecimal funcAmt) {
    // // START 2017/09/27 K.Yamada [QC#21233, MOD]
    // //  private NWZC036101PMsg callTaxCalcAPIForUsg(Map<String, Object> dsContrDtlInfo, SVC_CONTR_BLLGTMsg svcContrBllgTMsg, BigDecimal funcAmt, String svcInvNum) {
    // private NWZC036101PMsg callTaxCalcAPIForUsg(Map<String, Object> dsContrDtlInfo, SVC_CONTR_BLLGTMsg svcContrBllgTMsg, BigDecimal funcAmt, String svcInvNum, String invDt) {
    // // END 2017/09/27 K.Yamada [QC#21233, MOD]
    // // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
    // 
    //     CallTaxCalcAPIForUsageBean inBean = new CallTaxCalcAPIForUsageBean();
    // 
    //     inBean.setGlblCmpyCd(glblCmpyCd);
    //     inBean.setSlsDt(slsDt);
    //     // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
    //     // inBean.setXxProcMd(PROC_MODE_INVOICE);
    //     inBean.setXxProcMd(NWZC036101Constant.PROC_MODE_INVOICE);
    //     // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
    //     inBean.setInvTp(svcContrBllgTMsg.invTpCd.getValue());
    //     inBean.setDsAcctNum((String) dsContrDtlInfo.get("DS_ACCT_NUM"));
    //     inBean.setBaseBillToCustCd((String) dsContrDtlInfo.get("BILL_TO_CUST_CD"));
    //     inBean.setDsContrDtlTpCd((String) dsContrDtlInfo.get("DS_CONTR_DTL_TP_CD"));
    //     inBean.setSvcMachMstrPk(svcContrBllgTMsg.svcMachMstrPk.getValue());
    //     inBean.setDsContrPk((BigDecimal) dsContrDtlInfo.get("DS_CONTR_PK"));
    //     // START 2017/09/27 K.Yamada [QC#21233, MOD]
    //     // inBean.setNextBllgDt(svcContrBllgTMsg.mtrBllgNextBllgDt.getValue());
    //     inBean.setNextBllgDt(invDt);
    //     // END 2017/09/27 K.Yamada [QC#21233, MOD]
    //     inBean.setDsContrBllgSchdPk(svcContrBllgTMsg.dsContrBllgSchdPk.getValue());
    //     // START 2017/08/07 M.Kidokoro [QC#20073, ADD]
    //     inBean.setSvcInvNum(svcInvNum);
    //     // END 2017/08/07 M.Kidokoro [QC#20073, ADD]
    //     inBean.setSvcPgmMdseCd((String) dsContrDtlInfo.get("INTG_MDSE_CD"));
    //     // Add Start 03/25/2016 <QC#5879>
    //     inBean.setMdseCdForSvcAllocTp((String) dsContrDtlInfo.get("SVC_PGM_MDSE_CD"));
    //     // Add End   03/25/2016 <QC#5879>
    //     inBean.setBaseFuncAmt(funcAmt);
    //     // START 2017/10/16 U.Kim [QC#21584, ADD]
    //     inBean.setOrigSvcInvNum(svcContrBllgTMsg.origSvcInvNum.getValue());
    //     // END 2017/10/16 U.Kim [QC#21584, ADD]
    // 
    //     // Add Start 12/26/2017 <QC#22407>
    //     inBean.setInvTp(svcContrBllgTMsg.invTpCd.getValue());
    //     // Add End   12/26/2017 <QC#22407>
    //     return NSXC003001CallTaxCalcAPIForUsage.callTaxCalcApi(inBean, ONBATCH_TYPE.BATCH);
    // }
    // END 2018/05/31 K.Kojima [QC#23685,DEL]

    // START 2018/05/31 K.Kojima [QC#23685,DEL]
    // // Mod Start 04/04/2016 <QC#6492>
    // // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
    // //  private NWZC036101PMsg callTaxCalcAPIForAddl(Map<String, Object> dsContrDtlInfo, SVC_CONTR_BLLGTMsg svcContrBllgTMsg, SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg, BigDecimal funcAmt) {
    // // START 2017/09/27 K.Yamada [QC#21233, MOD]
    // //  private NWZC036101PMsg callTaxCalcAPIForAddl(Map<String, Object> dsContrDtlInfo, SVC_CONTR_BLLGTMsg svcContrBllgTMsg, SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg, BigDecimal funcAmt, String svcInvNum) {
    // private NWZC036101PMsg callTaxCalcAPIForAddl(Map<String, Object> dsContrDtlInfo, SVC_CONTR_BLLGTMsg svcContrBllgTMsg, SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg, BigDecimal funcAmt, String svcInvNum, String invDt) {
    // // END 2017/09/27 K.Yamada [QC#21233, MOD]
    // // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
    // 
    //     CallTaxCalcAPIForAddlBean inBean = new CallTaxCalcAPIForAddlBean();
    // 
    //     inBean.setGlblCmpyCd(glblCmpyCd);
    //     inBean.setSlsDt(slsDt);
    //     // START 2017/08/07 M.Kidokoro [QC#20073, MOD]
    //     // inBean.setXxProcMd(PROC_MODE_INVOICE);
    //     inBean.setXxProcMd(NWZC036101Constant.PROC_MODE_INVOICE);
    //     // END 2017/08/07 M.Kidokoro [QC#20073, MOD]
    //     inBean.setInvTp(svcContrBllgTMsg.invTpCd.getValue());
    //     inBean.setDsAcctNum((String) dsContrDtlInfo.get("DS_ACCT_NUM"));
    //     inBean.setBaseBillToCustCd((String) dsContrDtlInfo.get("BILL_TO_CUST_CD"));
    //     inBean.setDsContrDtlTpCd((String) dsContrDtlInfo.get("DS_CONTR_DTL_TP_CD"));
    //     inBean.setSvcMachMstrPk(svcContrBllgTMsg.svcMachMstrPk.getValue());
    //     inBean.setDsContrPk((BigDecimal) dsContrDtlInfo.get("DS_CONTR_PK"));
    //     // START 2017/09/27 K.Yamada [QC#21233, MOD]
    //     // inBean.setNextBllgDt(svcContrBllgTMsg.addlChrgBllgNextBllgDt.getValue());
    //     inBean.setNextBllgDt(invDt);
    //     // END 2017/09/27 K.Yamada [QC#21233, MOD]
    //     // Mod Start 2017/09/27 QC#21277
    //     // inBean.setDsContrBllgSchdPk(svcContrBllgTMsg.dsContrBllgSchdPk.getValue());
    //     inBean.setDsContrBllgSchdPk(getPrntDsContrBllgSchdPk(svcContrBllgTMsg));
    //     // Mod End 2017/09/27 QC#21277
    //     // START 2017/08/07 M.Kidokoro [QC#20073, ADD]
    //     inBean.setSvcInvNum(svcInvNum);
    //     // END 2017/08/07 M.Kidokoro [QC#20073, ADD]
    //     inBean.setSvcPgmMdseCd(svcContrAddlChrgBllgTMsg.intgMdseCd.getValue());
    //     // Add Start 03/25/2016 <QC#5879>
    //     // mod start 2016/09/27 CSA Defect#10787
    //     // if (!hasValue(svcContrAddlChrgBllgTMsg.svcContrBaseBllgPk)) {
    //     //     inBean.setMdseCdForSvcAllocTp((String) dsContrDtlInfo.get("SVC_PGM_MDSE_CD"));
    //     // } else {
    //     //     inBean.setMdseCdForSvcAllocTp(null);
    //     // }
    //     inBean.setMdseCdForSvcAllocTp(svcContrAddlChrgBllgTMsg.intgMdseCd.getValue());
    //     // mod end 2016/09/27 CSA Defect#10787
    //     // Add End   03/25/2016 <QC#5879>
    //     inBean.setBaseFuncAmt(funcAmt);
    //     // START 2017/10/16 U.Kim [QC#21584, ADD]
    //     inBean.setOrigSvcInvNum(svcContrBllgTMsg.origSvcInvNum.getValue());
    //     // END 2017/10/16 U.Kim [QC#21584, ADD]
    // 
    //     // Add Start 12/26/2017 <QC#22407>
    //     inBean.setInvTp(svcContrBllgTMsg.invTpCd.getValue());
    //     // Add End   12/26/2017 <QC#22407>
    //     return NSXC003001CallTaxCalcAPIForAddl.callTaxCalcApi(inBean, ONBATCH_TYPE.BATCH);
    // }
    // // Mod End 04/04/2016 <QC#6492>
    // END 2018/05/31 K.Kojima [QC#23685,DEL]

    //Mod Start 05/25/2016 <QC#7636>
    // START 2017/11/17 K.Kojima [QC#21918,MOD]
    // private SVC_INV_LINETMsg createSvcInvLineForAddl(String svcInvNum, String svcInvLineNum, BigDecimal prntSvcInvLinePk, Map<String, Object> dsContrDtlInfo, SVC_CONTR_BLLGTMsg svcContrBllgTMsg, SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg, NWZC036101PMsg taxApiPMsg, BigDecimal taxDealAmt, BigDecimal taxFuncAmt, String custCd) {
    // START 2018/05/31 K.Kojima [QC#23685,MOD]
    // private SVC_INV_LINETMsg createSvcInvLineForAddl(String svcInvNum, String svcInvLineNum, BigDecimal prntSvcInvLinePk, Map<String, Object> dsContrDtlInfo, SVC_CONTR_BLLGTMsg svcContrBllgTMsg, SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg, NWZC036101PMsg taxApiPMsg, BigDecimal taxDealAmt, BigDecimal taxFuncAmt, String custCd, DS_CONTRTMsg dsContrTMsg) {
    private SVC_INV_LINETMsg createSvcInvLineForAddl(String svcInvNum, String svcInvLineNum, BigDecimal prntSvcInvLinePk, Map<String, Object> dsContrDtlInfo, SVC_CONTR_BLLGTMsg svcContrBllgTMsg, SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg, BigDecimal taxDealAmt, BigDecimal taxFuncAmt, String custCd, DS_CONTRTMsg dsContrTMsg) {
    // END 2018/05/31 K.Kojima [QC#23685,MOD]
    // END 2017/11/17 K.Kojima [QC#21918,MOD]
    //Mod End   05/25/2016 <QC#7636>

        BigDecimal svcInvLinePk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_SQ");

        String taxCalcGeoCd = "";
        BigDecimal slsTaxRate = BigDecimal.ZERO;
        // Mod Start 08/31/2016 <QC#13529>
//        if (taxApiPMsg.taxCalculateOutputLine.getValidCount() > 0) {
        // START 2018/05/31 K.Kojima [QC#23685,DEL]
        // if (taxApiPMsg != null && taxApiPMsg.taxCalculateOutputLine.getValidCount() > 0) {
        // // Mod End   08/31/2016 <QC#13529>
        //     taxCalcGeoCd = taxApiPMsg.taxCalculateOutputLine.no(0).taxAreaId.getValue();
        //     slsTaxRate = getTaxRate(taxApiPMsg);
        // }
        // END 2018/05/31 K.Kojima [QC#23685,DEL]

        SVC_INV_LINETMsg svcInvLineTMsg = new SVC_INV_LINETMsg();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLinePk, svcInvLinePk);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvNum, svcInvNum);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLineNum, svcInvLineNum);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvChrgTpCd, SVC_INV_CHRG_TP.ADDITIONAL_CHARGE);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdseCd, svcContrAddlChrgBllgTMsg.intgMdseCd);
        MDSETMsg mdseTMsg = getMdse(svcContrAddlChrgBllgTMsg.intgMdseCd.getValue());
        if (mdseTMsg != null) {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdseNm, mdseTMsg.mdseNm);
        }
        svcInvLineTMsg.trxCd.clear();
        svcInvLineTMsg.trxRsnCd.clear();
        // START 2017/11/17 K.Kojima [QC#21918,MOD]
        // ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.slsRepTocCd, (String) dsContrDtlInfo.get("TOC_CD"));
        if (ZYPCommonFunc.hasValue(dsContrTMsg.dsContrCatgCd) && DS_CONTR_CATG.FLEET.equals(dsContrTMsg.dsContrCatgCd.getValue())) {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.slsRepTocCd, (String) dsContrDtlInfo.get("TOC_CD"));
        } else {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.slsRepTocCd, getSalesRepForAddl(svcContrAddlChrgBllgTMsg.svcContrAddlChrgBllgPk.getValue()));
        }
        // END 2017/11/17 K.Kojima [QC#21918,MOD]
        // START 2019/03/11 [QC#30675, ADD]
        if (!hasValue(svcInvLineTMsg.slsRepTocCd)) {
            return null;
        }
        // END 2019/03/11 [QC#30675, ADD]
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvQty, BigDecimal.ONE);
        svcInvLineTMsg.svcInvUnitHrsAot.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dealUnitPrcAmt, svcContrAddlChrgBllgTMsg.addlDealPrcAmt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.funcUnitPrcAmt, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt);
        svcInvLineTMsg.svcInvMnAot.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDealSlsAmt, svcContrAddlChrgBllgTMsg.addlDealPrcAmt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineFuncSlsAmt, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt);
        svcInvLineTMsg.svcLborDealAmt.clear();
        svcInvLineTMsg.svcLborFuncAmt.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDealNetAmt, svcContrAddlChrgBllgTMsg.addlDealPrcAmt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineFuncNetAmt, svcContrAddlChrgBllgTMsg.addlFuncPrcAmt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.slsTaxRate, slsTaxRate);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDealTaxAmt, taxDealAmt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineFuncTaxAmt, taxFuncAmt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDiscRate, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineDealDiscAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invLineFuncDiscAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dealDiscUnitPrcAmt, BigDecimal.ZERO);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.funcDiscUnitPrcAmt, BigDecimal.ZERO);
        svcInvLineTMsg.coaCmpyCd.clear();
        svcInvLineTMsg.coaAfflCd.clear();
        svcInvLineTMsg.coaBrCd.clear();
        svcInvLineTMsg.coaChCd.clear();
        svcInvLineTMsg.coaCcCd.clear();
        svcInvLineTMsg.coaAcctCd.clear();
        svcInvLineTMsg.coaProdCd.clear();
        svcInvLineTMsg.coaProjCd.clear();
        svcInvLineTMsg.coaExtnCd.clear();
        //Mod Start 05/25/2016 <QC#7636>
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.shipToCustCd, custCd);
        //Mod End   05/25/2016 <QC#7636>
        svcInvLineTMsg.mdlNm.clear();
        svcInvLineTMsg.mdlId.clear();
        svcInvLineTMsg.svcInitChrgPct.clear();
        svcInvLineTMsg.svcTaskNum.clear();
        svcInvLineTMsg.svcInvTz.clear();
        svcInvLineTMsg.svcTaskCpltDt.clear();
        svcInvLineTMsg.svcTaskCpltTm.clear();
        svcInvLineTMsg.crDrSubRsnCd.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerFromDt, svcContrAddlChrgBllgTMsg.addlChrgFromDt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerThruDt, svcContrAddlChrgBllgTMsg.addlChrgThruDt);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcContrBllgPk, svcContrBllgTMsg.svcContrBllgPk);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrPk, svcContrBllgTMsg.dsContrPk);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrDtlPk, svcContrBllgTMsg.dsContrDtlPk);
        svcInvLineTMsg.svcContrBaseBllgPk.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.taxCalcGeoCd, taxCalcGeoCd);
        // mod start 2016/09/27 CSA Defect#10787
//        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcPgmMdseCd, (String) dsContrDtlInfo.get("SVC_PGM_MDSE_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcPgmMdseCd, svcContrAddlChrgBllgTMsg.intgMdseCd);
        // mod end 2016/09/27 CSA Defect#10787
        // Add Start 03/23/2016 <QC#5863>
        // mod start 2016/09/27 CSA Defect#10787
//        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcPgmMdseNm, getSvcPgmMdseNm((String) dsContrDtlInfo.get("SVC_PGM_MDSE_CD")));
        if (mdseTMsg != null) {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcPgmMdseNm, mdseTMsg.mdseNm);
        }
        // mod end 2016/09/27 CSA Defect#10787
        // Add End   03/23/2016 <QC#5863>
        // Add Start 08/30/2016 <QC#13706>
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invPrintCovTxt, (String) dsContrDtlInfo.get("SVC_COV_DTL_VAL_TXT"));
        // Add End   08/30/2016 <QC#13706>
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.intgMdseCd, svcContrAddlChrgBllgTMsg.intgMdseCd);
        svcInvLineTMsg.svcMachMstrPk.clear();
        svcInvLineTMsg.serNum.clear();
        // START 04/07/2022 [QC#60271, ADD]
        SVC_INV_LINETMsg prntTmsg = getSvcInvLineFindByKey(prntSvcInvLinePk);
        if (prntTmsg != null) {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcMachMstrPk, prntTmsg.svcMachMstrPk);
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdlId, prntTmsg.mdlId);
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mdlNm, prntTmsg.mdlNm);
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.serNum, prntTmsg.serNum);
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.prntSerNum, prntTmsg.prntSerNum);
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.prntMachMstrId, prntTmsg.prntMachMstrId);
        }
        // END   04/07/2022 [QC#60271, ADD]
        svcInvLineTMsg.custIssPoNum.clear();
        svcInvLineTMsg.custIssPoDt.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.prntSvcInvLinePk, prntSvcInvLinePk);
        svcInvLineTMsg.firstBllgAttrbValTxt.clear();
        svcInvLineTMsg.scdBllgAttrbValTxt.clear();
        svcInvLineTMsg.thirdBllgAttrbValTxt.clear();
        svcInvLineTMsg.frthBllgAttrbValTxt.clear();
        svcInvLineTMsg.fifthBllgAttrbValTxt.clear();
        svcInvLineTMsg.sixthBllgAttrbValTxt.clear();

        DS_CONTR_ADDL_CHRGTMsg dsContrAddlChrgTMsg = getDsContrAddlChrg(svcContrBllgTMsg.dsContrAddlChrgPk.getValue());
        if (dsContrAddlChrgTMsg != null) {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgCycleCd, dsContrAddlChrgTMsg.bllgCycleCd);
        }
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.bllgPerMthAot, svcContrAddlChrgBllgTMsg.addlChrgPerMthAot);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvLineTpCd, SVC_INV_LINE_TP.ADDITONAL_CHARGE);
        svcInvLineTMsg.copyInclQty.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invDispUnitPrcAmt, svcContrAddlChrgBllgTMsg.addlDealPrcAmt);
        BLLG_CYCLETMsg bllgCycleTMsg = getBllgCycleTMsg(svcInvLineTMsg.bllgCycleCd.getValue());
        if (bllgCycleTMsg != null) {
            ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.uomCd, bllgCycleTMsg.bllgCycleUomCd);
        }
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.invDispQty, BigDecimal.ONE);
        svcInvLineTMsg.dsContrBllgSchdPk.clear();
        svcInvLineTMsg.basePrcAdjDealAmt.clear();
        svcInvLineTMsg.basePrcAdjFuncAmt.clear();
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.svcInvEligFlg, ZYPConstant.FLG_OFF_N);
        // START 2017/09/05 T.Kanasaka [QC#15134,ADD]
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mtrRollOverFlg, ZYPConstant.FLG_OFF_N);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.mtrExchFlg, ZYPConstant.FLG_OFF_N);
        // END 2017/09/05 T.Kanasaka [QC#15134,ADD]
        // START 2018/05/22 K.Kojima [QC#23302,ADD]
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.dsContrAddlChrgPk, svcContrBllgTMsg.dsContrAddlChrgPk);
        // END 2018/05/22 K.Kojima [QC#23302,ADD]

        // add start 2018/08/09 QC#27329-3
        if (INV_TP.CREDIT_MEMO.equals(svcContrBllgTMsg.invTpCd.getValue()) && hasValue(svcContrBllgTMsg.origSvcInvNum)) {
            setOrigSvcInvLineInfo(svcInvLineTMsg, svcContrBllgTMsg.origSvcInvNum.getValue(), svcContrBllgTMsg.dsContrBllgSchdPk.getValue());
        }
        // add end 2018/08/09 QC#27329-3

        S21FastTBLAccessor.insert(svcInvLineTMsg);
        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(svcInvLineTMsg.getReturnCode())) {
            throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE" });
        }
        return svcInvLineTMsg;
    }

    // Mod Start 2016/11/10 <QC#15789>
    // START 2017/11/29 K.Kojima [QC#22660,MOD]
    // private void createSvcInvLIneAllocForAddl(int i, SVC_INV_LINETMsg svcInvLineTMsg, SVC_CONTR_BLLG_ALLOCTMsg svcContrBllgAllocTMsg, String ajeInvLineAllocCd) {
    // START 2019/03/11 [QC#30675, MOD]
    // private void createSvcInvLIneAllocForAddl(int i, SVC_INV_LINETMsg svcInvLineTMsg, SVC_CONTR_BLLG_ALLOCTMsg svcContrBllgAllocTMsg, String ajeInvLineAllocCd, BigDecimal svcContrAddlChrgBllgPk, String dsContrCatgCd) {
    private SVC_INV_LINE_ALLOCTMsg createSvcInvLIneAllocForAddl(int i, SVC_INV_LINETMsg svcInvLineTMsg, SVC_CONTR_BLLG_ALLOCTMsg svcContrBllgAllocTMsg, String ajeInvLineAllocCd, BigDecimal svcContrAddlChrgBllgPk, String dsContrCatgCd) {
    // END 2019/03/11 [QC#30675, MOD]
    // END 2017/11/29 K.Kojima [QC#22660,MOD]

        SVC_INV_LINE_ALLOCTMsg inTMsg = new SVC_INV_LINE_ALLOCTMsg();

        BigDecimal svcInvLineAllocPk = ZYPOracleSeqAccessor.getNumberBigDecimal("SVC_INV_LINE_ALLOC_SQ");

        setValue(inTMsg.glblCmpyCd, this.glblCmpyCd);
        setValue(inTMsg.svcInvLineAllocPk, svcInvLineAllocPk);
        setValue(inTMsg.svcInvLinePk, svcInvLineTMsg.svcInvLinePk);
        setValue(inTMsg.svcInvNum, svcInvLineTMsg.svcInvNum);
        setValue(inTMsg.svcInvLineNum, svcInvLineTMsg.svcInvLineNum);
        setValue(inTMsg.svcInvLineAllocNum, String.format(SVC_INV_LINE_ALLOC_NUM_FMT, i + 1));
        setValue(inTMsg.contrPrcAllocTpCd, CONTR_PRC_ALLOC_TP.ADDITIONAL_CHARGE);
        setValue(inTMsg.intgMdseCd, svcContrBllgAllocTMsg.intgMdseCd);
        // START 2017/11/29 K.Kojima [QC#21918,MOD]
        if (ZYPCommonFunc.hasValue(dsContrCatgCd) && DS_CONTR_CATG.FLEET.equals(dsContrCatgCd)) {
            setValue(inTMsg.tocCd, svcContrBllgAllocTMsg.tocCd);
        } else {
            setValue(inTMsg.tocCd, getSalesRepForAddl(svcContrAddlChrgBllgPk));
        }
        // END 2017/11/29 K.Kojima [QC#21918,MOD]
        // START 2019/03/11 [QC#30675, ADD]
        if (!hasValue(inTMsg.tocCd)) {
            return null;
        }
        // END 2019/03/11 [QC#30675, ADD]
        setValue(inTMsg.slsAllocRate, svcContrBllgAllocTMsg.slsAllocRate);
        inTMsg.svcContrChrgAllocAmt.clear();
        setValue(inTMsg.dealGrsUnitPrcAmt, svcContrBllgAllocTMsg.dealGrsUnitPrcAmt);
        setValue(inTMsg.dealDiscUnitPrcAmt, svcContrBllgAllocTMsg.dealDiscUnitPrcAmt);
        setValue(inTMsg.dealNetUnitPrcAmt, svcContrBllgAllocTMsg.dealNetUnitPrcAmt);
        setValue(inTMsg.dealGrsTotPrcAmt, svcContrBllgAllocTMsg.dealGrsTotPrcAmt);
        setValue(inTMsg.invLineDealNetAmt, svcContrBllgAllocTMsg.invLineDealNetAmt);
        setValue(inTMsg.invLineDealTaxAmt, BigDecimal.ZERO);
        setValue(inTMsg.funcGrsUnitPrcAmt, svcContrBllgAllocTMsg.funcGrsUnitPrcAmt);
        setValue(inTMsg.funcDiscUnitPrcAmt, svcContrBllgAllocTMsg.funcDiscUnitPrcAmt);
        setValue(inTMsg.funcNetUnitPrcAmt, svcContrBllgAllocTMsg.funcNetUnitPrcAmt);
        setValue(inTMsg.funcGrsTotPrcAmt, svcContrBllgAllocTMsg.funcGrsTotPrcAmt);
        setValue(inTMsg.invLineFuncNetAmt, svcContrBllgAllocTMsg.invLineFuncNetAmt);
        setValue(inTMsg.invLineFuncTaxAmt, BigDecimal.ZERO);
        setValue(inTMsg.ccyCd, svcContrBllgAllocTMsg.ccyCd);
        setValue(inTMsg.coaCmpyCd, svcContrBllgAllocTMsg.coaCmpyCd);
        setValue(inTMsg.coaAfflCd, svcContrBllgAllocTMsg.coaAfflCd);
        setValue(inTMsg.coaBrCd, svcContrBllgAllocTMsg.coaBrCd);
        setValue(inTMsg.coaChCd, svcContrBllgAllocTMsg.coaChCd);
        setValue(inTMsg.coaCcCd, svcContrBllgAllocTMsg.coaCcCd);
        setValue(inTMsg.coaAcctCd, svcContrBllgAllocTMsg.coaAcctCd);
        setValue(inTMsg.coaProdCd, svcContrBllgAllocTMsg.coaProdCd);
        setValue(inTMsg.coaProjCd, svcContrBllgAllocTMsg.coaProjCd);
        setValue(inTMsg.coaExtnCd, svcContrBllgAllocTMsg.coaExtnCd);
        setValue(inTMsg.svcContrBllgAllocPk, svcContrBllgAllocTMsg.svcContrBllgAllocPk);
        setValue(inTMsg.svcContrBaseBllgPk, svcContrBllgAllocTMsg.svcContrBaseBllgPk);
        setValue(inTMsg.svcContrMtrBllgPk, svcContrBllgAllocTMsg.svcContrMtrBllgPk);
        // START 2016/06/20 T.Aoyagi [QC#9907, MOD]
//        inTMsg.invLineSplTpCd.clear();
        ZYPEZDItemValueSetter.setValue(inTMsg.invLineSplTpCd, this.invLineSplTpMap.get(svcContrBllgAllocTMsg.svcContrBllgAllocPk.getValue()));
        // END 2016/06/20 T.Aoyagi [QC#9907, MOD]
        inTMsg.invLineSplRate.clear();
        inTMsg.slsRepTocAllocRate.clear();
        setValue(inTMsg.svcContrAddlChrgBllgPk, svcContrBllgAllocTMsg.svcContrAddlChrgBllgPk);
        setValue(inTMsg.trxCd, svcContrBllgAllocTMsg.trxCd);
        setValue(inTMsg.trxRsnCd, svcContrBllgAllocTMsg.trxRsnCd);
        setValue(inTMsg.dfrdAcctgRuleCd, svcContrBllgAllocTMsg.dfrdAcctgRuleCd);
        setValue(inTMsg.dfrdAcctgRuleDurnAot, svcContrBllgAllocTMsg.dfrdAcctgRuleDurnAot);
        // Add Start 2016/11/10 <QC#15789>
        ZYPEZDItemValueSetter.setValue(inTMsg.ajeInvLineAllocCd, ajeInvLineAllocCd);
        // Add End   2016/11/10 <QC#15789>

        S21FastTBLAccessor.insert(inTMsg);
        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(inTMsg.getReturnCode())) {
            throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE_ALLOC" });
        }
        // START 2019/03/11 [QC#30675, ADD]
        return inTMsg;
        // END 2019/03/11 [QC#30675, ADD]
    }
    // Mod End   2016/11/10 <QC#15789>

    private void createSvcInvLineAddlChrg(BigDecimal svcInvLinePk, BigDecimal prntSvcContrBllgPk, SVC_CONTR_ADDL_CHRG_BLLGTMsg addlChrgBllgTMsg) {

        BigDecimal svcInvLineAddlChrgPk = ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqConstant.SVC_INV_LINE_ADDL_CHRG_SQ);

        SVC_INV_LINE_ADDL_CHRGTMsg inTMsg = new SVC_INV_LINE_ADDL_CHRGTMsg();
        setValue(inTMsg.glblCmpyCd, this.glblCmpyCd);
        setValue(inTMsg.svcInvLineAddlChrgPk, svcInvLineAddlChrgPk);
        setValue(inTMsg.svcInvLinePk, svcInvLinePk);
        setValue(inTMsg.svcContrAddlChrgBllgPk, addlChrgBllgTMsg.svcContrAddlChrgBllgPk);
        setValue(inTMsg.svcContrBllgPk, addlChrgBllgTMsg.svcContrBllgPk);
        setValue(inTMsg.addlChrgTpCd, addlChrgBllgTMsg.addlChrgTpCd);
        setValue(inTMsg.svcBillByTpCd, addlChrgBllgTMsg.svcBillByTpCd);
        setValue(inTMsg.addlChrgFlatDealPrcAmt, addlChrgBllgTMsg.addlChrgFlatDealPrcAmt);
        setValue(inTMsg.addlChrgFlatFuncPrcAmt, addlChrgBllgTMsg.addlChrgFlatFuncPrcAmt);
        setValue(inTMsg.addlChrgAplcPct, addlChrgBllgTMsg.addlChrgAplcPct);
        setValue(inTMsg.addlChrgInvTpCd, addlChrgBllgTMsg.addlChrgInvTpCd);
        setValue(inTMsg.printDtlFlg, addlChrgBllgTMsg.printDtlFlg);
        setValue(inTMsg.prntSvcContrBllgPk, prntSvcContrBllgPk);
        setValue(inTMsg.svcContrBaseBllgPk, addlChrgBllgTMsg.svcContrBaseBllgPk);
        setValue(inTMsg.svcContrMtrBllgPk, addlChrgBllgTMsg.svcContrMtrBllgPk);

        S21FastTBLAccessor.insert(inTMsg);
        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(inTMsg.getReturnCode())) {
            throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE_ADDL_CHRG" });
        }
    }

    // START 2018/05/31 K.Kojima [QC#23685,DEL]
    // private void createSvcInvLineTaxDtl(BigDecimal svcInvLinePk, String ccyCd, NWZC036101PMsg taxApiPMsg) {
    // 
    //     // Add Start 08/31/2016 <QC#13529>
    //     if (taxApiPMsg == null) {
    //         return;
    //     }
    //     // Add End   08/31/2016 <QC#13529>
    // 
    //     String[] dsSlsTaxTpCd = new String[]{DS_SLS_TAX_TP.STATE_TAX, DS_SLS_TAX_TP.COUNTY_TAX, DS_SLS_TAX_TP.CITY_TAX};
    // 
    //     for (int i = 0; i < dsSlsTaxTpCd.length; i++) {
    // 
    //         NWZC036101_taxCalculateOutputLinePMsg linePMsg = taxApiPMsg.taxCalculateOutputLine.no(0);
    //         BigDecimal svcInvLineTaxDtlPk = ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqConstant.SVC_INV_LINE_TAX_DTL_SQ);
    // 
    //         SVC_INV_LINE_TAX_DTLTMsg inTMsg = new SVC_INV_LINE_TAX_DTLTMsg();
    //         setValue(inTMsg.glblCmpyCd, this.glblCmpyCd);
    //         setValue(inTMsg.svcInvLineTaxDtlPk, svcInvLineTaxDtlPk);
    //         setValue(inTMsg.svcInvLinePk, svcInvLinePk);
    //         setValue(inTMsg.dsSlsTaxTpCd, dsSlsTaxTpCd[i]);
    //         // Mod Start 03/28/2016 <QC#5879>
    //         if (i == 0) {
    //             if (!hasValue(linePMsg.taxAmt_01)) {
    //                 continue;
    //             }
    //             setValue(inTMsg.funcTaxAmt, nullToZero(linePMsg.taxAmt_01.getValue()));
    //             setValue(inTMsg.slsTaxRate, nullToZero(linePMsg.taxPct_01.getValue()));
    //         } else if (i == 1) {
    //             if (!hasValue(linePMsg.taxAmt_02)) {
    //                 continue;
    //             }
    //             setValue(inTMsg.funcTaxAmt, nullToZero(linePMsg.taxAmt_02.getValue()));
    //             setValue(inTMsg.slsTaxRate, nullToZero(linePMsg.taxPct_02.getValue()));
    //         } else if (i == 2) {
    //             if (!hasValue(linePMsg.taxAmt_03)) {
    //                 continue;
    //             }
    //             setValue(inTMsg.funcTaxAmt, nullToZero(linePMsg.taxAmt_03.getValue()));
    //             setValue(inTMsg.slsTaxRate, nullToZero(linePMsg.taxPct_03.getValue()));
    //         }
    //         // Mod Start 03/28/2016 <QC#5879>
    //         BigDecimal dealTaxAmt = NSXC003001Exchange.calcDealFromFunc(glblCmpyCd, ccyCd, slsDt, inTMsg.funcTaxAmt.getValue());
    //         setValue(inTMsg.dealTaxAmt, dealTaxAmt);
    //         // START 2017/08/07 M.Kidokoro [QC#20073, ADD]
    //         setValue(inTMsg.taxAreaId, linePMsg.taxAreaId.getValue());
    //         // END 2017/08/07 M.Kidokoro [QC#20073, ADD]
    // 
    //         S21FastTBLAccessor.insert(inTMsg);
    //         if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(inTMsg.getReturnCode())) {
    //             throw new S21AbendException(NSZM0398E, new String[] {"SVC_INV_LINE_TAX_DTL" });
    //         }
    //     }
    // }
    // END 2018/05/31 K.Kojima [QC#23685,DEL]

    private void updateDsContrBllgMtr(SVC_CONTR_BLLGTMsg svcContrBllgTMsg, SVC_CONTR_MTR_BLLGTMsg svcContrMtrBllgTMsg) {

        String invTpCd = svcContrBllgTMsg.invTpCd.getValue();

        DS_CONTR_BLLG_MTRTMsg inTMsg = new DS_CONTR_BLLG_MTRTMsg();
        ZYPEZDItemValueSetter.setValue(inTMsg.glblCmpyCd, glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(inTMsg.dsContrBllgMtrPk, svcContrBllgTMsg.dsContrBllgMtrPk);
        S21FastTBLAccessor.findByKeyForUpdate(inTMsg);

        // START 2022/09/01 L.Mandanas [QC#58350, MOD]
         //BigDecimal bllgFreeCopyCnt = inTMsg.bllgFreeCopyCnt.getValue();
        BigDecimal bllgFreeCopyCnt = svcContrMtrBllgTMsg.freeCopyCnt.getValue();
        // END 2022/09/01 L.Mandanas [QC#58350, MOD]
        BigDecimal usgFreeCopyCnt = svcContrMtrBllgTMsg.usgFreeCopyCnt.getValue();
        // START 2022/10/06 L.Mandanas [QC#58350, ADD]
        BigDecimal origFreeCopyCnt = inTMsg.bllgFreeCopyCnt.getValue();
        if(!hasValue(origFreeCopyCnt)) {
            bllgFreeCopyCnt = null;
        }
        // END 2022/10/06 L.Mandanas [QC#58350, ADD]

        // START 2022/09/01 L.Mandanas [QC#58350, DEL]
//        if (hasValue(bllgFreeCopyCnt) && hasValue(usgFreeCopyCnt)) {
            // START 2018/06/05 K.Kojima [QC#21974,MOD]
            // if (bllgFreeCopyCnt.compareTo(BigDecimal.ZERO) != 0) {
            // 
            //     if (INV_TP.CREDIT_MEMO.equals(invTpCd)) {
            //         bllgFreeCopyCnt = bllgFreeCopyCnt.add(usgFreeCopyCnt);
            //     } else {
            //         // START 2018/04/02 K.Kojima [QC#24838,MOD]
            //         // bllgFreeCopyCnt = bllgFreeCopyCnt.subtract(bllgFreeCopyCnt);
            //         bllgFreeCopyCnt = bllgFreeCopyCnt.subtract(usgFreeCopyCnt);
            //         // END 2018/04/02 K.Kojima [QC#24838,MOD]
            //         if (bllgFreeCopyCnt.compareTo(BigDecimal.ZERO) < 0) {
            //             bllgFreeCopyCnt = BigDecimal.ZERO;
            //         }
            //     }
            // }
            //if (INV_TP.CREDIT_MEMO.equals(invTpCd)) {
            //    bllgFreeCopyCnt = bllgFreeCopyCnt.add(usgFreeCopyCnt);
            //} else {
            //    if (bllgFreeCopyCnt.compareTo(BigDecimal.ZERO) != 0) {
            //        bllgFreeCopyCnt = bllgFreeCopyCnt.subtract(usgFreeCopyCnt);
            //        if (bllgFreeCopyCnt.compareTo(BigDecimal.ZERO) < 0) {
            //            bllgFreeCopyCnt = BigDecimal.ZERO;
            //        }
            //    }
            //}
            // END 2018/06/05 K.Kojima [QC#21974,MOD]
        //}
        // END 2022/09/01 L.Mandanas [QC#58350, DEL]

        // START 2019/01/21 K.Kitachi [QC#29083, ADD]
        bllgFreeCopyCnt = getCumCopyCnt(inTMsg, svcContrBllgTMsg, bllgFreeCopyCnt);
        // END 2019/01/21 K.Kitachi [QC#29083, ADD]
        ZYPEZDItemValueSetter.setValue(inTMsg.bllgFreeCopyCnt, bllgFreeCopyCnt);
        if (hasValue(svcContrMtrBllgTMsg.rollOverRatio)) {
            ZYPEZDItemValueSetter.setValue(inTMsg.rollOverCnt, svcContrMtrBllgTMsg.rollOverCnt);
        }
        if (inTMsg.mtrBllgLastBllgDt.getValue().compareTo(svcContrBllgTMsg.mtrBllgNextBllgDt.getValue()) < 0) {
            ZYPEZDItemValueSetter.setValue(inTMsg.mtrBllgLastBllgDt, svcContrBllgTMsg.mtrBllgNextBllgDt.getValue());
        }
        if (inTMsg.mtrInvUpToDt.getValue().compareTo(svcContrMtrBllgTMsg.mtrBllgThruDt.getValue()) < 0) {
            ZYPEZDItemValueSetter.setValue(inTMsg.mtrInvUpToDt, svcContrMtrBllgTMsg.mtrBllgThruDt.getValue());
        }
        S21FastTBLAccessor.update(inTMsg);
        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(inTMsg.getReturnCode())) {
            throw new S21AbendException(NSZM0399E, new String[] {"DS_CONTR_BLLG_MTR" });
        }
    }

    private void updateDsContrBllgSchd(SVC_CONTR_BLLGTMsg svcContrBllgTMsg, SVC_INVTMsg svcInvTMsg, Map<String, Object> svcInvLineMap) {

        DS_CONTR_BLLG_SCHDTMsg inTMsg = new DS_CONTR_BLLG_SCHDTMsg();
        ZYPEZDItemValueSetter.setValue(inTMsg.glblCmpyCd, glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(inTMsg.dsContrBllgSchdPk, svcContrBllgTMsg.dsContrBllgSchdPk);
        S21FastTBLAccessor.findByKeyForUpdate(inTMsg);

        ZYPEZDItemValueSetter.setValue(inTMsg.svcInvNum, svcInvTMsg.svcInvNum);
        ZYPEZDItemValueSetter.setValue(inTMsg.invDt, svcInvTMsg.invDt);
        ZYPEZDItemValueSetter.setValue(inTMsg.invFlg, ZYPConstant.FLG_ON_Y);
        //Add Start 03/29/2016 <QC#5884>
        ZYPEZDItemValueSetter.setValue(inTMsg.dsBllgSchdStsCd, DS_BLLG_SCHD_STS.CLOSE);
        //Add End   03/29/2016 <QC#5884>
        if (svcInvLineMap != null) {
            ZYPEZDItemValueSetter.setValue(inTMsg.slsTaxRate, (BigDecimal) svcInvLineMap.get("SLS_TAX_RATE"));
            ZYPEZDItemValueSetter.setValue(inTMsg.dealTaxAmt, (BigDecimal) svcInvLineMap.get("INV_LINE_DEAL_TAX_AMT"));
            ZYPEZDItemValueSetter.setValue(inTMsg.funcTaxAmt, (BigDecimal) svcInvLineMap.get("INV_LINE_FUNC_TAX_AMT"));
        }
        S21FastTBLAccessor.update(inTMsg);
        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(inTMsg.getReturnCode())) {
            throw new S21AbendException(NSZM0399E, new String[] {"DS_CONTR_BLLG_SCHD" });
        }

        //Add Start 05/11/2016 <QC#7764>
        if (DS_CONTR_CATG.AGGREGATE.equals(svcContrBllgTMsg.dsContrCatgCd.getValue())) {
            if (hasValue(inTMsg.prntDsContrBllgSchdPk)) {
                DS_CONTR_BLLG_SCHDTMsg prntTMsg = new DS_CONTR_BLLG_SCHDTMsg();
                ZYPEZDItemValueSetter.setValue(prntTMsg.glblCmpyCd, glblCmpyCd);
                ZYPEZDItemValueSetter.setValue(prntTMsg.dsContrBllgSchdPk, inTMsg.prntDsContrBllgSchdPk);
                S21FastTBLAccessor.findByKeyForUpdate(prntTMsg);
                if (DS_CONTR_DTL_TP.AGGREGATE.equals(prntTMsg.dsContrDtlTpCd.getValue())) {
                    ZYPEZDItemValueSetter.setValue(prntTMsg.svcInvNum, svcInvTMsg.svcInvNum);
                    ZYPEZDItemValueSetter.setValue(prntTMsg.invDt, svcInvTMsg.invDt);
                    ZYPEZDItemValueSetter.setValue(prntTMsg.invFlg, ZYPConstant.FLG_ON_Y);
                    ZYPEZDItemValueSetter.setValue(prntTMsg.dsBllgSchdStsCd, DS_BLLG_SCHD_STS.CLOSE);
                    S21FastTBLAccessor.update(prntTMsg);
                    if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(prntTMsg.getReturnCode())) {
                        throw new S21AbendException(NSZM0399E, new String[] {"DS_CONTR_BLLG_SCHD" });
                    }
                }
            }
        }
        //Add End   05/11/2016 <QC#7764>
    }

    private void updateDsContrAddlChrg(SVC_CONTR_BLLGTMsg svcContrBllgTMsg, SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg) {

        DS_CONTR_ADDL_CHRGTMsg inTMsg = new DS_CONTR_ADDL_CHRGTMsg();
        ZYPEZDItemValueSetter.setValue(inTMsg.glblCmpyCd, glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(inTMsg.dsContrAddlChrgPk, svcContrBllgTMsg.dsContrAddlChrgPk);
        S21FastTBLAccessor.findByKeyForUpdate(inTMsg);

        if (inTMsg.invUpToDt.getValue().compareTo(svcContrAddlChrgBllgTMsg.addlChrgThruDt.getValue()) < 0) {
            ZYPEZDItemValueSetter.setValue(inTMsg.invUpToDt, svcContrAddlChrgBllgTMsg.addlChrgThruDt.getValue());
        }
        S21FastTBLAccessor.update(inTMsg);
        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(inTMsg.getReturnCode())) {
            throw new S21AbendException(NSZM0399E, new String[] {"DS_CONTR_ADDL_CHRG" });
        }
    }

    private void archiveProcess(List<Map<String, Object>> dsContrDtlInfoList) {

        //TODO
        S21InfoLogOutput.println("[Test][archiveProcess]Start");

        // START 2018/06/29 K.Kojima [QC#23685-1,ADD]
        List<SVC_CONTR_BASE_BLLGTMsg> svcContrBaseBllgList = new ArrayList<SVC_CONTR_BASE_BLLGTMsg>();
        List<SVC_CONTR_MTR_BLLGTMsg> svcContrMtrBllgList = new ArrayList<SVC_CONTR_MTR_BLLGTMsg>();
        List<SVC_CONTR_XS_MTR_BLLGTMsg> svcContrXsMtrBllgList = new ArrayList<SVC_CONTR_XS_MTR_BLLGTMsg>();
        List<SVC_CONTR_ADDL_CHRG_BLLGTMsg> svcContrAddlChrgBllgList = new ArrayList<SVC_CONTR_ADDL_CHRG_BLLGTMsg>();
        List<SVC_CONTR_BLLG_ALLOCTMsg> svcContrBllgAllocList = new ArrayList<SVC_CONTR_BLLG_ALLOCTMsg>();
        List<SVC_CONTR_BLLGTMsg> svcContrBllgList = new ArrayList<SVC_CONTR_BLLGTMsg>();
        List<CONTR_BASE_BLLG_TRKTMsg> contrBaseBllgTrkList = new ArrayList<CONTR_BASE_BLLG_TRKTMsg>();
        List<CONTR_MTR_BLLG_TRKTMsg> contrMtrBllgTrkList = new ArrayList<CONTR_MTR_BLLG_TRKTMsg>();
        List<CONTR_XS_MTR_BLLG_TRKTMsg> contrXsMtrBllgTrkList = new ArrayList<CONTR_XS_MTR_BLLG_TRKTMsg>();
        List<CONTR_ADDL_CHRG_BLLG_TRKTMsg> contrAddlChrgBllgTrkList = new ArrayList<CONTR_ADDL_CHRG_BLLG_TRKTMsg>();
        List<CONTR_BLLG_ALLOC_TRKTMsg> contrBllgAllocTrkList = new ArrayList<CONTR_BLLG_ALLOC_TRKTMsg>();
        List<CONTR_BLLG_TRKTMsg> contrLbllgTrkList = new ArrayList<CONTR_BLLG_TRKTMsg>();;
        // END 2018/06/29 K.Kojima [QC#23685-1,ADD]

        for (Map<String, Object> dsContrDtlInfo :  dsContrDtlInfoList) {
            BigDecimal prntSvcContrBllgPk = (BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK");

            List<BigDecimal> svcContrBllgPkList = new ArrayList<BigDecimal>();
            svcContrBllgPkList.add(prntSvcContrBllgPk);

            // START 2019/01/24 [QC#29853, DEL]
            // List<BigDecimal> childPkList = getChildSvcContrBllgPkList(prntSvcContrBllgPk);
            // if (!childPkList.isEmpty()) {
            //     svcContrBllgPkList.addAll(childPkList);
            // }
            // END   2019/01/24 [QC#29853, DEL]

            // Add Start 04/04/2016 <QC#6625>
            if (DS_CONTR_CATG.AGGREGATE.equals((String) dsContrDtlInfo.get("DS_CONTR_CATG_CD"))) {
                prntSvcContrBllgPk = (BigDecimal) dsContrDtlInfo.get("PRNT_SVC_CONTR_BLLG_PK");
                // START 2019/01/24 [QC#29853, MOD]
                // if (ZYPCommonFunc.hasValue(prntSvcContrBllgPk) && !svcContrBllgPkList.contains(prntSvcContrBllgPk)) {
                //     svcContrBllgPkList.add(prntSvcContrBllgPk);
                // }
                String dsContrDtlTpCd = (String) dsContrDtlInfo.get("DS_CONTR_DTL_TP_CD");
                if (ZYPCommonFunc.hasValue(prntSvcContrBllgPk) && !svcContrBllgPkList.contains(prntSvcContrBllgPk)
                        && !DS_CONTR_DTL_TP.ACCESSORIES.equals(dsContrDtlTpCd)) {
                    svcContrBllgPkList.add(prntSvcContrBllgPk);
                }
                // END   2019/01/24 [QC#29853, MOD]
            }
            // Add End 04/04/2016 <QC#6625>

            for (BigDecimal svcContrBllgPk : svcContrBllgPkList) {
                // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
                // archiveSvcContrBaseBllg(svcContrBllgPk);
                // archiveSvcContrMtrBllg(svcContrBllgPk);
                // archiveSvcContrXsMtrBllg(svcContrBllgPk);
                // archiveSvcContrAddlChrgBllg(svcContrBllgPk);
                // archiveSvcContrBllgAlloc(svcContrBllgPk);
                // archiveSvcContrBllg(svcContrBllgPk);
                archiveSvcContrBaseBllg(svcContrBllgPk, svcContrBaseBllgList, contrBaseBllgTrkList);
                archiveSvcContrMtrBllg(svcContrBllgPk, svcContrMtrBllgList, contrMtrBllgTrkList);
                archiveSvcContrXsMtrBllg(svcContrBllgPk, svcContrXsMtrBllgList, contrXsMtrBllgTrkList);
                // START 2022/05/23 K.Kitachi [QC#60054, DEL]
//                archiveSvcContrAddlChrgBllg(svcContrBllgPk, svcContrAddlChrgBllgList, contrAddlChrgBllgTrkList);
                // END 2022/05/23 K.Kitachi [QC#60054, DEL]
                archiveSvcContrBllgAlloc(svcContrBllgPk, svcContrBllgAllocList, contrBllgAllocTrkList);
                archiveSvcContrBllg(svcContrBllgPk, svcContrBllgList, contrLbllgTrkList);
                // END 2018/06/29 K.Kojima [QC#23685-1,MOD]
                // START 2022/06/07 K.Kitachi [QC#60160, ADD]
                List<BigDecimal> addlChrgPkList = getAddlChrgSvcContrBllgPkList(svcContrBllgPk);
                for (BigDecimal addlChrgPk : addlChrgPkList) {
                    archiveSvcContrAddlChrgBllg(addlChrgPk, svcContrAddlChrgBllgList, contrAddlChrgBllgTrkList);
                    archiveSvcContrBllgAlloc(addlChrgPk, svcContrBllgAllocList, contrBllgAllocTrkList);
                    archiveSvcContrBllg(addlChrgPk, svcContrBllgList, contrLbllgTrkList);
                }
                // END 2022/06/07 K.Kitachi [QC#60160, ADD]
            }

            // START 2022/05/23 K.Kitachi [QC#60054, ADD]
            // START 2022/06/07 K.Kitachi [QC#60160, DEL]
//            List<BigDecimal> addlChrgPkList = getAddlChrgSvcContrBllgPkList(prntSvcContrBllgPk);
//            for (BigDecimal addlChrgPk : addlChrgPkList) {
//                archiveSvcContrAddlChrgBllg(addlChrgPk, svcContrAddlChrgBllgList, contrAddlChrgBllgTrkList);
//                archiveSvcContrBllgAlloc(addlChrgPk, svcContrBllgAllocList, contrBllgAllocTrkList);
//                archiveSvcContrBllg(addlChrgPk, svcContrBllgList, contrLbllgTrkList);
//            }
            // END 2022/06/07 K.Kitachi [QC#60160, DEL]
            // END 2022/05/23 K.Kitachi [QC#60054, ADD]
        }

        // START 2018/06/29 K.Kojima [QC#23685-1,ADD]
        insertContrBllgTrk(contrBaseBllgTrkList, contrMtrBllgTrkList, contrXsMtrBllgTrkList, contrAddlChrgBllgTrkList, contrBllgAllocTrkList, contrLbllgTrkList);
        removeSvcContrBllg(svcContrBaseBllgList, svcContrMtrBllgList, svcContrXsMtrBllgList, svcContrAddlChrgBllgList, svcContrBllgAllocList, svcContrBllgList);
        // END 2018/06/29 K.Kojima [QC#23685-1,ADD]

        //TODO
        S21InfoLogOutput.println("[Test][archiveProcess]End");
    }

    // START 2017/09/06 M.Kidokoro [QC#20079, ADD]
    // START 2017/09/11 K.Kitachi [QC#20446, MOD]
    // START 2019/11/08 K.Kitachi [QC#54368, MOD]
//    private void archiveProcessForRegular(List<Map<String, Object>> dsContrDtlInfoList, String invSeptBaseUsgFlg, BigDecimal svcCrRebilPk) {
    // START 2022/02/09 S.Kitamura [QC#59683, MOD]
    // private void archiveProcessForRegular(List<Map<String, Object>> dsContrDtlInfoList, String invSeptBaseUsgFlg, BigDecimal svcCrRebilPk, List<String> skipGrpSvcInvKeyList) {
    private void archiveProcessForRegular(List<Map<String, Object>> dsContrDtlInfoList, String allLineTogetherFlg, BigDecimal svcCrRebilPk, List<String> skipGrpSvcInvKeyList) {
    // END 2022/02/09 S.Kitamura [QC#59683, MOD]
    // END 2019/11/08 K.Kitachi [QC#54368, MOD]
    // END 2017/09/11 K.Kitachi [QC#20446, MOD]

        //TODO
        S21InfoLogOutput.println("[Test][archiveProcessForRegular]Start");

        // START 2018/06/29 K.Kojima [QC#23685-1,ADD]
        List<SVC_CONTR_BASE_BLLGTMsg> svcContrBaseBllgList = new ArrayList<SVC_CONTR_BASE_BLLGTMsg>();
        List<SVC_CONTR_MTR_BLLGTMsg> svcContrMtrBllgList = new ArrayList<SVC_CONTR_MTR_BLLGTMsg>();
        List<SVC_CONTR_XS_MTR_BLLGTMsg> svcContrXsMtrBllgList = new ArrayList<SVC_CONTR_XS_MTR_BLLGTMsg>();
        List<SVC_CONTR_ADDL_CHRG_BLLGTMsg> svcContrAddlChrgBllgList = new ArrayList<SVC_CONTR_ADDL_CHRG_BLLGTMsg>();
        List<SVC_CONTR_BLLG_ALLOCTMsg> svcContrBllgAllocList = new ArrayList<SVC_CONTR_BLLG_ALLOCTMsg>();
        List<SVC_CONTR_BLLGTMsg> svcContrBllgList = new ArrayList<SVC_CONTR_BLLGTMsg>();
        List<CONTR_BASE_BLLG_TRKTMsg> contrBaseBllgTrkList = new ArrayList<CONTR_BASE_BLLG_TRKTMsg>();
        List<CONTR_MTR_BLLG_TRKTMsg> contrMtrBllgTrkList = new ArrayList<CONTR_MTR_BLLG_TRKTMsg>();
        List<CONTR_XS_MTR_BLLG_TRKTMsg> contrXsMtrBllgTrkList = new ArrayList<CONTR_XS_MTR_BLLG_TRKTMsg>();
        List<CONTR_ADDL_CHRG_BLLG_TRKTMsg> contrAddlChrgBllgTrkList = new ArrayList<CONTR_ADDL_CHRG_BLLG_TRKTMsg>();
        List<CONTR_BLLG_ALLOC_TRKTMsg> contrBllgAllocTrkList = new ArrayList<CONTR_BLLG_ALLOC_TRKTMsg>();
        List<CONTR_BLLG_TRKTMsg> contrLbllgTrkList = new ArrayList<CONTR_BLLG_TRKTMsg>();;
        // END 2018/06/29 K.Kojima [QC#23685-1,ADD]

        for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
            // START 2017/09/11 K.Kitachi [QC#20446, MOD]
            // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
            // if (isMtrHldForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) {
            // START 2022/02/09 S.Kitamura [QC#59683, MOD]
            // if (isUnbllblForTogether(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
            if (isUnbllblForTogether(allLineTogetherFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
            // END 2022/02/09 S.Kitamura [QC#59683, MOD]
            // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
                continue;
            }

            // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
            // if (isMtrHldForSeparate(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("MTR_HLD_FLG"), svcCrRebilPk)) {
            //     if (ZYPConstant.FLG_ON_Y.equals((String) dsContrDtlInfo.get("USG_CHRG_FLG"))) {
            //         continue;
            //     }
            // }
            // START 2022/02/09 S.Kitamura [QC#59683, MOD]
            // if (isUnbllblForSeparate(invSeptBaseUsgFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
            if (isUnbllblForSeparate(allLineTogetherFlg, (String) dsContrDtlInfo.get("DS_CONTR_CTRL_STS_CD"), (String) dsContrDtlInfo.get("BLLBL_FLG"), svcCrRebilPk)) {
            // END 2022/02/09 S.Kitamura [QC#59683, MOD]
                continue;
            }
            // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
            // END 2017/09/11 K.Kitachi [QC#20446, MOD]

            BigDecimal prntSvcContrBllgPk = (BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK");
            // START 2019/11/08 K.Kitachi [QC#54368, ADD]
            SVC_CONTR_BLLGTMsg svcContrBllgTMsg = getSvcContrBllg(prntSvcContrBllgPk);
            String grpSvcInvKey = createGrpSvcInvKey(svcContrBllgTMsg);
            if(skipGrpSvcInvKeyList.contains(grpSvcInvKey)){
                continue;
            }
            // END 2019/11/08 K.Kitachi [QC#54368, ADD]

            List<BigDecimal> svcContrBllgPkList = new ArrayList<BigDecimal>();
            svcContrBllgPkList.add(prntSvcContrBllgPk);

            // START 2018/08/03 K.Kojima [QC#27510,DEL]
            // List<BigDecimal> childPkList = getChildSvcContrBllgPkList(prntSvcContrBllgPk);
            // if (!childPkList.isEmpty()) {
            //     svcContrBllgPkList.addAll(childPkList);
            // }
            // END 2018/08/03 K.Kojima [QC#27510,DEL]

            if (DS_CONTR_CATG.AGGREGATE.equals((String) dsContrDtlInfo.get("DS_CONTR_CATG_CD"))) {
                prntSvcContrBllgPk = (BigDecimal) dsContrDtlInfo.get("PRNT_SVC_CONTR_BLLG_PK");
                if (ZYPCommonFunc.hasValue(prntSvcContrBllgPk) && !svcContrBllgPkList.contains(prntSvcContrBllgPk)) {
                    svcContrBllgPkList.add(prntSvcContrBllgPk);
                }
            }

            for (BigDecimal svcContrBllgPk : svcContrBllgPkList) {
                // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
                // archiveSvcContrBaseBllg(svcContrBllgPk);
                // archiveSvcContrMtrBllg(svcContrBllgPk);
                // archiveSvcContrXsMtrBllg(svcContrBllgPk);
                // archiveSvcContrAddlChrgBllg(svcContrBllgPk);
                // archiveSvcContrBllgAlloc(svcContrBllgPk);
                // archiveSvcContrBllg(svcContrBllgPk);
                archiveSvcContrBaseBllg(svcContrBllgPk, svcContrBaseBllgList, contrBaseBllgTrkList);
                archiveSvcContrMtrBllg(svcContrBllgPk, svcContrMtrBllgList, contrMtrBllgTrkList);
                archiveSvcContrXsMtrBllg(svcContrBllgPk, svcContrXsMtrBllgList, contrXsMtrBllgTrkList);
                // START 2022/05/23 K.Kitachi [QC#60054, DEL]
//                archiveSvcContrAddlChrgBllg(svcContrBllgPk, svcContrAddlChrgBllgList, contrAddlChrgBllgTrkList);
                // END 2022/05/23 K.Kitachi [QC#60054, ADD]
                archiveSvcContrBllgAlloc(svcContrBllgPk, svcContrBllgAllocList, contrBllgAllocTrkList);
                archiveSvcContrBllg(svcContrBllgPk, svcContrBllgList, contrLbllgTrkList);
                // END 2018/06/29 K.Kojima [QC#23685-1,MOD]
            }

            // START 2022/05/23 K.Kitachi [QC#60054, ADD]
            List<BigDecimal> addlChrgPkList = getAddlChrgSvcContrBllgPkList(prntSvcContrBllgPk);
            for (BigDecimal addlChrgPk : addlChrgPkList) {
                archiveSvcContrAddlChrgBllg(addlChrgPk, svcContrAddlChrgBllgList, contrAddlChrgBllgTrkList);
                archiveSvcContrBllgAlloc(addlChrgPk, svcContrBllgAllocList, contrBllgAllocTrkList);
                archiveSvcContrBllg(addlChrgPk, svcContrBllgList, contrLbllgTrkList);
            }
            // END 2022/05/23 K.Kitachi [QC#60054, ADD]
        }

        // START 2018/06/29 K.Kojima [QC#23685-1,ADD]
        insertContrBllgTrk(contrBaseBllgTrkList, contrMtrBllgTrkList, contrXsMtrBllgTrkList, contrAddlChrgBllgTrkList, contrBllgAllocTrkList, contrLbllgTrkList);
        removeSvcContrBllg(svcContrBaseBllgList, svcContrMtrBllgList, svcContrXsMtrBllgList, svcContrAddlChrgBllgList, svcContrBllgAllocList, svcContrBllgList);
        // END 2018/06/29 K.Kojima [QC#23685-1,ADD]

        //TODO
        S21InfoLogOutput.println("[Test][archiveProcessForRegular]End");
    }
    // END 2017/09/06 M.Kidokoro [QC#20079, ADD]

    // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
    // private void archiveSvcContrBaseBllg(BigDecimal svcContrBllgPk) {
    private void archiveSvcContrBaseBllg(BigDecimal svcContrBllgPk, List<SVC_CONTR_BASE_BLLGTMsg> svcContrBaseBllgList, List<CONTR_BASE_BLLG_TRKTMsg> contrBaseBllgTrkList) {
    // END 2018/06/29 K.Kojima [QC#23685-1,MOD]

        List<BigDecimal> pkList = getSvcContrBaseBllgPkList(svcContrBllgPk);
        for (BigDecimal pk : pkList) {

            SVC_CONTR_BASE_BLLGTMsg inTMsg = new SVC_CONTR_BASE_BLLGTMsg();
            setValue(inTMsg.glblCmpyCd, glblCmpyCd);
            setValue(inTMsg.svcContrBaseBllgPk, pk);
            S21FastTBLAccessor.findByKeyForUpdate(inTMsg);

            if (inTMsg == null) {
                return;
            }
            CONTR_BASE_BLLG_TRKTMsg trkTMsg = new CONTR_BASE_BLLG_TRKTMsg();
            EZDMsg.copy(inTMsg, null, trkTMsg, null);
            BigDecimal trkPk = ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqConstant.CONTR_BASE_BLLG_TRK_SQ);
            ZYPEZDItemValueSetter.setValue(trkTMsg.contrBaseBllgTrkPk, trkPk);

            // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
            // S21FastTBLAccessor.insert(trkTMsg);
            // if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(trkTMsg.getReturnCode())) {
            //     throw new S21AbendException(NSZM0398E, new String[] {"CONTR_BASE_BLLG_TRK" });
            // }
            contrBaseBllgTrkList.add(trkTMsg);
            // END 2018/06/29 K.Kojima [QC#23685-1,MOD]

            // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
            // EZDTBLAccessor.logicalRemove(inTMsg);
            // if (!EZDTBLAccessor.RTNCD_NORMAL.equals(inTMsg.getReturnCode())) {
            //     throw new S21AbendException(NSAM0033E, new String[] {"SVC_CONTR_BASE_BLLG" });
            // }
            svcContrBaseBllgList.add(inTMsg);
            // END 2018/06/29 K.Kojima [QC#23685-1,MOD]
        }
    }

    // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
    // private void archiveSvcContrMtrBllg(BigDecimal svcContrBllgPk) {
    private void archiveSvcContrMtrBllg(BigDecimal svcContrBllgPk, List<SVC_CONTR_MTR_BLLGTMsg> svcContrMtrBllgList, List<CONTR_MTR_BLLG_TRKTMsg> contrMtrBllgTrkList) {
    // END 2018/06/29 K.Kojima [QC#23685-1,MOD]

        List<BigDecimal> pkList = getSvcContrMtrBllgPkList(svcContrBllgPk);
        for (BigDecimal pk : pkList) {

            SVC_CONTR_MTR_BLLGTMsg inTMsg = new SVC_CONTR_MTR_BLLGTMsg();
            setValue(inTMsg.glblCmpyCd, glblCmpyCd);
            setValue(inTMsg.svcContrMtrBllgPk, pk);
            S21FastTBLAccessor.findByKeyForUpdate(inTMsg);

            if (inTMsg == null) {
                return;
            }
            CONTR_MTR_BLLG_TRKTMsg trkTMsg = new CONTR_MTR_BLLG_TRKTMsg();
            EZDMsg.copy(inTMsg, null, trkTMsg, null);
            BigDecimal trkPk = ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqConstant.CONTR_MTR_BLLG_TRK_SQ);
            ZYPEZDItemValueSetter.setValue(trkTMsg.contrMtrBllgTrkPk, trkPk);

            // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
            // S21FastTBLAccessor.insert(trkTMsg);
            // if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(trkTMsg.getReturnCode())) {
            //     throw new S21AbendException(NSZM0398E, new String[] {"CONTR_MTR_BLLG_TRK" });
            // }
            contrMtrBllgTrkList.add(trkTMsg);
            // END 2018/06/29 K.Kojima [QC#23685-1,MOD]

            // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
            // EZDTBLAccessor.logicalRemove(inTMsg);
            // if (!EZDTBLAccessor.RTNCD_NORMAL.equals(inTMsg.getReturnCode())) {
            //     throw new S21AbendException(NSAM0033E, new String[] {"SVC_CONTR_MTR_BLLG" });
            // }
            svcContrMtrBllgList.add(inTMsg);
            // END 2018/06/29 K.Kojima [QC#23685-1,MOD]
        }
    }

    // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
    // private void archiveSvcContrXsMtrBllg(BigDecimal svcContrBllgPk) {
    private void archiveSvcContrXsMtrBllg(BigDecimal svcContrBllgPk, List<SVC_CONTR_XS_MTR_BLLGTMsg> svcContrXsMtrBllgList, List<CONTR_XS_MTR_BLLG_TRKTMsg> contrXsMtrBllgTrkList) {
    // END 2018/06/29 K.Kojima [QC#23685-1,MOD]

        List<BigDecimal> pkList = getSvcContrXsMtrBllgPkList(svcContrBllgPk);
        for (BigDecimal pk : pkList) {

            SVC_CONTR_XS_MTR_BLLGTMsg inTMsg = new SVC_CONTR_XS_MTR_BLLGTMsg();
            setValue(inTMsg.glblCmpyCd, glblCmpyCd);
            setValue(inTMsg.svcContrXsMtrBllgPk, pk);
            S21FastTBLAccessor.findByKeyForUpdate(inTMsg);

            if (inTMsg == null) {
                return;
            }
            CONTR_XS_MTR_BLLG_TRKTMsg trkTMsg = new CONTR_XS_MTR_BLLG_TRKTMsg();
            EZDMsg.copy(inTMsg, null, trkTMsg, null);
            BigDecimal trkPk = ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqConstant.CONTR_XS_MTR_BLLG_TRK_SQ);
            ZYPEZDItemValueSetter.setValue(trkTMsg.contrXsMtrBllgTrkPk, trkPk);

            // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
            // S21FastTBLAccessor.insert(trkTMsg);
            // if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(trkTMsg.getReturnCode())) {
            //     throw new S21AbendException(NSZM0398E, new String[] {"CONTR_XS_MTR_BLLG_TRK" });
            // }
            contrXsMtrBllgTrkList.add(trkTMsg);
            // END 2018/06/29 K.Kojima [QC#23685-1,MOD]

            // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
            // EZDTBLAccessor.logicalRemove(inTMsg);
            // if (!EZDTBLAccessor.RTNCD_NORMAL.equals(inTMsg.getReturnCode())) {
            //     throw new S21AbendException(NSAM0033E, new String[] {"SVC_CONTR_XS_MTR_BLLG" });
            // }
            svcContrXsMtrBllgList.add(inTMsg);
            // END 2018/06/29 K.Kojima [QC#23685-1,MOD]
        }
    }

    // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
    // private void archiveSvcContrAddlChrgBllg(BigDecimal svcContrBllgPk) {
    private void archiveSvcContrAddlChrgBllg(BigDecimal svcContrBllgPk, List<SVC_CONTR_ADDL_CHRG_BLLGTMsg> svcContrAddlChrgBllgList, List<CONTR_ADDL_CHRG_BLLG_TRKTMsg> contrAddlChrgBllgTrkList) {
    // END 2018/06/29 K.Kojima [QC#23685-1,MOD]

        List<BigDecimal> pkList = getSvcContrAddlChrgBllgPkList(svcContrBllgPk);
        for (BigDecimal pk : pkList) {

            SVC_CONTR_ADDL_CHRG_BLLGTMsg inTMsg = new SVC_CONTR_ADDL_CHRG_BLLGTMsg();
            setValue(inTMsg.glblCmpyCd, glblCmpyCd);
            setValue(inTMsg.svcContrAddlChrgBllgPk, pk);
            S21FastTBLAccessor.findByKeyForUpdate(inTMsg);

            if (inTMsg == null) {
                return;
            }
            CONTR_ADDL_CHRG_BLLG_TRKTMsg trkTMsg = new CONTR_ADDL_CHRG_BLLG_TRKTMsg();
            EZDMsg.copy(inTMsg, null, trkTMsg, null);
            BigDecimal trkPk = ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqConstant.CONTR_ADDL_CHRG_BLLG_TRK_SQ);
            ZYPEZDItemValueSetter.setValue(trkTMsg.contrAddlChrgBllgTrkPk, trkPk);

            // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
            // S21FastTBLAccessor.insert(trkTMsg);
            // if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(trkTMsg.getReturnCode())) {
            //     throw new S21AbendException(NSZM0398E, new String[] {"CONTR_ADDL_CHRG_BLLG_TRK" });
            // }
            contrAddlChrgBllgTrkList.add(trkTMsg);
            // END 2018/06/29 K.Kojima [QC#23685-1,MOD]

            // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
            // EZDTBLAccessor.logicalRemove(inTMsg);
            // if (!EZDTBLAccessor.RTNCD_NORMAL.equals(inTMsg.getReturnCode())) {
            //     throw new S21AbendException(NSAM0033E, new String[] {"SVC_CONTR_ADDL_CHRG_BLLG" });
            // }
            svcContrAddlChrgBllgList.add(inTMsg);
            // END 2018/06/29 K.Kojima [QC#23685-1,MOD]
        }
    }

    // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
    // private void archiveSvcContrBllgAlloc(BigDecimal svcContrBllgPk) {
    private void archiveSvcContrBllgAlloc(BigDecimal svcContrBllgPk, List<SVC_CONTR_BLLG_ALLOCTMsg> svcContrBllgAllocList, List<CONTR_BLLG_ALLOC_TRKTMsg> contrBllgAllocTrkList) {
    // END 2018/06/29 K.Kojima [QC#23685-1,MOD]

        List<BigDecimal> pkList = getSvcContrBllgAllocPkList(svcContrBllgPk);
        for (BigDecimal pk : pkList) {

            SVC_CONTR_BLLG_ALLOCTMsg inTMsg = new SVC_CONTR_BLLG_ALLOCTMsg();
            setValue(inTMsg.glblCmpyCd, glblCmpyCd);
            setValue(inTMsg.svcContrBllgAllocPk, pk);
            S21FastTBLAccessor.findByKeyForUpdate(inTMsg);

            if (inTMsg == null) {
                return;
            }
            CONTR_BLLG_ALLOC_TRKTMsg trkTMsg = new CONTR_BLLG_ALLOC_TRKTMsg();
            EZDMsg.copy(inTMsg, null, trkTMsg, null);
            BigDecimal trkPk = ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqConstant.CONTR_BLLG_ALLOC_TRK_SQ);
            ZYPEZDItemValueSetter.setValue(trkTMsg.contrBllgAllocTrkPk, trkPk);

            // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
            // S21FastTBLAccessor.insert(trkTMsg);
            // if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(trkTMsg.getReturnCode())) {
            //     throw new S21AbendException(NSZM0398E, new String[] {"CONTR_BLLG_ALLOC_TRK" });
            // }
            contrBllgAllocTrkList.add(trkTMsg);
            // END 2018/06/29 K.Kojima [QC#23685-1,MOD]

            // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
            // EZDTBLAccessor.logicalRemove(inTMsg);
            // if (!EZDTBLAccessor.RTNCD_NORMAL.equals(inTMsg.getReturnCode())) {
            //     throw new S21AbendException(NSAM0033E, new String[] {"SVC_CONTR_BLLG_ALLOC" });
            // }
            svcContrBllgAllocList.add(inTMsg);
            // END 2018/06/29 K.Kojima [QC#23685-1,MOD]
        }
    }

    // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
    // private void archiveSvcContrBllg(BigDecimal pk) {
    private void archiveSvcContrBllg(BigDecimal pk, List<SVC_CONTR_BLLGTMsg> svcContrBllgList, List<CONTR_BLLG_TRKTMsg> contrLbllgTrkList) {
    // END 2018/06/29 K.Kojima [QC#23685-1,MOD]

        SVC_CONTR_BLLGTMsg inTMsg = new SVC_CONTR_BLLGTMsg();
        setValue(inTMsg.glblCmpyCd, glblCmpyCd);
        setValue(inTMsg.svcContrBllgPk, pk);
        //Mod Start 03/23/2016 <QC#5863>
        inTMsg = (SVC_CONTR_BLLGTMsg) S21FastTBLAccessor.findByKeyForUpdate(inTMsg);
        //Mod End   03/23/2016 <QC#5863>

        if (inTMsg == null) {
            return;
        }
        CONTR_BLLG_TRKTMsg trkTMsg = new CONTR_BLLG_TRKTMsg();
        EZDMsg.copy(inTMsg, null, trkTMsg, null);
        BigDecimal trkPk = ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqConstant.CONTR_BLLG_TRK_SQ);
        ZYPEZDItemValueSetter.setValue(trkTMsg.contrBllgTrkPk, trkPk);

        // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
        // S21FastTBLAccessor.insert(trkTMsg);
        // if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(trkTMsg.getReturnCode())) {
        //     throw new S21AbendException(NSZM0398E, new String[] {"CONTR_BLLG_TRK" });
        // }
        contrLbllgTrkList.add(trkTMsg);
        // END 2018/06/29 K.Kojima [QC#23685-1,MOD]

        // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
        // EZDTBLAccessor.logicalRemove(inTMsg);
        // if (!EZDTBLAccessor.RTNCD_NORMAL.equals(inTMsg.getReturnCode())) {
        //     throw new S21AbendException(NSAM0033E, new String[] {"SVC_CONTR_BLLG" });
        // }
        svcContrBllgList.add(inTMsg);
        // END 2018/06/29 K.Kojima [QC#23685-1,MOD]
    }

    // START 04/11/2016 T.Aoyagi [QC#6510, ADD]
    private boolean callCrRebilApi(String dsContrCatgCd, String svcInvKey, SVC_INVTMsg svcInvTMsg) {

        if (svcInvTMsg == null || !hasValue(svcInvTMsg.svcCrRebilPk)) {
            return true;
        }

        NSZC053001PMsg apiPMsg = new NSZC053001PMsg();
        setValue(apiPMsg.glblCmpyCd, svcInvTMsg.glblCmpyCd);
        setValue(apiPMsg.xxModeCd, NSZC053001Constant.MODE_INVOICING_FROM_BILLING);
        setValue(apiPMsg.slsDt, this.slsDt);
        setValue(apiPMsg.svcCrRebilPk, svcInvTMsg.svcCrRebilPk);
        setValue(apiPMsg.xxCrRebilDtlList.no(0).svcCrRebilDtlPk, svcInvTMsg.svcCrRebilDtlPk);

        if (INV_TP.CREDIT_MEMO.equals(svcInvTMsg.invTpCd.getValue())) {
            setValue(apiPMsg.xxCrRebilDtlList.no(0).crSvcInvNum, svcInvTMsg.svcInvNum);
        } else {
            setValue(apiPMsg.xxCrRebilDtlList.no(0).rebilSvcInvNum, svcInvTMsg.svcInvNum);
        }
        apiPMsg.xxCrRebilDtlList.setValidCount(1);

        NSZC053001 api = new NSZC053001();
        api.execute(apiPMsg, ONBATCH_TYPE.BATCH);
        if (apiPMsg.xxMsgIdList.getValidCount() > 0) {
            Key key = new Key();
            key.add("SVC_CR_REBIL_PK", svcInvTMsg.svcCrRebilPk.getValue());
            key.add("SVC_CR_REBIL_DTL_PK", svcInvTMsg.svcCrRebilDtlPk.getValue());

            List<String> msgIdList = S21ApiUtil.getXxMsgIdList(apiPMsg);
            for (String msgId : msgIdList) {
                addMessage(dsContrCatgCd, svcInvKey, 1, NSZM0407E, "NSZC053001", S21MessageFunc.clspGetMessage(msgId), key.toString());
            }
            return false;
        }
        return true;
    }
    // END 04/11/2016 T.Aoyagi [QC#6510, ADD]

    //Mod Start 05/27/2016 <QC#8335>
    private boolean recalcSvcAlloc(List<Map<String, Object>> dsContrDtlInfoList, String svcInvKey) {

        this.ccyCode = (String) dsContrDtlInfoList.get(0).get("CCY_CD");

        // START 2018/06/29 K.Kojima [QC#23685-1,ADD]
        List<SVC_CONTR_BLLG_ALLOCTMsg> removeList = new ArrayList<SVC_CONTR_BLLG_ALLOCTMsg>();
        for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
            BigDecimal svcContrBllgPk = (BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK");
            removeSvcAlloc(svcContrBllgPk, removeList);
        }
        if (removeList.size() > 0) {
            int result = S21FastTBLAccessor.removeLogical(removeList.toArray(new SVC_CONTR_BLLG_ALLOCTMsg[removeList.size()]));
            if (result != removeList.size()) {
                throw new S21AbendException(NSAM0033E, new String[] {"SVC_CONTR_BLLG_ALLOC" });
            }
        }
        // END 2018/06/29 K.Kojima [QC#23685-1,ADD]

        for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {

            BigDecimal dsContrPk = (BigDecimal) dsContrDtlInfo.get("DS_CONTR_PK");
            BigDecimal svcContrBllgPk = (BigDecimal) dsContrDtlInfo.get("SVC_CONTR_BLLG_PK");
            SVC_CONTR_BLLGTMsg svcContrBllgTMsg = getSvcContrBllg(svcContrBllgPk);
            if (svcContrBllgTMsg == null) {
                continue;
            }

            // START 2018/06/29 K.Kojima [QC#23685-1,DEL]
            // removeSvcAlloc(svcContrBllgPk);
            // END 2018/06/29 K.Kojima [QC#23685-1,DEL]

            if (ZYPConstant.FLG_ON_Y.equals(svcContrBllgTMsg.baseChrgFlg.getValue())) {

                SVC_CONTR_BASE_BLLGTMsgArray svcContrBaseBllgTMsgArray = getSvcContrBaseBllgList(svcContrBllgPk);
                for (int i = 0; i < svcContrBaseBllgTMsgArray.length(); i++) {
                    SVC_CONTR_BASE_BLLGTMsg svcContrBaseBllgTMsg = svcContrBaseBllgTMsgArray.no(i);
                    // SVC_CONTR_BLLG_ALLOC
                    if (!insertSvcContrBllgAllocForBase(dsContrDtlInfo, svcContrBaseBllgTMsg, svcContrBllgTMsg.dsContrCatgCd.getValue(), svcInvKey)) {
                        Key key = new Key();
                        key.add("DS_CONTR_PK", dsContrPk);
                        key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                        addMessage(svcContrBllgTMsg.dsContrCatgCd.getValue(), svcInvKey, 1, NSZM0398E, "SVC_CONTR_BLLG_ALLOC", key.toString());
                        return false;
                    }

                    List<Map<String, BigDecimal>> addlChrgBllgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                    for (Map<String, BigDecimal> addlChrgBllgInfo : addlChrgBllgInfoList) {
                        BigDecimal addlChrgBllgPk = addlChrgBllgInfo.get("SVC_CONTR_ADDL_CHRG_BLLG_PK");
                        SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg = getSvcContrAddlChrgBllgTMsg(addlChrgBllgPk);
                        // SVC_CONTR_BLLG_ALLOC
                        if (!insertSvcContrBllgAllocForAddl(dsContrDtlInfo, svcContrAddlChrgBllgTMsg, svcContrBllgTMsg.dsContrCatgCd.getValue(), svcInvKey)) {
                            Key key = new Key();
                            key.add("DS_CONTR_PK", dsContrPk);
                            key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                            key.add("SVC_CONTR_ADDL_CHRG_BLLG_PK", addlChrgBllgPk);
                            addMessage(svcContrBllgTMsg.dsContrCatgCd.getValue(), svcInvKey, 1, NSZM0398E, "SVC_CONTR_BLLG_ALLOC", key.toString());
                            return false;
                        }
                    }
                }
            } else {
                SVC_CONTR_MTR_BLLGTMsgArray svcContrMtrBllgTMsgArray = getSvcContrMtrBllgList(svcContrBllgPk);
                for (int i = 0; i < svcContrMtrBllgTMsgArray.length(); i++) {
                    SVC_CONTR_MTR_BLLGTMsg svcContrMtrBllgTMsg = svcContrMtrBllgTMsgArray.no(i);
                    // SVC_CONTR_BLLG_ALLOC
                    if (!insertSvcContrBllgAllocForMtr(dsContrDtlInfo, svcContrMtrBllgTMsg, svcContrBllgTMsg.dsContrCatgCd.getValue(), svcInvKey)) {
                        Key key = new Key();
                        key.add("DS_CONTR_PK", dsContrPk);
                        key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                        addMessage(svcContrBllgTMsg.dsContrCatgCd.getValue(), svcInvKey, 1, NSZM0398E, "SVC_CONTR_BLLG_ALLOC", key.toString());
                        return false;
                    }

                    List<Map<String, BigDecimal>> addlChrgBllgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
                    for (Map<String, BigDecimal> addlChrgBllgInfo : addlChrgBllgInfoList) {
                        BigDecimal addlChrgBllgPk = addlChrgBllgInfo.get("SVC_CONTR_ADDL_CHRG_BLLG_PK");
                        SVC_CONTR_ADDL_CHRG_BLLGTMsg svcContrAddlChrgBllgTMsg = getSvcContrAddlChrgBllgTMsg(addlChrgBllgPk);
                        // SVC_CONTR_BLLG_ALLOC
                        if (!insertSvcContrBllgAllocForAddl(dsContrDtlInfo, svcContrAddlChrgBllgTMsg,  svcContrBllgTMsg.dsContrCatgCd.getValue(), svcInvKey)) {
                            Key key = new Key();
                            key.add("DS_CONTR_PK", dsContrPk);
                            key.add("SVC_CONTR_BLLG_PK", svcContrBllgPk);
                            key.add("SVC_CONTR_ADDL_CHRG_BLLG_PK", addlChrgBllgPk);
                            addMessage(svcContrBllgTMsg.dsContrCatgCd.getValue(), svcInvKey, 1, NSZM0398E, "SVC_CONTR_BLLG_ALLOC", key.toString());
                            return false;
                        }
                    }
                }
            }
        }

        return true;
    }
    //Mod End   05/27/2016 <QC#8335>

    // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
    private void removeSvcAlloc(BigDecimal svcContrBllgPk, List<SVC_CONTR_BLLG_ALLOCTMsg> removeList) {
    // END 2018/06/29 K.Kojima [QC#23685-1,MOD]

        List<BigDecimal> pkList = getSvcContrBllgAllocPkList(svcContrBllgPk);
        for (BigDecimal pk : pkList) {
            SVC_CONTR_BLLG_ALLOCTMsg inTMsg = new SVC_CONTR_BLLG_ALLOCTMsg();
            setValue(inTMsg.glblCmpyCd, glblCmpyCd);
            setValue(inTMsg.svcContrBllgAllocPk, pk);
            S21FastTBLAccessor.findByKeyForUpdate(inTMsg);
            if (inTMsg == null) {
                continue;
            }
            // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
            // EZDTBLAccessor.logicalRemove(inTMsg);
            // if (!EZDTBLAccessor.RTNCD_NORMAL.equals(inTMsg.getReturnCode())) {
            //     throw new S21AbendException(NSAM0033E, new String[] {"SVC_CONTR_BLLG_ALLOC" });
            // }
            removeList.add(inTMsg);
            // END 2018/06/29 K.Kojima [QC#23685-1,MOD]
        }

        List<Map<String, BigDecimal>> addlChrgBllgInfoList = getSvcContrAddlChrgBllgInfo(svcContrBllgPk);
        for (Map<String, BigDecimal> addlChrgBllgInfo : addlChrgBllgInfoList) {
            BigDecimal addlSvcContrBllgPk = addlChrgBllgInfo.get("SVC_CONTR_BLLG_PK");
            List<BigDecimal> addlPkList = getSvcContrBllgAllocPkList(addlSvcContrBllgPk);

            for (BigDecimal addlPk : addlPkList) {
                SVC_CONTR_BLLG_ALLOCTMsg inTMsg = new SVC_CONTR_BLLG_ALLOCTMsg();
                setValue(inTMsg.glblCmpyCd, glblCmpyCd);
                setValue(inTMsg.svcContrBllgAllocPk, addlPk);
                S21FastTBLAccessor.findByKeyForUpdate(inTMsg);
                if (inTMsg == null) {
                    continue;
                }
                // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
                // EZDTBLAccessor.logicalRemove(inTMsg);
                // if (!EZDTBLAccessor.RTNCD_NORMAL.equals(inTMsg.getReturnCode())) {
                //     throw new S21AbendException(NSAM0033E, new String[] {"SVC_CONTR_BLLG_ALLOC" });
                // }
                removeList.add(inTMsg);
                // END 2018/06/29 K.Kojima [QC#23685-1,MOD]
            }
        }
    }

    //Mod Start 05/27/2016 <QC#8335>
    private boolean insertSvcContrBllgAllocForBase(Map<String, Object> rsltSchdMap, SVC_CONTR_BASE_BLLGTMsg orgBllgTmsg, String dsContrCatgCd, String svcInvKey) {
        // Mod Start 2018/09/20 QC#28171
        List<GetDefCoaTrxCdForOutListInfoBean> allocList = getAllocList(rsltSchdMap, (String) rsltSchdMap.get("SVC_PGM_MDSE_CD"), SVC_INV_CHRG_TP.BASE_CHARGE, SVC_INV_CHRG_TP.BASE_CHARGE);
        // Mod End 2018/09/20 QC#28171
        if (allocList.size() == 0) {
            GetDefCoaTrxCdInfoBean bean = new GetDefCoaTrxCdInfoBean();
            bean.setGlblCmpyCd(orgBllgTmsg.glblCmpyCd.getValue());
            bean.setSvcMachMstrPk((BigDecimal) rsltSchdMap.get("SVC_MACH_MSTR_PK"));
            bean.setDsContrDtlPk((BigDecimal) rsltSchdMap.get("DS_CONTR_DTL_PK"));
            bean.setMdseCd((String) rsltSchdMap.get("SVC_PGM_MDSE_CD"));
            bean.setDsAcctNum((String) rsltSchdMap.get("DS_ACCT_NUM"));
            bean.setBaseChrgFlg(FLG_ON_Y);
            bean.setUsgChrgFlg(FLG_OFF_N);
            bean.setAddlChrgFlg(FLG_OFF_N);
            // START 2018/07/04 K.Kojima [QC#23685-1,ADD]
            setGetDefCoaTrxCdInfoBeanOtherData(bean);
            // END 2018/07/04 K.Kojima [QC#23685-1,ADD]
            // START 2018/07/09 K.Kojima [QC#23685-1,ADD]
            if (hasValue(bean.getSvcMachMstrPk())) {
                bean.setMdlId((BigDecimal) rsltSchdMap.get("MDL_ID"));
            }
            // END 2018/07/09 K.Kojima [QC#23685-1,ADD]
            if (NSXC004001GetDefCoaTrxCd.getDefCoaTrxCd(bean) != null) {
                allocList = bean.getOutLisstInfoBean();

                // START 2017/07/04 T.Kanasaka [QC#19662, ADD]
                allocList = mergeBrAlloc(rsltSchdMap, SVC_INV_CHRG_TP.BASE_CHARGE, allocList);
                // END 2017/07/04 T.Kanasaka [QC#19662, ADD]
            }
        }
        if (allocList.size() == 0) {
            addMessage(dsContrCatgCd, svcInvKey, 1, NSAM0610E, ((BigDecimal) rsltSchdMap.get("DS_CONTR_DTL_PK")).toString(), orgBllgTmsg.svcContrBllgPk.getValue().toString());
            return false;
        }
        // add start 2017/06/23 CSA Defect#18699
        changeAllocListTrxCd(allocList, rsltSchdMap, SVC_INV_CHRG_TP.BASE_CHARGE, null);
        // add end 2017/06/23 CSA Defect#18699

        List<SVC_CONTR_BLLG_ALLOCTMsg> listTmsg = new ArrayList<SVC_CONTR_BLLG_ALLOCTMsg>();
        SVC_CONTR_BLLG_ALLOCTMsg maxAllocTmsg = null;
        BigDecimal maxBllgAmt = BigDecimal.ZERO;
        BigDecimal bllgAmt = orgBllgTmsg.baseDealAmt.getValue();
        BigDecimal bllgDiscAmt = orgBllgTmsg.baseDiscDealAmt.getValue();
        BigDecimal totAmt = BigDecimal.ZERO;
        BigDecimal totDiscAmt = BigDecimal.ZERO;
        BigDecimal slsAllocRate = BigDecimal.ZERO;
        BigDecimal aftDeclPntDigitNum = (BigDecimal) rsltSchdMap.get("AFT_DECL_PNT_DIGIT_NUM");
        int scale = aftDeclPntDigitNum.intValue();
        // START 2018/04/12 M.Naito [QC#23378,ADD]
        BigDecimal totPrcAllocAmt = getTotPrcAllocAmt(allocList, scale);
        // END 2018/04/12 M.Naito [QC#23378,ADD]
        for (GetDefCoaTrxCdForOutListInfoBean outBean : allocList) {
            slsAllocRate = outBean.getPrcAllocPct();
            // START 2018/04/12 M.Naito [QC#23378,MOD]
            if (!hasValue(slsAllocRate) && !hasValue(outBean.getPrcAllocAmt())) {
                continue;
            }
            // END 2018/04/12 M.Naito [QC#23378,MOD]
            SVC_CONTR_BLLG_ALLOCTMsg inMsg = new SVC_CONTR_BLLG_ALLOCTMsg();
            setValue(inMsg.glblCmpyCd, this.glblCmpyCd);
            setValue(inMsg.svcContrBllgAllocPk, (BigDecimal) ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqConstant.SVC_CONTR_BLLG_ALLOC_SQ));
            setValue(inMsg.svcContrBaseBllgPk, orgBllgTmsg.svcContrBaseBllgPk);
            setValue(inMsg.contrPrcAllocTpCd, CONTR_PRC_ALLOC_TP.BASE);
            setValue(inMsg.intgMdseCd, (String) rsltSchdMap.get("SVC_PGM_MDSE_CD"));
            setValue(inMsg.tocCd, (String) rsltSchdMap.get("TOC_CD"));
            setValue(inMsg.slsAllocRate, slsAllocRate);
            setValue(inMsg.dealGrsUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.dealDiscUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.dealNetUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.dealGrsTotPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.invLineDealNetAmt, BigDecimal.ZERO);
            setValue(inMsg.invLineDealTaxAmt, BigDecimal.ZERO);
            setValue(inMsg.funcGrsUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.funcDiscUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.funcNetUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.funcGrsTotPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.invLineFuncNetAmt, BigDecimal.ZERO);
            setValue(inMsg.invLineFuncTaxAmt, BigDecimal.ZERO);
            setValue(inMsg.coaCmpyCd, outBean.getCoaCmpyCd());
            setValue(inMsg.coaAfflCd, outBean.getCoaAfflCd());
            setValue(inMsg.coaBrCd, outBean.getCoaBrCd());
            setValue(inMsg.coaChCd, outBean.getCoaChCd());
            setValue(inMsg.coaCcCd, outBean.getCoaCcCd());
            setValue(inMsg.coaAcctCd, outBean.getCoaAcctCd());
            setValue(inMsg.coaProdCd, outBean.getCoaProdCd());
            setValue(inMsg.coaProjCd, outBean.getCoaProjCd());
            setValue(inMsg.coaExtnCd, outBean.getCoaExtnCd());
            setValue(inMsg.ccyCd, (String) rsltSchdMap.get("CCY_CD"));
            setValue(inMsg.svcContrBllgPk, orgBllgTmsg.svcContrBllgPk);
            setValue(inMsg.trxCd, outBean.getTrxCd());
            setValue(inMsg.trxRsnCd, outBean.getTrxRsnCd());
            setValue(inMsg.dfrdAcctgRuleCd, outBean.getDfrdAcctgRuleCd());
            setValue(inMsg.dfrdAcctgRuleDurnAot, outBean.getDfrdAcctgRuleDurnAot());

            // START 2018/04/12 M.Naito [QC#23378,MOD]
            if (hasValue(totPrcAllocAmt) && BigDecimal.ZERO.compareTo(totPrcAllocAmt) != 0) {
                calcAllocFromPrcAllocAmt(bllgAmt, bllgDiscAmt, totPrcAllocAmt, outBean.getPrcAllocAmt(), scale, inMsg, SVC_INV_CHRG_TP.BASE_CHARGE);
            } else {
                calcAlloc(bllgAmt, bllgDiscAmt, slsAllocRate, scale, inMsg);
            }
            // END 2018/04/12 M.Naito [QC#23378,MOD]
            if (maxAllocTmsg == null || maxBllgAmt.compareTo(inMsg.dealGrsUnitPrcAmt.getValue()) < 0) {
                maxAllocTmsg = inMsg;
                maxBllgAmt = inMsg.dealGrsUnitPrcAmt.getValue();
            }
            totAmt = totAmt.add(inMsg.dealGrsUnitPrcAmt.getValue());
            totDiscAmt = totDiscAmt.add(inMsg.dealDiscUnitPrcAmt.getValue());
            listTmsg.add(inMsg);
            // START 2016/06/20 T.Aoyagi [QC#9907, ADD]
            this.invLineSplTpMap.put(inMsg.svcContrBllgAllocPk.getValue(), outBean.getInvLineSplTpCd());
            // END 2016/06/20 T.Aoyagi [QC#9907, ADD]
        }
        if (bllgAmt.compareTo(totAmt) != 0 || bllgDiscAmt.compareTo(totDiscAmt) != 0) {
            BigDecimal adjBillAmt = bllgAmt.subtract(totAmt);
            BigDecimal adjDiscAmt = bllgDiscAmt.subtract(totDiscAmt);
            BigDecimal dealGrsUnitPrcAmt = maxAllocTmsg.dealGrsUnitPrcAmt.getValue();
            // mod start 2016/08/26 CSA Defect#13857
            BigDecimal dealDiscUnitPrcAmt = maxAllocTmsg.dealDiscUnitPrcAmt.getValue();
            // mod end 2016/08/26 CSA Defect#13857

            dealGrsUnitPrcAmt = dealGrsUnitPrcAmt.add(adjBillAmt);
            dealDiscUnitPrcAmt = dealDiscUnitPrcAmt.add(adjDiscAmt);
            setValue(maxAllocTmsg.dealGrsUnitPrcAmt, dealGrsUnitPrcAmt);
            setValue(maxAllocTmsg.dealDiscUnitPrcAmt, dealDiscUnitPrcAmt);
            setValue(maxAllocTmsg.dealNetUnitPrcAmt, dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt));
            setValue(maxAllocTmsg.dealGrsTotPrcAmt, dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt));
            setValue(maxAllocTmsg.invLineDealNetAmt, dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt));

            setValue(maxAllocTmsg.funcGrsUnitPrcAmt, calcFuncAmtFromDealAmt(dealGrsUnitPrcAmt));
            setValue(maxAllocTmsg.funcDiscUnitPrcAmt, calcFuncAmtFromDealAmt(dealDiscUnitPrcAmt));
            setValue(maxAllocTmsg.funcNetUnitPrcAmt, calcFuncAmtFromDealAmt(dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt)));
            setValue(maxAllocTmsg.funcGrsTotPrcAmt, calcFuncAmtFromDealAmt(dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt)));
            setValue(maxAllocTmsg.invLineFuncNetAmt, calcFuncAmtFromDealAmt(dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt)));
        }

        if (listTmsg.size() == 0) {
            return false;
        }

        for (SVC_CONTR_BLLG_ALLOCTMsg outTmsg : listTmsg) {
            S21FastTBLAccessor.create(outTmsg);
            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(outTmsg.getReturnCode())) {
                throw new S21AbendException(NSZM0398E, new String[] {"SVC_CONTR_BLLG_ALLOC" });
            }
        }

        return true;
    }

    private boolean insertSvcContrBllgAllocForMtr(Map<String, Object> rsltSchdMap, SVC_CONTR_MTR_BLLGTMsg orgBllgTmsg, String dsContrCatgCd, String svcInvKey) {
        //Mod Start 05/25/2016 <QC#8335>
//        List<GetDefCoaTrxCdForOutListInfoBean> allocList = getAllocList(rsltSchdMap, (String) rsltSchdMap.get("INTG_MDSE_CD"), SVC_INV_CHRG_TP.METER_CHARGE);
        // Mod Start 2018/09/20 QC#28171
        List<GetDefCoaTrxCdForOutListInfoBean> allocList = getAllocList(rsltSchdMap, (String) rsltSchdMap.get("SVC_PGM_MDSE_CD"), SVC_INV_CHRG_TP.METER_CHARGE, SVC_INV_CHRG_TP.METER_CHARGE);
        // Mod End 2018/09/20 QC#28171
        //Mod End   05/25/2016 <QC#8335>
        if (allocList.size() == 0) {
            GetDefCoaTrxCdInfoBean bean = new GetDefCoaTrxCdInfoBean();
            bean.setGlblCmpyCd(orgBllgTmsg.glblCmpyCd.getValue());
            bean.setSvcMachMstrPk((BigDecimal) rsltSchdMap.get("SVC_MACH_MSTR_PK"));
            bean.setDsContrDtlPk((BigDecimal) rsltSchdMap.get("DS_CONTR_DTL_PK"));
            //Mod Start 05/25/2016 <QC#8335>
//            bean.setMdseCd((String) rsltSchdMap.get("INTG_MDSE_CD"));
            bean.setMdseCd((String) rsltSchdMap.get("SVC_PGM_MDSE_CD"));
            //Mod End   05/25/2016 <QC#8335>
            bean.setDsAcctNum((String) rsltSchdMap.get("DS_ACCT_NUM"));
            bean.setBaseChrgFlg(FLG_OFF_N);
            bean.setUsgChrgFlg(FLG_ON_Y);
            bean.setAddlChrgFlg(FLG_OFF_N);
            bean.setDsContrBllgMtrPk(orgBllgTmsg.dsContrBllgMtrPk.getValue());
            // START 2018/07/03 K.Kojima [QC#23685-1,DEL]
            // NSXC004001GetDefCoaTrxCd.getDefCoaTrxCd(bean);
            // END 2018/07/03 K.Kojima [QC#23685-1,DEL]
            // START 2017/07/04 T.Kanasaka [QC#19662, MOD]
            // START 2018/07/04 K.Kojima [QC#23685-1,ADD]
            setGetDefCoaTrxCdInfoBeanOtherData(bean);
            // END 2018/07/04 K.Kojima [QC#23685-1,ADD]
            // START 2018/07/09 K.Kojima [QC#23685-1,ADD]
            if (hasValue(bean.getSvcMachMstrPk())) {
                bean.setMdlId((BigDecimal) rsltSchdMap.get("MDL_ID"));
            }
            // END 2018/07/09 K.Kojima [QC#23685-1,ADD]
            if (NSXC004001GetDefCoaTrxCd.getDefCoaTrxCd(bean) != null) {
                allocList = bean.getOutLisstInfoBean();

                allocList = mergeBrAlloc(rsltSchdMap, SVC_INV_CHRG_TP.METER_CHARGE, allocList);
            }
            // END 2017/07/04 T.Kanasaka [QC#19662, MOD]
        }
        if (allocList == null || allocList.size() == 0) {
            addMessage(dsContrCatgCd, svcInvKey, 1, NSAM0610E, ((BigDecimal) rsltSchdMap.get("DS_CONTR_DTL_PK")).toString(), orgBllgTmsg.svcContrBllgPk.getValue().toString());
            return false;
        }
        // add start 2017/06/23 CSA Defect#18699
        changeAllocListTrxCd(allocList, rsltSchdMap, SVC_INV_CHRG_TP.METER_CHARGE, null);
        // add end 2017/06/23 CSA Defect#18699

        List<SVC_CONTR_BLLG_ALLOCTMsg> listTmsg = new ArrayList<SVC_CONTR_BLLG_ALLOCTMsg>();
        SVC_CONTR_BLLG_ALLOCTMsg maxAllocTmsg = null;
        BigDecimal maxBllgAmt = BigDecimal.ZERO;
        BigDecimal bllgAmt = orgBllgTmsg.mtrChrgDealAmt.getValue();
        BigDecimal bllgDiscAmt = orgBllgTmsg.mtrChrgDiscDealAmt.getValue();
        BigDecimal totAmt = BigDecimal.ZERO;
        BigDecimal totDiscAmt = BigDecimal.ZERO;
        BigDecimal slsAllocRate = BigDecimal.ZERO;
        BigDecimal aftDeclPntDigitNum = (BigDecimal) rsltSchdMap.get("AFT_DECL_PNT_DIGIT_NUM");
        int scale = aftDeclPntDigitNum.intValue();
        for (GetDefCoaTrxCdForOutListInfoBean outBean : allocList) {
            slsAllocRate = outBean.getPrcAllocPct();
            if (!hasValue(slsAllocRate)) {
                continue;
            }
            SVC_CONTR_BLLG_ALLOCTMsg inMsg = new SVC_CONTR_BLLG_ALLOCTMsg();
            setValue(inMsg.glblCmpyCd, this.glblCmpyCd);
            setValue(inMsg.svcContrBllgAllocPk, (BigDecimal) ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqConstant.SVC_CONTR_BLLG_ALLOC_SQ));
            setValue(inMsg.svcContrMtrBllgPk, orgBllgTmsg.svcContrMtrBllgPk);
            setValue(inMsg.contrPrcAllocTpCd, CONTR_PRC_ALLOC_TP.USAGE);
            setValue(inMsg.intgMdseCd, (String) rsltSchdMap.get("SVC_PGM_MDSE_CD"));
            setValue(inMsg.tocCd, (String) rsltSchdMap.get("TOC_CD"));
            setValue(inMsg.slsAllocRate, slsAllocRate);
            setValue(inMsg.dealGrsUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.dealDiscUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.dealNetUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.dealGrsTotPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.invLineDealNetAmt, BigDecimal.ZERO);
            setValue(inMsg.invLineDealTaxAmt, BigDecimal.ZERO);
            setValue(inMsg.funcGrsUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.funcDiscUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.funcNetUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.funcGrsTotPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.invLineFuncNetAmt, BigDecimal.ZERO);
            setValue(inMsg.invLineFuncTaxAmt, BigDecimal.ZERO);
            setValue(inMsg.coaCmpyCd, outBean.getCoaCmpyCd());
            setValue(inMsg.coaAfflCd, outBean.getCoaAfflCd());
            setValue(inMsg.coaBrCd, outBean.getCoaBrCd());
            setValue(inMsg.coaChCd, outBean.getCoaChCd());
            setValue(inMsg.coaCcCd, outBean.getCoaCcCd());
            setValue(inMsg.coaAcctCd, outBean.getCoaAcctCd());
            setValue(inMsg.coaProdCd, outBean.getCoaProdCd());
            setValue(inMsg.coaProjCd, outBean.getCoaProjCd());
            setValue(inMsg.coaExtnCd, outBean.getCoaExtnCd());
            setValue(inMsg.ccyCd, (String) rsltSchdMap.get("CCY_CD"));
            setValue(inMsg.svcContrBllgPk, orgBllgTmsg.svcContrBllgPk);
            setValue(inMsg.svcContrAddlChrgBllgPk, BigDecimal.ZERO);
            setValue(inMsg.trxCd, outBean.getTrxCd());
            setValue(inMsg.trxRsnCd, outBean.getTrxRsnCd());
            setValue(inMsg.dfrdAcctgRuleCd, outBean.getDfrdAcctgRuleCd());
            setValue(inMsg.dfrdAcctgRuleDurnAot, outBean.getDfrdAcctgRuleDurnAot());

            calcAlloc(bllgAmt, bllgDiscAmt, slsAllocRate, scale, inMsg);
            if (maxBllgAmt.compareTo(inMsg.dealGrsUnitPrcAmt.getValue()) < 0) {
                maxAllocTmsg = inMsg;
                maxBllgAmt = inMsg.dealGrsUnitPrcAmt.getValue();
            }
            totAmt = totAmt.add(inMsg.dealGrsUnitPrcAmt.getValue());
            totDiscAmt = totDiscAmt.add(inMsg.dealDiscUnitPrcAmt.getValue());
            listTmsg.add(inMsg);
            // START 2016/06/20 T.Aoyagi [QC#9907, ADD]
            this.invLineSplTpMap.put(inMsg.svcContrBllgAllocPk.getValue(), outBean.getInvLineSplTpCd());
            // END 2016/06/20 T.Aoyagi [QC#9907, ADD]
        }
        if (bllgAmt.compareTo(totAmt) != 0 || bllgDiscAmt.compareTo(totDiscAmt) != 0) {
            BigDecimal adjBillAmt = bllgAmt.subtract(totAmt);
            BigDecimal adjDiscAmt = bllgDiscAmt.subtract(totDiscAmt);
            BigDecimal dealGrsUnitPrcAmt = maxAllocTmsg.dealGrsUnitPrcAmt.getValue();
            // mod start 2017/07/04 CSA Defect#13857
            BigDecimal dealDiscUnitPrcAmt = maxAllocTmsg.dealDiscUnitPrcAmt.getValue();
            // mod end 2017/07/04 CSA Defect#13857

            dealGrsUnitPrcAmt = dealGrsUnitPrcAmt.add(adjBillAmt);
            dealDiscUnitPrcAmt = dealDiscUnitPrcAmt.add(adjDiscAmt);
            setValue(maxAllocTmsg.dealGrsUnitPrcAmt, dealGrsUnitPrcAmt);
            setValue(maxAllocTmsg.dealDiscUnitPrcAmt, dealDiscUnitPrcAmt);
            setValue(maxAllocTmsg.dealNetUnitPrcAmt, dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt));
            setValue(maxAllocTmsg.dealGrsTotPrcAmt, dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt));
            setValue(maxAllocTmsg.invLineDealNetAmt, dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt));

            setValue(maxAllocTmsg.funcGrsUnitPrcAmt, calcFuncAmtFromDealAmt(dealGrsUnitPrcAmt));
            setValue(maxAllocTmsg.funcDiscUnitPrcAmt, calcFuncAmtFromDealAmt(dealDiscUnitPrcAmt));
            setValue(maxAllocTmsg.funcNetUnitPrcAmt, calcFuncAmtFromDealAmt(dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt)));
            setValue(maxAllocTmsg.funcGrsTotPrcAmt, calcFuncAmtFromDealAmt(dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt)));
            setValue(maxAllocTmsg.invLineFuncNetAmt, calcFuncAmtFromDealAmt(dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt)));
        }

        if (listTmsg.size() == 0) {
            return false;
        }

        for (SVC_CONTR_BLLG_ALLOCTMsg outTmsg : listTmsg) {
            S21FastTBLAccessor.create(outTmsg);
            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(outTmsg.getReturnCode())) {
                throw new S21AbendException(NSZM0398E, new String[] {"SVC_CONTR_BLLG_ALLOC" });
            }
        }

        return true;
    }

    private boolean insertSvcContrBllgAllocForAddl(Map<String, Object> rsltSchdMap, SVC_CONTR_ADDL_CHRG_BLLGTMsg orgBllgTmsg, String dsContrCatgCd, String svcInvKey) {
        // START 2018/04/12 M.Naito [QC#23378,MOD]
        // mod start 2016/09/27 CSA Defect#10787
        ADDL_CHRG_INV_TPTMsg addlChrgInvTpTmsg = new ADDL_CHRG_INV_TPTMsg();
        setValue(addlChrgInvTpTmsg.glblCmpyCd, orgBllgTmsg.glblCmpyCd.getValue());
        setValue(addlChrgInvTpTmsg.addlChrgInvTpCd, orgBllgTmsg.addlChrgInvTpCd.getValue());
        addlChrgInvTpTmsg = (ADDL_CHRG_INV_TPTMsg) S21FastTBLAccessor.findByKey(addlChrgInvTpTmsg);
        if (addlChrgInvTpTmsg == null) {
            return false;
        }
        // Mod Start 2018/09/20 QC#28171
        List<GetDefCoaTrxCdForOutListInfoBean> allocList = getAllocList(rsltSchdMap, orgBllgTmsg.intgMdseCd.getValue(), addlChrgInvTpTmsg.svcInvChrgTpCd.getValue(), SVC_INV_CHRG_TP.ADDITIONAL_CHARGE);
        // Mod End 2018/09/20 QC#28171
//        List<GetDefCoaTrxCdForOutListInfoBean> allocList = getAllocList(rsltSchdMap, orgBllgTmsg.intgMdseCd.getValue(), SVC_INV_CHRG_TP.ADDITIONAL_CHARGE);
//        List<GetDefCoaTrxCdForOutListInfoBean> allocList = getAllocList(rsltSchdMap, (String) rsltSchdMap.get("SVC_PGM_MDSE_CD"), SVC_INV_CHRG_TP.ADDITIONAL_CHARGE);
        // mod end 2016/09/27 CSA Defect#10787
        // END 2018/04/12 M.Naito [QC#23378,MOD]
        if (allocList.size() == 0) {
            GetDefCoaTrxCdInfoBean bean = new GetDefCoaTrxCdInfoBean();
            bean.setGlblCmpyCd(orgBllgTmsg.glblCmpyCd.getValue());
            bean.setSvcMachMstrPk((BigDecimal) rsltSchdMap.get("SVC_MACH_MSTR_PK"));
            bean.setDsContrDtlPk((BigDecimal) rsltSchdMap.get("DS_CONTR_DTL_PK"));
            // mod start 2016/09/27 CSA Defect#10787
//            bean.setMdseCd((String) rsltSchdMap.get("SVC_PGM_MDSE_CD"));
            bean.setMdseCd(orgBllgTmsg.intgMdseCd.getValue());
            // mod end 2016/09/27 CSA Defect#10787
            bean.setDsAcctNum((String) rsltSchdMap.get("DS_ACCT_NUM"));
            //Mod Start 05/25/2016 <QC#8591>
//            bean.setBaseChrgFlg(FLG_ON_Y);
            bean.setBaseChrgFlg(FLG_OFF_N);
            bean.setUsgChrgFlg(FLG_OFF_N);
//            bean.setAddlChrgFlg(FLG_OFF_N);
            bean.setAddlChrgFlg(FLG_ON_Y);
            //Mod End   05/25/2016 <QC#8591>
            // START 2016/06/20 T.Aoyagi [QC#9907, ADD]
            bean.setDsContrAddlChrgPk(getDsContrAddlChrgPk(orgBllgTmsg.svcContrBllgPk.getValue()));
            // END 2016/06/20 T.Aoyagi [QC#9907, ADD]
            // START 2017/07/04 T.Kanasaka [QC#19662, MOD]
            // START 2018/07/04 K.Kojima [QC#23685-1,ADD]
            setGetDefCoaTrxCdInfoBeanOtherData(bean);
            // END 2018/07/04 K.Kojima [QC#23685-1,ADD]
            // START 2018/07/09 K.Kojima [QC#23685-1,ADD]
            if (hasValue(bean.getSvcMachMstrPk())) {
                bean.setMdlId((BigDecimal) rsltSchdMap.get("MDL_ID"));
            }
            // END 2018/07/09 K.Kojima [QC#23685-1,ADD]
            if (NSXC004001GetDefCoaTrxCd.getDefCoaTrxCd(bean) != null) {
                allocList = bean.getOutLisstInfoBean();

                allocList = mergeBrAlloc(rsltSchdMap, SVC_INV_CHRG_TP.ADDITIONAL_CHARGE, allocList);
            }
            // END 2017/07/04 T.Kanasaka [QC#19662, MOD]
        }
        //Mod Start 05/25/2016 <QC#8609>
//        if (allocList.size() == 0) {
        if (allocList == null || allocList.size() == 0) {
        //Mod End   05/25/2016 <QC#8609>
            addMessage(dsContrCatgCd, svcInvKey, 1, NSAM0610E, ((BigDecimal) rsltSchdMap.get("DS_CONTR_DTL_PK")).toString(), orgBllgTmsg.svcContrBllgPk.getValue().toString());
            return false;
        }
        // add start 2017/06/23 CSA Defect#18699
        String addlChrgInvTpCd = getAddlChrgInvTpCd(orgBllgTmsg.svcContrAddlChrgBllgPk.getValue());
        changeAllocListTrxCd(allocList, rsltSchdMap, SVC_INV_CHRG_TP.ADDITIONAL_CHARGE, addlChrgInvTpCd);
        // add end 2017/06/23 CSA Defect#18699

        List<SVC_CONTR_BLLG_ALLOCTMsg> listTmsg = new ArrayList<SVC_CONTR_BLLG_ALLOCTMsg>();
        SVC_CONTR_BLLG_ALLOCTMsg maxAllocTmsg = null;
        BigDecimal maxBllgAmt = BigDecimal.ZERO;
        BigDecimal bllgAmt = orgBllgTmsg.addlDealPrcAmt.getValue();
        BigDecimal bllgDiscAmt = BigDecimal.ZERO;
        BigDecimal totAmt = BigDecimal.ZERO;
        BigDecimal totDiscAmt = BigDecimal.ZERO;
        BigDecimal slsAllocRate = BigDecimal.ZERO;
        BigDecimal aftDeclPntDigitNum = (BigDecimal) rsltSchdMap.get("AFT_DECL_PNT_DIGIT_NUM");
        int scale = aftDeclPntDigitNum.intValue();
        // START 2018/04/12 M.Naito [QC#23378,ADD]
        BigDecimal totPrcAllocAmt = getTotPrcAllocAmt(allocList, scale);
        // END 2018/04/12 M.Naito [QC#23378,ADD]
        for (GetDefCoaTrxCdForOutListInfoBean outBean : allocList) {
            slsAllocRate = outBean.getPrcAllocPct();
            // START 2018/04/12 M.Naito [QC#23378,MOD]
            if (!hasValue(slsAllocRate) && !hasValue(outBean.getPrcAllocAmt())) {
                continue;
            }
            // END 2018/04/12 M.Naito [QC#23378,MOD]
            SVC_CONTR_BLLG_ALLOCTMsg inMsg = new SVC_CONTR_BLLG_ALLOCTMsg();
            setValue(inMsg.glblCmpyCd, this.glblCmpyCd);
            setValue(inMsg.svcContrBllgAllocPk, (BigDecimal) ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqConstant.SVC_CONTR_BLLG_ALLOC_SQ));
            // setValue(inMsg.svcContrBaseBllgPk, BigDecimal.ZERO);
            // START 2016/09/30 T.Kanasaka [QC#14428, DEL]
//            setValue(inMsg.svcContrMtrBllgPk, orgBllgTmsg.svcContrMtrBllgPk);
            // END 2016/09/30 T.Kanasaka [QC#14428, DEL]
            setValue(inMsg.contrPrcAllocTpCd, CONTR_PRC_ALLOC_TP.ADDITIONAL_CHARGE);
            // mod start 2016/09/27 CSA Defect#10787
//            setValue(inMsg.intgMdseCd, (String) rsltSchdMap.get("SVC_PGM_MDSE_CD"));
            setValue(inMsg.intgMdseCd, orgBllgTmsg.intgMdseCd);
            // mod end 2016/09/27 CSA Defect#10787
            setValue(inMsg.tocCd, (String) rsltSchdMap.get("TOC_CD"));
            setValue(inMsg.slsAllocRate, slsAllocRate);
            setValue(inMsg.dealGrsUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.dealDiscUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.dealNetUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.dealGrsTotPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.invLineDealNetAmt, BigDecimal.ZERO);
            setValue(inMsg.invLineDealTaxAmt, BigDecimal.ZERO);
            setValue(inMsg.funcGrsUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.funcDiscUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.funcNetUnitPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.funcGrsTotPrcAmt, BigDecimal.ZERO);
            setValue(inMsg.invLineFuncNetAmt, BigDecimal.ZERO);
            setValue(inMsg.invLineFuncTaxAmt, BigDecimal.ZERO);
            setValue(inMsg.coaCmpyCd, outBean.getCoaCmpyCd());
            setValue(inMsg.coaAfflCd, outBean.getCoaAfflCd());
            setValue(inMsg.coaBrCd, outBean.getCoaBrCd());
            setValue(inMsg.coaChCd, outBean.getCoaChCd());
            setValue(inMsg.coaCcCd, outBean.getCoaCcCd());
            setValue(inMsg.coaAcctCd, outBean.getCoaAcctCd());
            setValue(inMsg.coaProdCd, outBean.getCoaProdCd());
            setValue(inMsg.coaProjCd, outBean.getCoaProjCd());
            setValue(inMsg.coaExtnCd, outBean.getCoaExtnCd());
            setValue(inMsg.ccyCd, (String) rsltSchdMap.get("CCY_CD"));
            setValue(inMsg.svcContrBllgPk, orgBllgTmsg.svcContrBllgPk);
            setValue(inMsg.svcContrAddlChrgBllgPk, orgBllgTmsg.svcContrAddlChrgBllgPk);
            setValue(inMsg.trxCd, outBean.getTrxCd());
            setValue(inMsg.trxRsnCd, outBean.getTrxRsnCd());
            setValue(inMsg.dfrdAcctgRuleCd, outBean.getDfrdAcctgRuleCd());
            setValue(inMsg.dfrdAcctgRuleDurnAot, outBean.getDfrdAcctgRuleDurnAot());

            // START 2018/04/12 M.Naito [QC#23378,MOD]
            if (hasValue(totPrcAllocAmt) && BigDecimal.ZERO.compareTo(totPrcAllocAmt) != 0) {
                calcAllocFromPrcAllocAmt(bllgAmt, bllgDiscAmt, totPrcAllocAmt, outBean.getPrcAllocAmt(), scale, inMsg, SVC_INV_CHRG_TP.ADDITIONAL_CHARGE);
            } else {
                calcAlloc(bllgAmt, bllgDiscAmt, slsAllocRate, scale, inMsg);
            }
            // END 2018/04/12 M.Naito [QC#23378,MOD]
            if (maxBllgAmt.compareTo(inMsg.dealGrsUnitPrcAmt.getValue()) < 0) {
                maxAllocTmsg = inMsg;
                maxBllgAmt = inMsg.dealGrsUnitPrcAmt.getValue();
            }
            totAmt = totAmt.add(inMsg.dealGrsUnitPrcAmt.getValue());
            totDiscAmt = totDiscAmt.add(inMsg.dealDiscUnitPrcAmt.getValue());
            listTmsg.add(inMsg);
            // START 2016/06/20 T.Aoyagi [QC#9907, ADD]
            this.invLineSplTpMap.put(inMsg.svcContrBllgAllocPk.getValue(), outBean.getInvLineSplTpCd());
            // END 2016/06/20 T.Aoyagi [QC#9907, ADD]
        }
        if (bllgAmt.compareTo(totAmt) != 0 || bllgDiscAmt.compareTo(totDiscAmt) != 0) {
            BigDecimal adjBillAmt = bllgAmt.subtract(totAmt);
            BigDecimal adjDiscAmt = bllgDiscAmt.subtract(totDiscAmt);
            BigDecimal dealGrsUnitPrcAmt = maxAllocTmsg.dealGrsUnitPrcAmt.getValue();
            // mod start 2017/07/04 CSA Defect#13857
            BigDecimal dealDiscUnitPrcAmt = maxAllocTmsg.dealDiscUnitPrcAmt.getValue();
            // mod end 2017/07/04 CSA Defect#13857

            dealGrsUnitPrcAmt = dealGrsUnitPrcAmt.add(adjBillAmt);
            dealDiscUnitPrcAmt = dealDiscUnitPrcAmt.add(adjDiscAmt);
            setValue(maxAllocTmsg.dealGrsUnitPrcAmt, dealGrsUnitPrcAmt);
            setValue(maxAllocTmsg.dealDiscUnitPrcAmt, dealDiscUnitPrcAmt);
            setValue(maxAllocTmsg.dealNetUnitPrcAmt, dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt));
            setValue(maxAllocTmsg.dealGrsTotPrcAmt, dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt));
            setValue(maxAllocTmsg.invLineDealNetAmt, dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt));

            setValue(maxAllocTmsg.funcGrsUnitPrcAmt, calcFuncAmtFromDealAmt(dealGrsUnitPrcAmt));
            setValue(maxAllocTmsg.funcDiscUnitPrcAmt, calcFuncAmtFromDealAmt(dealDiscUnitPrcAmt));
            setValue(maxAllocTmsg.funcNetUnitPrcAmt, calcFuncAmtFromDealAmt(dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt)));
            setValue(maxAllocTmsg.funcGrsTotPrcAmt, calcFuncAmtFromDealAmt(dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt)));
            setValue(maxAllocTmsg.invLineFuncNetAmt, calcFuncAmtFromDealAmt(dealGrsUnitPrcAmt.subtract(dealDiscUnitPrcAmt)));
        }

        if (listTmsg.size() == 0) {
            return false;
        }

        for (SVC_CONTR_BLLG_ALLOCTMsg outTmsg : listTmsg) {
            S21FastTBLAccessor.create(outTmsg);
            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(outTmsg.getReturnCode())) {
                throw new S21AbendException(NSZM0398E, new String[] {"SVC_CONTR_BLLG_ALLOC" });
            }
        }

        return true;
    }
    //Mod End   05/27/2016 <QC#8335>

    // Mod Start 2018/09/20 QC#28171
    private List<GetDefCoaTrxCdForOutListInfoBean> getAllocList(Map<String, Object> rsltSchdMap, String mdseCd, String svcInvCrhgTpCd, String crhgTpCd) {
    // Mod End 2018/09/20 QC#28171
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("dsContrPk", (BigDecimal) rsltSchdMap.get("DS_CONTR_PK"));
        param.put("dsContrDtlPk", (BigDecimal) rsltSchdMap.get("DS_CONTR_DTL_PK"));
        param.put("svcInvCrhgTpCd", svcInvCrhgTpCd);
        List<GetDefCoaTrxCdForOutListInfoBean> outList = new ArrayList<GetDefCoaTrxCdForOutListInfoBean>();
        List<Map<String, Object>> resultMapList = (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getContrAlloc", param);
        if (resultMapList.size() == 0) {
            // START 2016/10/19 T.Kanasaka [QC#13009, MOD]
//            //Mod Start 06/21/2016 <QC#10584>
//            param.remove("svcInvCrhgTpCd");
//            resultMapList = (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getContrAlloc", param);
//            if (resultMapList.size() == 0) {
//                param.remove("dsContrDtlPk");
//                resultMapList = (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getContrAlloc", param);
//                if (resultMapList.size() == 0) {
//                    return outList;
//                }
//            }
//            //Mod End   06/21/2016 <QC#10584>
            return outList;
            // END 2016/10/19 T.Kanasaka [QC#13009, MOD]
        }
        SVC_INV_CHRG_TPTMsg svcInvChrgTpTmsg = new SVC_INV_CHRG_TPTMsg();
        setValue(svcInvChrgTpTmsg.glblCmpyCd, this.glblCmpyCd);
        setValue(svcInvChrgTpTmsg.svcInvChrgTpCd, svcInvCrhgTpCd);
        svcInvChrgTpTmsg = (SVC_INV_CHRG_TPTMsg) S21FastTBLAccessor.findByKey(svcInvChrgTpTmsg);

        Map<String, Object> resultRule = new HashMap<String, Object>();
        if (hasValue(mdseCd)) {
            Map<String, Object> paramRule = new HashMap<String, Object>();
            paramRule.put("glblCmpyCd", this.glblCmpyCd);
            paramRule.put("mdseCd", mdseCd);
            resultRule = (Map<String, Object>) ssmBatClnt.queryObject("getdfrdAcctgRule", paramRule);
        }

        for (Map<String, Object> reslultMap : resultMapList) {
            GetDefCoaTrxCdForOutListInfoBean outBean = new GetDefCoaTrxCdForOutListInfoBean();
            outBean.setCoaCmpyCd((String) reslultMap.get("COA_CMPY_CD"));
            outBean.setCoaAfflCd((String) reslultMap.get("COA_AFFL_CD"));
            outBean.setCoaBrCd((String) reslultMap.get("COA_BR_CD"));
            outBean.setCoaChCd((String) reslultMap.get("COA_CH_CD"));
            outBean.setCoaCcCd((String) reslultMap.get("COA_CC_CD"));
            outBean.setCoaAcctCd((String) reslultMap.get("COA_ACCT_CD"));
            outBean.setCoaProdCd((String) reslultMap.get("COA_PROD_CD"));
            outBean.setCoaProjCd((String) reslultMap.get("COA_PROJ_CD"));
            outBean.setCoaExtnCd((String) reslultMap.get("COA_EXTN_CD"));
            outBean.setInvLineSplTpCd("");
            outBean.setPrcAllocPct((BigDecimal) reslultMap.get("PRC_ALLOC_RATE"));
            // START 2018/04/12 M.Naito [QC#23378,ADD]
            outBean.setPrcAllocAmt((BigDecimal) reslultMap.get("PRC_ALLOC_AMT"));
            // END 2018/04/12 M.Naito [QC#23378,ADD]
            outBean.setTrxCd(svcInvChrgTpTmsg.trxCd.getValue());
            outBean.setTrxRsnCd(svcInvChrgTpTmsg.trxRsnCd.getValue());
            outBean.setDfrdAcctgRuleCd((String) resultRule.get("DFRD_ACCTG_RULE_CD"));
            //Del Start 06/24/2016 <QC#10585>
//            outBean.setDfrdAcctgRuleDurnAot((BigDecimal) resultRule.get("DFRD_ACCTG_RULE_DURN_AOT"));
            //Del End   06/24/2016 <QC#10585>
            // Mod Start 2018/09/20 QC#28171
            List<GetDefCoaTrxCdForOutListInfoBean> allocList = setBrAllocList(outBean, rsltSchdMap, svcInvCrhgTpCd, crhgTpCd);
            for (GetDefCoaTrxCdForOutListInfoBean alloc : allocList) {
                outList.add(alloc);
            }
            // Mod End 2018/09/20 QC#28171
        }
        return outList;
    }

    // START 2017/07/04 T.Kanasaka [QC#19662, ADD]
    private List<GetDefCoaTrxCdForOutListInfoBean> mergeBrAlloc(Map<String, Object> rsltSchdMap, String svcInvCrhgTpCd, List<GetDefCoaTrxCdForOutListInfoBean> allocList) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("dsContrPk", (BigDecimal) rsltSchdMap.get("DS_CONTR_PK"));
        param.put("dsContrDtlPk", (BigDecimal) rsltSchdMap.get("DS_CONTR_DTL_PK"));
        param.put("svcInvCrhgTpCd", svcInvCrhgTpCd);
        List<Map<String, Object>> resultMapList = (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getContrAllocBr", param);
        if (resultMapList.size() == 0) {
            return allocList;
        }

        BigDecimal aftDeclPntDigitNum = (BigDecimal) rsltSchdMap.get("AFT_DECL_PNT_DIGIT_NUM");
        int scale = aftDeclPntDigitNum.intValue();
        BigDecimal bigDecimal100 = new BigDecimal(INT_100);
        BigDecimal sumPrcAllocPct = BigDecimal.ZERO;
        GetDefCoaTrxCdForOutListInfoBean maxPctOutBean = null;

        List<GetDefCoaTrxCdForOutListInfoBean> outList = new ArrayList<GetDefCoaTrxCdForOutListInfoBean>();
        for (GetDefCoaTrxCdForOutListInfoBean allocBean : allocList) {
            for (Map<String, Object> reslultMap : resultMapList) {
                GetDefCoaTrxCdForOutListInfoBean outBean = new GetDefCoaTrxCdForOutListInfoBean();
                // START 2017/08/28 M.Kidokoro [QC#20757, MOD]
//                outBean.setCoaCmpyCd(allocBean.getCoaCmpyCd());
//                outBean.setCoaAfflCd(allocBean.getCoaAfflCd());
                outBean.setCoaCmpyCd("");
                outBean.setCoaAfflCd("");
                // END 2017/08/28 M.Kidokoro [QC#20757, MOD]
                outBean.setCoaBrCd((String) reslultMap.get("COA_BR_CD"));
                // START 2017/08/28 M.Kidokoro [QC#20757, MOD]
//                outBean.setCoaChCd(allocBean.getCoaChCd());
//                outBean.setCoaCcCd(allocBean.getCoaCcCd());
//                outBean.setCoaAcctCd(allocBean.getCoaAcctCd());
//                outBean.setCoaProdCd(allocBean.getCoaProdCd());
//                outBean.setCoaProjCd(allocBean.getCoaProjCd());
//                outBean.setCoaExtnCd(allocBean.getCoaExtnCd());
                outBean.setCoaChCd("");
                outBean.setCoaCcCd("");
                outBean.setCoaAcctCd("");
                outBean.setCoaProdCd("");
                outBean.setCoaProjCd("");
                outBean.setCoaExtnCd("");
                // END 2017/08/28 M.Kidokoro [QC#20757, MOD]
                outBean.setInvLineSplTpCd(allocBean.getInvLineSplTpCd());
                outBean.setTrxCd(allocBean.getTrxCd());
                // START 2017/08/28 M.Kidokoro [QC#20757, MOD]
//                outBean.setTrxRsnCd(allocBean.getTrxRsnCd());
                if (allocBean.getInvLineSplTpCd().equals(INV_LINE_SPL_TP.SERVICE)) {
                    outBean.setTrxRsnCd(TRX_RSN.SVC_SVC_MAN_ALLOC_BR_ONLY);
                } else if (allocBean.getInvLineSplTpCd().equals(INV_LINE_SPL_TP.SUPPLY)) {
                    outBean.setTrxRsnCd(TRX_RSN.SVC_SPLY_MAN_ALLOC_BR_ONLY);
                } else if (allocBean.getInvLineSplTpCd().equals(INV_LINE_SPL_TP.EQUIPMENT)) {
                    outBean.setTrxRsnCd(TRX_RSN.SVC_EQIP_MAN_ALLOC_BR_ONLY);
                }
                // END 2017/08/28 M.Kidokoro [QC#20757, MOD]
                outBean.setDfrdAcctgRuleCd(allocBean.getDfrdAcctgRuleCd());

                BigDecimal prcAllocPct = allocBean.getPrcAllocPct();
                if (!hasValue(prcAllocPct)) {
                    continue;
                }

                prcAllocPct = prcAllocPct.multiply((BigDecimal) reslultMap.get("PRC_ALLOC_RATE")).divide(bigDecimal100, scale, RoundingMode.HALF_UP);
                outBean.setPrcAllocPct(prcAllocPct);
                outList.add(outBean);

                sumPrcAllocPct = sumPrcAllocPct.add(prcAllocPct);
                if (maxPctOutBean == null || maxPctOutBean.getPrcAllocPct().compareTo(prcAllocPct) < 0) {
                    maxPctOutBean = outBean;
                }
            }
        }

        // Adjust
        if (sumPrcAllocPct.compareTo(bigDecimal100) != 0) {
            BigDecimal diffPrcAllocPct = bigDecimal100.subtract(sumPrcAllocPct);
            BigDecimal prcAllocPct = maxPctOutBean.getPrcAllocPct().add(diffPrcAllocPct);
            maxPctOutBean.setPrcAllocPct(prcAllocPct);
        }

        return outList;
    }
    // END 2017/07/04 T.Kanasaka [QC#19662, ADD]

    private void calcAlloc(BigDecimal bllgAmt, BigDecimal bllgDiscAmt, BigDecimal slsAllocRate, int aftDeclPntDigitNum, SVC_CONTR_BLLG_ALLOCTMsg allocTmsg) {
        BigDecimal dealGrossUnitPriceAmount = BigDecimal.ZERO;
        BigDecimal dealDiscountUnitPriceAmount = BigDecimal.ZERO;
        BigDecimal dealNetUnitPriceAmount = BigDecimal.ZERO;
        BigDecimal dealGrossTotalPriceAmount = BigDecimal.ZERO;
        BigDecimal invoiceLineDealNetAmount = BigDecimal.ZERO;
        BigDecimal funcGrossUnitPriceAmount = BigDecimal.ZERO;
        BigDecimal funcDiscountUnitPriceAmount = BigDecimal.ZERO;
        BigDecimal funcNetUnitPriceAmount = BigDecimal.ZERO;
        BigDecimal funcGrossTotalPriceAmount = BigDecimal.ZERO;
        BigDecimal invoiceLineFuncNetAmount = BigDecimal.ZERO;

        dealGrossUnitPriceAmount = bllgAmt.multiply(slsAllocRate.divide(BigDecimal.valueOf(INT_100))).setScale(aftDeclPntDigitNum, BigDecimal.ROUND_HALF_UP);
        dealDiscountUnitPriceAmount = bllgDiscAmt.multiply(slsAllocRate.divide(BigDecimal.valueOf(INT_100))).setScale(aftDeclPntDigitNum, BigDecimal.ROUND_HALF_UP);
        dealNetUnitPriceAmount = dealGrossUnitPriceAmount.subtract(dealDiscountUnitPriceAmount);
        dealGrossTotalPriceAmount = dealGrossUnitPriceAmount.subtract(dealDiscountUnitPriceAmount);
        invoiceLineDealNetAmount = dealGrossUnitPriceAmount.subtract(dealDiscountUnitPriceAmount);

        funcGrossUnitPriceAmount = calcFuncAmtFromDealAmt(dealGrossUnitPriceAmount);
        funcDiscountUnitPriceAmount = calcFuncAmtFromDealAmt(dealDiscountUnitPriceAmount);
        funcNetUnitPriceAmount = calcFuncAmtFromDealAmt(dealNetUnitPriceAmount);
        funcGrossTotalPriceAmount = calcFuncAmtFromDealAmt(dealGrossTotalPriceAmount);
        invoiceLineFuncNetAmount = calcFuncAmtFromDealAmt(invoiceLineDealNetAmount);

        setValue(allocTmsg.dealGrsUnitPrcAmt, dealGrossUnitPriceAmount);
        setValue(allocTmsg.dealDiscUnitPrcAmt, dealDiscountUnitPriceAmount);
        setValue(allocTmsg.dealNetUnitPrcAmt, dealNetUnitPriceAmount);
        setValue(allocTmsg.dealGrsTotPrcAmt, dealGrossTotalPriceAmount);
        setValue(allocTmsg.invLineDealNetAmt, invoiceLineDealNetAmount);

        setValue(allocTmsg.funcGrsUnitPrcAmt, funcGrossUnitPriceAmount);
        setValue(allocTmsg.funcDiscUnitPrcAmt, funcDiscountUnitPriceAmount);
        setValue(allocTmsg.funcNetUnitPrcAmt, funcNetUnitPriceAmount);
        setValue(allocTmsg.funcGrsTotPrcAmt, funcGrossTotalPriceAmount);
        setValue(allocTmsg.invLineFuncNetAmt, invoiceLineFuncNetAmount);
        return;
    }

    // START 2018/04/12 M.Naito [QC#23378,ADD]
    private void calcAllocFromPrcAllocAmt(BigDecimal bllgAmt, BigDecimal bllgDiscAmt, BigDecimal totPrcAllocAmt, BigDecimal prcAllocAmt, int aftDeclPntDigitNum, SVC_CONTR_BLLG_ALLOCTMsg allocTmsg, String svcInvLineTpCd) {
        BigDecimal dealGrossUnitPriceAmount = BigDecimal.ZERO;
        BigDecimal dealDiscountUnitPriceAmount = BigDecimal.ZERO;
        BigDecimal dealNetUnitPriceAmount = BigDecimal.ZERO;
        BigDecimal dealGrossTotalPriceAmount = BigDecimal.ZERO;
        BigDecimal invoiceLineDealNetAmount = BigDecimal.ZERO;
        BigDecimal funcGrossUnitPriceAmount = BigDecimal.ZERO;
        BigDecimal funcDiscountUnitPriceAmount = BigDecimal.ZERO;
        BigDecimal funcNetUnitPriceAmount = BigDecimal.ZERO;
        BigDecimal funcGrossTotalPriceAmount = BigDecimal.ZERO;
        BigDecimal invoiceLineFuncNetAmount = BigDecimal.ZERO;

        if (bllgAmt.setScale(aftDeclPntDigitNum, BigDecimal.ROUND_HALF_UP).equals(totPrcAllocAmt)) {
            dealGrossUnitPriceAmount = prcAllocAmt;
        } else {
            dealGrossUnitPriceAmount = bllgAmt.multiply(prcAllocAmt).divide(totPrcAllocAmt, aftDeclPntDigitNum, BigDecimal.ROUND_HALF_UP);
        }
        dealDiscountUnitPriceAmount = bllgDiscAmt.multiply(prcAllocAmt).divide(totPrcAllocAmt, aftDeclPntDigitNum, BigDecimal.ROUND_HALF_UP);
        dealNetUnitPriceAmount = dealGrossUnitPriceAmount.subtract(dealDiscountUnitPriceAmount);
        dealGrossTotalPriceAmount = dealGrossUnitPriceAmount.subtract(dealDiscountUnitPriceAmount);
        invoiceLineDealNetAmount = dealGrossUnitPriceAmount.subtract(dealDiscountUnitPriceAmount);

        funcGrossUnitPriceAmount = calcFuncAmtFromDealAmt(dealGrossUnitPriceAmount);
        funcDiscountUnitPriceAmount = calcFuncAmtFromDealAmt(dealDiscountUnitPriceAmount);
        funcNetUnitPriceAmount = calcFuncAmtFromDealAmt(dealNetUnitPriceAmount);
        funcGrossTotalPriceAmount = calcFuncAmtFromDealAmt(dealGrossTotalPriceAmount);
        invoiceLineFuncNetAmount = calcFuncAmtFromDealAmt(invoiceLineDealNetAmount);

        setValue(allocTmsg.dealGrsUnitPrcAmt, dealGrossUnitPriceAmount);
        setValue(allocTmsg.dealDiscUnitPrcAmt, dealDiscountUnitPriceAmount);
        setValue(allocTmsg.dealNetUnitPrcAmt, dealNetUnitPriceAmount);
        setValue(allocTmsg.dealGrsTotPrcAmt, dealGrossTotalPriceAmount);
        setValue(allocTmsg.invLineDealNetAmt, invoiceLineDealNetAmount);

        setValue(allocTmsg.funcGrsUnitPrcAmt, funcGrossUnitPriceAmount);
        setValue(allocTmsg.funcDiscUnitPrcAmt, funcDiscountUnitPriceAmount);
        setValue(allocTmsg.funcNetUnitPrcAmt, funcNetUnitPriceAmount);
        setValue(allocTmsg.funcGrsTotPrcAmt, funcGrossTotalPriceAmount);
        setValue(allocTmsg.invLineFuncNetAmt, invoiceLineFuncNetAmount);

        // START 2018/04/27 K.Kojima [QC#25875,ADD]
        if (!hasValue(allocTmsg.slsAllocRate)) {
            // START 2018/09/14 QC#28281, MOD
            //setValue(allocTmsg.slsAllocRate, allocTmsg.dealGrsUnitPrcAmt.getValue().multiply(BigDecimal.valueOf(INT_100)).divide(totPrcAllocAmt, aftDeclPntDigitNum, BigDecimal.ROUND_HALF_UP));
            setValue(allocTmsg.slsAllocRate, prcAllocAmt.multiply(BigDecimal.valueOf(INT_100)).divide(totPrcAllocAmt, aftDeclPntDigitNum, BigDecimal.ROUND_HALF_UP));
            // END 2018/09/14 QC#28281, MOD
        }
        // END 2018/04/27 K.Kojima [QC#25875,ADD]

        return;
    }
    // END 2018/04/12 M.Naito [QC#23378,ADD]

    private BigDecimal calcFuncAmtFromDealAmt(BigDecimal dealAmt) {
        // START 2018/06/29 K.Kojima [QC#23685-1,MOD]
        // BigDecimal funcAmt = NSXC003001Exchange.calcFuncFromDeal(this.glblCmpyCd, this.ccyCode, this.slsDt, dealAmt);
        BigDecimal funcAmt = this.nsxc003001Exchange.calcFuncFromDealNoStatic(this.glblCmpyCd, this.ccyCode, this.slsDt, dealAmt);
        // END 2018/06/29 K.Kojima [QC#23685-1,MOD]
        return funcAmt;
    }

    // START 2016/03/15 T.Aoyagi [QC#5492, ADD]
    private BigDecimal nullToZero(BigDecimal val) {
        if (hasValue(val)) {
            return val;
        }
        return BigDecimal.ZERO;
    }
    // END 2016/03/15 T.Aoyagi [QC#5492, ADD]
    // START 2016/06/20 T.Aoyagi [QC#9907, ADD]
    private BigDecimal getDsContrAddlChrgPk(BigDecimal svcContrBllgPk) {

        SVC_CONTR_BLLGTMsg inMsg = new SVC_CONTR_BLLGTMsg();
        setValue(inMsg.glblCmpyCd, this.glblCmpyCd);
        setValue(inMsg.svcContrBllgPk, svcContrBllgPk);
        inMsg = (SVC_CONTR_BLLGTMsg) S21FastTBLAccessor.findByKey(inMsg);
        if (inMsg != null) {
            return inMsg.dsContrAddlChrgPk.getValue();
        }
        return null;
    }
    // END 2016/06/20 T.Aoyagi [QC#9907, ADD]

    // START 2018/02/02 K.Kojima [QC#22242,DEL]
    // // START 2016/09/27 T.Kanasaka [QC#9905, MOD]
    // //Add Start 07/05/2016 <QC#9438>
    // private String getFleetDefaultShipToCustCd(Map<String, Object> dsContrDtlInfo) {
    //     if (hasValue((String) dsContrDtlInfo.get("FLEET_SHIP_TO_CUST_CD"))) {
    //         return (String) dsContrDtlInfo.get("FLEET_SHIP_TO_CUST_CD");
    //     } else {
    //         NMZC610001PMsg billToCustPmsg = new NMZC610001PMsg();
    //         ZYPEZDItemValueSetter.setValue(billToCustPmsg.glblCmpyCd, glblCmpyCd);
    //         ZYPEZDItemValueSetter.setValue(billToCustPmsg.xxModeCd, NMZC610001Constant.PROCESS_DEFAULT_BILL_SHIP);
    //         ZYPEZDItemValueSetter.setValue(billToCustPmsg.dsAcctNum_I1, (String) dsContrDtlInfo.get("DS_ACCT_NUM"));
    //         ZYPEZDItemValueSetter.setValue(billToCustPmsg.billToCustCd, (String) dsContrDtlInfo.get("BILL_TO_CUST_CD"));
    //         new NMZC610001().execute(billToCustPmsg, ONBATCH_TYPE.BATCH);
    //         if (S21ApiUtil.isXxMsgId(billToCustPmsg)) {
    //             List<String> msgIdList = S21ApiUtil.getXxMsgIdList(billToCustPmsg);
    //             for (String msgId : msgIdList) {
    //                 if (msgId.endsWith("E")) {
    //                     return null;
    //                 }
    //             }
    //         }
    //         if (billToCustPmsg.DefaultBillShipList.getValidCount() > 0) {
    //             return billToCustPmsg.DefaultBillShipList.no(0).shipToCustCd.getValue();
    //         }
    //         return null;
    //     }
    // }
    // //Add End   07/05/2016 <QC#9438>
    // // END 2016/09/27 T.Kanasaka [QC#9905, MOD]
    // END 2018/02/02 K.Kojima [QC#22242,DEL]

    // START 2018/02/02 K.Kojima [QC#22242,ADD]
    private String getFleetShipToCustCd(List<Map<String, Object>> dsContrDtlInfoList) {
        for (Map<String, Object> dsContrDtlInfo : dsContrDtlInfoList) {
            if (hasValue((String) dsContrDtlInfo.get("FLEET_SHIP_TO_CUST_CD"))) {
                return (String) dsContrDtlInfo.get("FLEET_SHIP_TO_CUST_CD");
            }
        }
        return null;
    }

    // END 2018/02/02 K.Kojima [QC#22242,ADD]

    // add start 2016/07/27 T.Aoyagi QC#10390
    private void setPmtTermInfo(SVC_INVTMsg svcInvTMsg, SVC_CONTR_BLLGTMsg mainSvcContrBllgTMsg) {

        Map<String, String> origPmtTermInfo = getOrigPmtTermInfo(mainSvcContrBllgTMsg);
        String pmtCcFlg = origPmtTermInfo.get("PMT_CC_FLG");
        String origPmtTermCashDiscCd = origPmtTermInfo.get("PMT_TERM_CASH_DISC_CD");
        String invTpCd = mainSvcContrBllgTMsg.invTpCd.getValue();
        Map<String, Object> pmtTermInfo = null;

        // START 2023/08/18 S.Ikariya [QC#61721,MOD]
        // if (FLG_ON_Y.equals(pmtCcFlg)) {
        if ((FLG_ON_Y.equals(pmtCcFlg)) ||
                (PMT_TERM_CASH_DISC.CHECK_BY_PHONE.equals(origPmtTermCashDiscCd))) {
        // END 2023/08/18 S.Ikariya [QC#61721,MOD]
            if (INV_TP.CREDIT_MEMO.equals(invTpCd)) {
                pmtTermInfo = getPmtTermInfo(this.crPmtTermCc);
            } else {
                pmtTermInfo = getPmtTermInfo(this.rebilPmtTermCc);
            }
        } else {
            if (INV_TP.CREDIT_MEMO.equals(invTpCd)) {
                pmtTermInfo = getPmtTermInfo(this.crPmtTermExCc);
            } else {
                pmtTermInfo = getPmtTermInfo(origPmtTermCashDiscCd);
            }
        }
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermCashDiscCd, (String) pmtTermInfo.get("PMT_TERM_CASH_DISC_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermCd, (String) pmtTermInfo.get("PMT_TERM_CD"));
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermCashDiscDescTxt, (String) pmtTermInfo.get("PMT_TERM_CASH_DISC_DESC_TXT"));
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.pmtTermStartDt, this.slsDt);
        BigDecimal invDueDt = nullToZero((BigDecimal) pmtTermInfo.get("PMT_TERM_AOT"));
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.invDueDt, ZYPDateUtil.addDays(this.slsDt, invDueDt.intValue()));
    }

    private Map<String, String> getOrigPmtTermInfo(SVC_CONTR_BLLGTMsg mainSvcContrBllgTMsg) {

        Map<String, String> result = new HashMap<String, String>();

        String origSvcInvNum = mainSvcContrBllgTMsg.origSvcInvNum.getValue();
        if (!hasValue(origSvcInvNum)) {
            return result;
        }

        Map<String, Object> ssmPrm = new HashMap<String, Object>();
        ssmPrm.put("glblCmpyCd", glblCmpyCd);
        ssmPrm.put("origSvcInvNum", origSvcInvNum);
        Map<String, String> map = (Map<String, String>) ssmBatClnt.queryObject("getOrigPmtTermInfo", ssmPrm);
        if (map != null) {
            result = map;
        }
        return result;
    }

    private Map<String, Object> getPmtTermInfo(String pmtTermCashDiscCd) {

        Map<String, Object> result = new HashMap<String, Object>();

        if (!hasValue(pmtTermCashDiscCd)) {
            return result;
        }

        Map<String, Object> ssmPrm = new HashMap<String, Object>();
        ssmPrm.put("glblCmpyCd", glblCmpyCd);
        ssmPrm.put("pmtTermCashDiscCd", pmtTermCashDiscCd);
        Map<String, Object> map = (Map<String, Object>) ssmBatClnt.queryObject("getPmtTermInfo", ssmPrm);
        if (map != null) {
            result = map;
        }
        return result;
    }
    // add end 2016/07/27 T.Aoyagi QC#10390
    // Add Start 2016/11/10 <QC#15789>
    private String getAjeInvLineAllocCdForBase(boolean hasDsContrAlloc, Map<String, Object> dsContrDtlInfo) {
        if (hasDsContrAlloc) {
            return null;
        }
        String svcPgmMdseCd = (String) dsContrDtlInfo.get("SVC_PGM_MDSE_CD");
        BigDecimal mdlId = (BigDecimal) dsContrDtlInfo.get("MDL_ID");
        // START 2018/07/05 K.Kojima [QC#23685-1,MOD]
        // return NSXC004001GetDefCoaTrxCd.GetAjeInvLineAllocCd(this.glblCmpyCd, SVC_INV_CHRG_TP.BASE_CHARGE, svcPgmMdseCd, mdlId);
        String key = svcPgmMdseCd + " : " + mdlId;
        if (this.nsxc004001AjeInvLineAllocCdForBaseCache.contains(key)) {
            return this.nsxc004001AjeInvLineAllocCdForBaseCache.get(key);
        } else {
            String ajeInvLineAllocCd = NSXC004001GetDefCoaTrxCd.GetAjeInvLineAllocCd(this.glblCmpyCd, SVC_INV_CHRG_TP.BASE_CHARGE, svcPgmMdseCd, mdlId);
            if (hasValue(ajeInvLineAllocCd)) {
                this.nsxc004001AjeInvLineAllocCdForBaseCache.put(key, ajeInvLineAllocCd);
            }
            return ajeInvLineAllocCd;
        }
        // END 2018/07/05 K.Kojima [QC#23685-1,MOD]
    }

    private String getAjeInvLineAllocCdForMtr(boolean hasDsContrAlloc, Map<String, Object> dsContrDtlInfo) {
        if (hasDsContrAlloc) {
            return null;
        }
        String svcPgmMdseCd = (String) dsContrDtlInfo.get("SVC_PGM_MDSE_CD");
        BigDecimal mdlId = (BigDecimal) dsContrDtlInfo.get("MDL_ID");
        // START 2018/07/05 K.Kojima [QC#23685-1,MOD]
        // return NSXC004001GetDefCoaTrxCd.GetAjeInvLineAllocCd(this.glblCmpyCd, SVC_INV_CHRG_TP.METER_CHARGE, svcPgmMdseCd, mdlId);
        String key = svcPgmMdseCd + " : " + mdlId;
        if (this.nsxc004001AjeInvLineAllocCdForMtrCache.contains(key)) {
            return this.nsxc004001AjeInvLineAllocCdForMtrCache.get(key);
        } else {
            String ajeInvLineAllocCd = NSXC004001GetDefCoaTrxCd.GetAjeInvLineAllocCd(this.glblCmpyCd, SVC_INV_CHRG_TP.METER_CHARGE, svcPgmMdseCd, mdlId);
            if (hasValue(ajeInvLineAllocCd)) {
                this.nsxc004001AjeInvLineAllocCdForMtrCache.put(key, ajeInvLineAllocCd);
            }
            return ajeInvLineAllocCd;
        }
        // END 2018/07/05 K.Kojima [QC#23685-1,MOD]
    }

    private String getAjeInvLineAllocCdForAddl(boolean hasDsContrAlloc, String svcInvChrgTpCd, SVC_CONTR_ADDL_CHRG_BLLGTMsg addlChrgBllgTMsg) {
        if (hasDsContrAlloc) {
            return null;
        }
        // START 2018/07/05 K.Kojima [QC#23685-1,MOD]
        // String svcPgmMdseCd = addlChrgBllgTMsg.intgMdseCd.getValue();
        // return NSXC004001GetDefCoaTrxCd.GetAjeInvLineAllocCdForAddl(this.glblCmpyCd, svcInvChrgTpCd);
        String key = svcInvChrgTpCd;
        if (this.nsxc004001AjeInvLineAllocCdForAddlCache.contains(key)) {
            return this.nsxc004001AjeInvLineAllocCdForAddlCache.get(key);
        } else {
            String ajeInvLineAllocCd = NSXC004001GetDefCoaTrxCd.GetAjeInvLineAllocCdForAddl(this.glblCmpyCd, svcInvChrgTpCd);
            if (hasValue(ajeInvLineAllocCd)) {
                this.nsxc004001AjeInvLineAllocCdForAddlCache.put(key, ajeInvLineAllocCd);
            }
            return ajeInvLineAllocCd;
        }
        // END 2018/07/05 K.Kojima [QC#23685-1,MOD]
    }

    private boolean hasDsContrProcAlloc(BigDecimal dsContrPk, BigDecimal dsContrDtlPk, String svcInvCrhgTpCd) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("dsContrPk", dsContrPk);
        param.put("dsContrDtlPk", dsContrDtlPk);
        param.put("svcInvCrhgTpCd", svcInvCrhgTpCd);
        List<Map<String, Object>> resultMapList = (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getContrAlloc", param);
        if (resultMapList == null || resultMapList.size() == 0) {
            return false;
        }
        return true;
    }
    // Add End   2016/11/10 <QC#15789>

    // add start 2017/06/23 CSA Defect#18699
    private String getAddlChrgInvTpCd(BigDecimal svcContrAddlChrgBllgPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("svcContrAddlChrgBllgPk", svcContrAddlChrgBllgPk);
        return (String) ssmBatClnt.queryObject("getAddlChrgInvTpCd", param);
    }

    private void changeAllocListTrxCd(List<GetDefCoaTrxCdForOutListInfoBean> allocList, Map<String, Object> rsltSchdMap, String svcInvCrhgTpCd, String addlChrgInvTpCd) {
        String trxCd = (String) rsltSchdMap.get("FM_TRX_CD");
        String trxRsnCd = null;
        if (SVC_INV_CHRG_TP.BASE_CHARGE.equals(svcInvCrhgTpCd)) {
            trxRsnCd = (String) rsltSchdMap.get("FM_TRX_RSN_CD_01");
        } else if (SVC_INV_CHRG_TP.METER_CHARGE.equals(svcInvCrhgTpCd)) {
            trxRsnCd = (String) rsltSchdMap.get("FM_TRX_RSN_CD_02");
        } else if (SVC_INV_CHRG_TP.ADDITIONAL_CHARGE.equals(svcInvCrhgTpCd)) {
            if (ADDL_CHRG_INV_TP.BASE.equals(addlChrgInvTpCd)) {
                trxRsnCd = (String) rsltSchdMap.get("FM_TRX_RSN_CD_01");
            } else if (ADDL_CHRG_INV_TP.USAGE.equals(addlChrgInvTpCd)) {
                trxRsnCd = (String) rsltSchdMap.get("FM_TRX_RSN_CD_02");
            }
        }
        if (!hasValue(trxCd) || !hasValue(trxRsnCd)) {
            return;
        }
        for (GetDefCoaTrxCdForOutListInfoBean outBean : allocList) {
            if (!hasValue(outBean.getTrxCd()) || !hasValue(outBean.getTrxRsnCd())) {
                continue;
            }
            outBean.setTrxCd(trxCd);
            // START 2017/08/28 M.Kidokoro [QC#20757, ADD]
            if (outBean.getTrxRsnCd().equals(TRX_RSN.SVC_SVC_MAN_ALLOC_BR_ONLY)
                    || outBean.getTrxRsnCd().equals(TRX_RSN.SVC_SPLY_MAN_ALLOC_BR_ONLY)
                    || outBean.getTrxRsnCd().equals(TRX_RSN.SVC_EQIP_MAN_ALLOC_BR_ONLY)) {
                continue;
            }
            // END 2017/08/28 M.Kidokoro [QC#20757, ADD]
            outBean.setTrxRsnCd(trxRsnCd);
        }
    }
    // add end 2017/06/23 CSA Defect#18699

    // START 2017/09/05 M.Kidokoro [QC#20079, ADD]
    // START 2017/09/11 K.Kitachi [QC#20446, MOD]
    // START 2017/10/19 K.Kojima [QC#21468,21177,MOD]
    // private boolean isMtrHldForTogether(String invSeptBaseUsgFlg, String mtrHldFlg, BigDecimal svcCrRebilPk) {
    //     if (ZYPCommonFunc.hasValue(svcCrRebilPk)) {
    //         return false;
    //     }
    //     if (ZYPConstant.FLG_OFF_N.equals(invSeptBaseUsgFlg) && ZYPConstant.FLG_ON_Y.equals(mtrHldFlg)) {
    //         return true;
    //     } else {
    //         return false;
    //     }
    // }
    // 
    // private boolean isMtrHldForSeparate(String invSeptBaseUsgFlg, String mtrHldFlg, BigDecimal svcCrRebilPk) {
    //     if (ZYPCommonFunc.hasValue(svcCrRebilPk)) {
    //         return false;
    //     }
    //     if (ZYPConstant.FLG_ON_Y.equals(invSeptBaseUsgFlg) && ZYPConstant.FLG_ON_Y.equals(mtrHldFlg)) {
    //         return true;
    //     } else {
    //         return false;
    //     }
    // }


    // START 2022/02/09 S.Kitamura [QC#59683, MOD]
    // private boolean isUnbllblForTogether(String invSeptBaseUsgFlg, String dsContrCtrlSts, String bllblFlg, BigDecimal svcCrRebilPk) {
    private boolean isUnbllblForTogether(String allLineTogetherFlg, String dsContrCtrlSts, String bllblFlg, BigDecimal svcCrRebilPk) {
    // END 2022/02/09 S.Kitamura [QC#59683, MOD]
        if (ZYPCommonFunc.hasValue(svcCrRebilPk)) {
            return false;
        }
        // START 2022/02/09 S.Kitamura [QC#59683, MOD]
        // if (ZYPConstant.FLG_OFF_N.equals(invSeptBaseUsgFlg) && !checkStatusAndBllblFlg(dsContrCtrlSts, bllblFlg)) {
        if (ZYPConstant.FLG_ON_Y.equals(allLineTogetherFlg)  && !checkStatusAndBllblFlg(dsContrCtrlSts, bllblFlg)) {
        // END 2022/02/09 S.Kitamura [QC#59683, MOD]
            return true;
        } else {
            return false;
        }
    }
    // START 2022/02/09 S.Kitamura [QC#59683, MOD]
    // private boolean isUnbllblForSeparate(String invSeptBaseUsgFlg, String dsContrCtrlSts, String bllblFlg, BigDecimal svcCrRebilPk) {
    private boolean isUnbllblForSeparate(String allLineTogetherFlg, String dsContrCtrlSts, String bllblFlg, BigDecimal svcCrRebilPk) {
    // END 2022/02/09 S.Kitamura [QC#59683, MOD]
        if (ZYPCommonFunc.hasValue(svcCrRebilPk)) {
            return false;
        }
        // START 2022/02/09 S.Kitamura [QC#59683, MOD]
        // if (ZYPConstant.FLG_ON_Y.equals(invSeptBaseUsgFlg) && !checkStatusAndBllblFlg(dsContrCtrlSts, bllblFlg)) {
        if (ZYPConstant.FLG_OFF_N.equals(allLineTogetherFlg)  && !checkStatusAndBllblFlg(dsContrCtrlSts, bllblFlg)) {
        // END 2022/02/09 S.Kitamura [QC#59683, MOD]
            return true;
        } else {
            return false;
        }
    }

    // END 2017/10/19 K.Kojima [QC#21468,21177,MOD]
    // END 2017/09/11 K.Kitachi [QC#20446, MOD]
    // END 2017/09/05 M.Kidokoro [QC#20079, ADD]

    // START 2018/05/31 K.Kojima [QC#23685,DEL]
    // // Add Start 2017/09/27 QC#21277
    // private BigDecimal getPrntDsContrBllgSchdPk(SVC_CONTR_BLLGTMsg svcContrBllgTMsg) {
    //     if (!hasValue(svcContrBllgTMsg.prntSvcContrBllgPk)) {
    //         return null;
    //     }
    //     SVC_CONTR_BLLGTMsg prntSvcContrBllgTMsg = getSvcContrBllg(svcContrBllgTMsg.prntSvcContrBllgPk.getValue());
    //     return prntSvcContrBllgTMsg.dsContrBllgSchdPk.getValue();
    // }
    // // Add End 2017/09/27 QC#21277
    // END 2018/05/31 K.Kojima [QC#23685,DEL]

    // START 2017/10/19 K.Kojima [QC#21468,21177,ADD]
    private boolean checkStatusAndBllblFlg(String dsContrCtrlSts, String bllblFlg) {
        if (!hasValue(dsContrCtrlSts) || !hasValue(bllblFlg)) {
            return true;
        }
        // START 2017/11/17 K.Kojima [QC#22653,MOD]
        // if (!ZYPConstant.FLG_ON_Y.equals(bllblFlg) && !DS_CONTR_CTRL_STS.SYSTEM_HOLD.equals(dsContrCtrlSts)) {
        // START 2018/05/08 U.Kim [QC#25503, MOD]
        // if (!ZYPConstant.FLG_ON_Y.equals(bllblFlg) && !DS_CONTR_CTRL_STS.SYSTEM_HOLD.equals(dsContrCtrlSts) && !DS_CONTR_CTRL_STS.TERMINATED_HOLD.equals(dsContrCtrlSts)) {
        if (!ZYPConstant.FLG_ON_Y.equals(bllblFlg) && !DS_CONTR_CTRL_STS.SYSTEM_HOLD.equals(dsContrCtrlSts) && !DS_CONTR_CTRL_STS.TERMINATED_HOLD.equals(dsContrCtrlSts) && !DS_CONTR_CTRL_STS.EXPIRED_HOLD.equals(dsContrCtrlSts)) {
        // END 2018/05/08 U.Kim [QC#25503, MOD]
        // END 2017/11/17 K.Kojima [QC#22653,MOD]
            return false;
        }
        return true;
    }

    private String createDsContrSkipKey(BigDecimal dsContrPk, String baseBllgFlg, String mtrBllgFlg, String invSeptBaseUsgFlg) {
        return dsContrPk.toString() + "," + baseBllgFlg + "," + mtrBllgFlg + "," + invSeptBaseUsgFlg;
    }
    // END 2017/10/19 K.Kojima [QC#21468,21177,ADD]

    // START 2017/11/17 K.Kojima [QC#21918,ADD]
    private String getSalesRep(BigDecimal svcMachMstrPk) {
        if (svcMachMstrPk == null) {
            return null;
        }
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("svcMachMstrPk", svcMachMstrPk);
        param.put("flgY", ZYPConstant.FLG_ON_Y);
        return (String) ssmBatClnt.queryObject("getSalesRep", param);
    }

    private String getSalesRepForAddl(BigDecimal svcContrAddlChrgBllgPk) {
        if (svcContrAddlChrgBllgPk == null) {
            return null;
        }
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("svcContrAddlChrgBllgPk", svcContrAddlChrgBllgPk);
        param.put("flgY", ZYPConstant.FLG_ON_Y);
        return (String) ssmBatClnt.queryObject("getSalesRepForAddl", param);
    }
    // END 2017/11/17 K.Kojima [QC#21918,ADD]

    // START 2018/04/02 K.Kitachi [QC#24973, ADD]
    // START 2019/10/29 K.Kitachi [QC#54203, DEL]
//    private void setMdlInfo(List<Map<String, Object>> contrDtlInfoList) {
//        Map<String, Object> mdlInfo;
//        for (Map<String, Object> contrDtlInfo : contrDtlInfoList) {
//            if (hasValue((BigDecimal) contrDtlInfo.get("MDL_ID"))) {
//                continue;
//            }
//            mdlInfo = getMdlInfo(contrDtlInfo);
//            if (mdlInfo == null) {
//                continue;
//            }
//            contrDtlInfo.put("MDL_ID", (BigDecimal) mdlInfo.get("MDL_ID"));
//            contrDtlInfo.put("MDL_NM", (String) mdlInfo.get("MDL_NM"));
//        }
//    }
//
//    private Map<String, Object> getMdlInfo(Map<String, Object> contrDtlInfo) {
//        Map<String, Object> param = new HashMap<String, Object>();
//        param.put("glblCmpyCd", this.glblCmpyCd);
//        param.put("dsContrDtlPk", (BigDecimal) contrDtlInfo.get("DS_CONTR_DTL_PK"));
//        List<Map<String, Object>> rsltMapList = (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getMdlInfo", param);
//        if (rsltMapList.size() > 0) {
//            return rsltMapList.get(0);
//        }
//        return null;
//    }
    // END 2019/10/29 K.Kitachi [QC#54203, DEL]
    // END 2018/04/02 K.Kitachi [QC#24973, ADD]

    // START 2018/04/12 M.Naito [QC#23378,ADD]
    private BigDecimal getTotPrcAllocAmt(List<GetDefCoaTrxCdForOutListInfoBean> allocList, int scale) {
        BigDecimal totPrcAllocAmt = null;
        BigDecimal getTotPrcAllocAmt = BigDecimal.ZERO;
        if (allocList == null || allocList.size() == 0) {
            return totPrcAllocAmt;
        }

        for (int i = 0; i < allocList.size(); i++) {
            if (hasValue(allocList.get(i).getPrcAllocAmt())) {
                getTotPrcAllocAmt = getTotPrcAllocAmt.add(allocList.get(i).getPrcAllocAmt());
            }
        }
        if (BigDecimal.ZERO.compareTo(getTotPrcAllocAmt) != 0) {
            totPrcAllocAmt = getTotPrcAllocAmt.setScale(scale, BigDecimal.ROUND_HALF_UP);
        }
        return totPrcAllocAmt;
    }
    // END 2018/04/12 M.Naito [QC#23378,ADD]

    // START 2018/04/26 K.Kojima [QC#23630,ADD]
    private void insertDsContrBllgMtrUsed(SVC_INV_LINE_MTRTMsg svcInvLineMtrTMsg, SVC_CONTR_BLLGTMsg svcContrBllgTMsg, SVC_CONTR_MTR_BLLGTMsg svcContrMtrBllgTMsg) throws S21AbendException {
        BigDecimal freeCopyCnt = svcInvLineMtrTMsg.freeCopyCnt.getValue();
        BigDecimal usgFreeCopyCnt = svcInvLineMtrTMsg.usgFreeCopyCnt.getValue();
        BigDecimal rollOverRatio = svcInvLineMtrTMsg.rollOverRatio.getValue();
        BigDecimal rollOverCnt = svcInvLineMtrTMsg.rollOverCnt.getValue();
        boolean insertCheck = false;
        if (hasValue(freeCopyCnt) && freeCopyCnt.compareTo(BigDecimal.ZERO) > 0) {
            insertCheck = true;
        } else if (hasValue(usgFreeCopyCnt) && usgFreeCopyCnt.compareTo(BigDecimal.ZERO) > 0) {
            insertCheck = true;
        } else if (hasValue(rollOverRatio) && rollOverRatio.compareTo(BigDecimal.ZERO) > 0) {
            insertCheck = true;
        } else if (hasValue(rollOverCnt) && rollOverCnt.compareTo(BigDecimal.ZERO) > 0) {
            insertCheck = true;
        }
        if (insertCheck == false) {
            return;
        }

        BigDecimal dsContrBllgMtrUsedPk = ZYPOracleSeqAccessor.getNumberBigDecimal("DS_CONTR_BLLG_MTR_USED_SQ");

        DS_CONTR_BLLG_MTR_USEDTMsg dsContrBllgMtrUsedTMsg = new DS_CONTR_BLLG_MTR_USEDTMsg();
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.glblCmpyCd, glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.dsContrBllgMtrUsedPk, dsContrBllgMtrUsedPk);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.dsContrBllgMtrPk, svcContrMtrBllgTMsg.dsContrBllgMtrPk);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.dsContrBllgSchdPk, svcContrBllgTMsg.dsContrBllgSchdPk);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.svcInvLineMtrPk, svcInvLineMtrTMsg.svcInvLineMtrPk);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.bllgSchdFromDt, svcContrMtrBllgTMsg.mtrBllgFromDt);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.bllgSchdThruDt, svcContrMtrBllgTMsg.mtrBllgThruDt);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.freeCopyCnt, svcInvLineMtrTMsg.freeCopyCnt);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.usgFreeCopyCnt, svcInvLineMtrTMsg.usgFreeCopyCnt);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.rollOverRatio, svcInvLineMtrTMsg.rollOverRatio);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.rollOverCnt, svcInvLineMtrTMsg.rollOverCnt);
        S21FastTBLAccessor.insert(dsContrBllgMtrUsedTMsg);
        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(dsContrBllgMtrUsedTMsg.getReturnCode())) {
            throw new S21AbendException(NSZM0398E, new String[] {"DS_CONTR_BLLG_MTR_USED" });
        }
    }
    // END 2018/04/26 K.Kojima [QC#23630,ADD]

    // START 2018/05/08 K.Kitachi [QC#23604, ADD]
    private SVC_MACH_MSTRTMsg getMainMachMstrTMsg(SVC_MACH_MSTRTMsg svcMachMstrTMsg) {
        BigDecimal svcConfigMstrPk = svcMachMstrTMsg.svcConfigMstrPk.getValue();
        if (!hasValue(svcConfigMstrPk)) {
            return null;
        }
        SVC_CONFIG_MSTRTMsg svcConfigMstrTMsg = getSvcConfigMstrTMsg(svcConfigMstrPk);
        if (svcConfigMstrTMsg == null) {
            return null;
        }
        BigDecimal svcMachMstrPk = svcConfigMstrTMsg.svcMachMstrPk.getValue();
        if (!hasValue(svcMachMstrPk)) {
            return null;
        }
        return getSvcMachMstrTMsg(svcMachMstrPk);
    }
    // END 2018/05/08 K.Kitachi [QC#23604, ADD]

    // START 2018/05/14 K.Kitachi [QC#23541, ADD]
    // START 2018/06/08 K.Kojima [QC#21974,MOD]
    // private void updateAggLineBllgMtr(SVC_CONTR_BLLGTMsg svcContrBllgTMsg) {
    private void updateAggLineBllgMtr(SVC_CONTR_BLLGTMsg svcContrBllgTMsg, List<BigDecimal> updateAggLineBllgMtrList) {
    // END 2018/06/08 K.Kojima [QC#21974,MOD]

        // START 2018/06/08 K.Kojima [QC#21974,MOD]
        // Map<String, Object> param = new HashMap<String, Object>();
        // param.put("glblCmpyCd", this.glblCmpyCd);
        // param.put("dsContrBllgMtrPk", svcContrBllgTMsg.dsContrBllgMtrPk.getValue());
        // param.put("svcContrBllgThruDt", svcContrBllgTMsg.svcContrBllgThruDt.getValue());
        // Map<String, Object> rsltMap = (Map<String, Object>) this.ssmBatClnt.queryObject("getAggLineUsgRecalInfo", param);
        // if (rsltMap == null) {
        //     return;
        // }
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("svcContrBllgPk", svcContrBllgTMsg.svcContrBllgPk.getValue());
        Map<String, Object> rsltMap = null;
        if (INV_TP.CREDIT_MEMO.equals(svcContrBllgTMsg.invTpCd.getValue())) {
            rsltMap = (Map<String, Object>) this.ssmBatClnt.queryObject("getAggLineUsgRecalInfoForCreditInvoice", param);
        } else {
            rsltMap = (Map<String, Object>) this.ssmBatClnt.queryObject("getAggLineUsgRecalInfo", param);
        }
        if (rsltMap == null) {
            return;
        }
        // END 2018/06/08 K.Kojima [QC#21974,MOD]

        // START 2018/06/08 K.Kojima [QC#21974,ADD]
        BigDecimal aggLineDsContrBllgMtrPk = (BigDecimal) rsltMap.get("DS_CONTR_BLLG_MTR_PK");
        if (updateAggLineBllgMtrList.contains(aggLineDsContrBllgMtrPk)) {
            return;
        }
        // END 2018/06/08 K.Kojima [QC#21974,ADD]

        DS_CONTR_BLLG_MTRTMsg inTMsg = new DS_CONTR_BLLG_MTRTMsg();
        ZYPEZDItemValueSetter.setValue(inTMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(inTMsg.dsContrBllgMtrPk, (BigDecimal) rsltMap.get("DS_CONTR_BLLG_MTR_PK"));
        DS_CONTR_BLLG_MTRTMsg updTMsg = (DS_CONTR_BLLG_MTRTMsg) S21FastTBLAccessor.findByKeyForUpdate(inTMsg);
        if (updTMsg == null) {
            return;
        }

        // START 2018/06/05 K.Kojima [QC#21974,ADD]
        // START 2022/09/01 L.Mandanas [QC#58350, MOD]
          //BigDecimal bllgFreeCopyCnt = updTMsg.bllgFreeCopyCnt.getValue();
        BigDecimal bllgFreeCopyCnt = (BigDecimal) rsltMap.get("BLLG_FREE_COPY_CNT");
        // END 2022/09/01 L.Mandanas [QC#58350, MOD]
        BigDecimal usgFreeCopyCnt = (BigDecimal) rsltMap.get("USG_FREE_COPY_CNT");
        BigDecimal rollOverCnt = (BigDecimal) rsltMap.get("ROLL_OVER_CNT");
        BigDecimal rollOverRatio = (BigDecimal) rsltMap.get("ROLL_OVER_RATIO");
        // START 2022/09/01 L.Mandanas [QC#58350, DEL]
        //if (hasValue(bllgFreeCopyCnt) && hasValue(usgFreeCopyCnt)) {
        //    if (INV_TP.CREDIT_MEMO.equals(svcContrBllgTMsg.invTpCd.getValue())) {
        //        bllgFreeCopyCnt = bllgFreeCopyCnt.add(usgFreeCopyCnt);
        //    } else {
        //        if (bllgFreeCopyCnt.compareTo(BigDecimal.ZERO) != 0) {
        //            bllgFreeCopyCnt = bllgFreeCopyCnt.subtract(usgFreeCopyCnt);
        //            if (bllgFreeCopyCnt.compareTo(BigDecimal.ZERO) < 0) {
        //                bllgFreeCopyCnt = BigDecimal.ZERO;
        //            }
        //        }
        //    }
            // END 2018/06/05 K.Kojima [QC#21974,MOD]
        //}
        // END 2022/09/01 L.Mandanas [QC#58350, DEL]
        // END 2018/06/05 K.Kojima [QC#21974,ADD]
        // START 2018/06/05 K.Kojima [QC#21974,MOD]
        // ZYPEZDItemValueSetter.setValue(updTMsg.bllgFreeCopyCnt, (BigDecimal) rsltMap.get("BLLG_FREE_COPY_CNT"));
        // ZYPEZDItemValueSetter.setValue(updTMsg.rollOverCnt, (BigDecimal) rsltMap.get("ROLL_OVER_CNT"));
        // START 2019/01/21 K.Kitachi [QC#29083, ADD]
        bllgFreeCopyCnt = getCumCopyCnt(inTMsg, svcContrBllgTMsg, bllgFreeCopyCnt);
        // END 2019/01/21 K.Kitachi [QC#29083, ADD]
        ZYPEZDItemValueSetter.setValue(updTMsg.bllgFreeCopyCnt, bllgFreeCopyCnt);
        ZYPEZDItemValueSetter.setValue(updTMsg.rollOverCnt, rollOverCnt);
        // END 2018/06/05 K.Kojima [QC#21974,MOD]
        S21FastTBLAccessor.update(updTMsg);
        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(updTMsg.getReturnCode())) {
            throw new S21AbendException(NSZM0399E, new String[] {"DS_CONTR_BLLG_MTR" });
        }
        // START 2018/06/05 K.Kojima [QC#21974,ADD]
        BigDecimal freeCopyCnt = BigDecimal.ZERO;
        // START 2021/12/10 L.Mandanas [QC#58350, MOD]
//        if (INV_TP.CREDIT_MEMO.equals(svcContrBllgTMsg.invTpCd.getValue())) {
//            freeCopyCnt = (BigDecimal) rsltMap.get("BLLG_FREE_COPY_CNT");
//        } else {
//            freeCopyCnt = bllgFreeCopyCnt;
//        }
        freeCopyCnt = (BigDecimal) rsltMap.get("BLLG_FREE_COPY_CNT");
        // END 2021/12/10 L.Mandanas [QC#58350, MOD]

        boolean insertCheck = false;
        if (hasValue(freeCopyCnt) && freeCopyCnt.compareTo(BigDecimal.ZERO) > 0) {
            insertCheck = true;
        } else if (hasValue(usgFreeCopyCnt) && usgFreeCopyCnt.compareTo(BigDecimal.ZERO) > 0) {
            insertCheck = true;
        } else if (hasValue(rollOverRatio) && rollOverRatio.compareTo(BigDecimal.ZERO) > 0) {
            insertCheck = true;
        } else if (hasValue(rollOverCnt) && rollOverCnt.compareTo(BigDecimal.ZERO) > 0) {
            insertCheck = true;
        }
        if (insertCheck == false) {
            return;
        }
        DS_CONTR_BLLG_SCHDTMsg tMsg = new DS_CONTR_BLLG_SCHDTMsg();
        setValue(tMsg.glblCmpyCd, this.glblCmpyCd);
        setValue(tMsg.dsContrBllgSchdPk, svcContrBllgTMsg.dsContrBllgSchdPk.getValue());
        tMsg = (DS_CONTR_BLLG_SCHDTMsg) S21FastTBLAccessor.findByKey(tMsg);
        if (tMsg == null) {
            return;
        }
        BigDecimal dsContrBllgMtrUsedPk = ZYPOracleSeqAccessor.getNumberBigDecimal("DS_CONTR_BLLG_MTR_USED_SQ");
        DS_CONTR_BLLG_MTR_USEDTMsg dsContrBllgMtrUsedTMsg = new DS_CONTR_BLLG_MTR_USEDTMsg();
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.glblCmpyCd, glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.dsContrBllgMtrUsedPk, dsContrBllgMtrUsedPk);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.dsContrBllgMtrPk, updTMsg.dsContrBllgMtrPk);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.dsContrBllgSchdPk, tMsg.prntDsContrBllgSchdPk);
        dsContrBllgMtrUsedTMsg.svcInvLineMtrPk.clear();
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.bllgSchdFromDt, svcContrBllgTMsg.svcContrBllgFromDt);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.bllgSchdThruDt, svcContrBllgTMsg.svcContrBllgThruDt);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.freeCopyCnt, freeCopyCnt);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.usgFreeCopyCnt, usgFreeCopyCnt);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.rollOverRatio, rollOverRatio);
        ZYPEZDItemValueSetter.setValue(dsContrBllgMtrUsedTMsg.rollOverCnt, rollOverCnt);
        S21FastTBLAccessor.insert(dsContrBllgMtrUsedTMsg);
        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(dsContrBllgMtrUsedTMsg.getReturnCode())) {
            throw new S21AbendException(NSZM0398E, new String[] {"DS_CONTR_BLLG_MTR_USED" });
        }

        updateAggLineBllgMtrList.add(aggLineDsContrBllgMtrPk);
        // END 2018/06/05 K.Kojima [QC#21974,ADD]
    }
    // END 2018/05/14 K.Kitachi [QC#23541, ADD]

    // START 2018/06/29 K.Kojima [QC#23685-1,ADD]
    private void insertContrBllgTrk(List<CONTR_BASE_BLLG_TRKTMsg> contrBaseBllgTrkList, List<CONTR_MTR_BLLG_TRKTMsg> contrMtrBllgTrkList,
            List<CONTR_XS_MTR_BLLG_TRKTMsg> contrXsMtrBllgTrkList, List<CONTR_ADDL_CHRG_BLLG_TRKTMsg> contrAddlChrgBllgTrkList,
            List<CONTR_BLLG_ALLOC_TRKTMsg> contrBllgAllocTrkList, List<CONTR_BLLG_TRKTMsg> contrLbllgTrkList) {

        if (contrBaseBllgTrkList.size() > 0) {
            int result = S21FastTBLAccessor.insert(contrBaseBllgTrkList.toArray(new CONTR_BASE_BLLG_TRKTMsg[contrBaseBllgTrkList.size()]));
            if (result != contrBaseBllgTrkList.size()) {
                throw new S21AbendException(NSZM0398E, new String[] {"CONTR_BASE_BLLG_TRK" });
            }
        }

        if (contrMtrBllgTrkList.size() > 0) {
            int result = S21FastTBLAccessor.insert(contrMtrBllgTrkList.toArray(new CONTR_MTR_BLLG_TRKTMsg[contrMtrBllgTrkList.size()]));
            if (result != contrMtrBllgTrkList.size()) {
                throw new S21AbendException(NSZM0398E, new String[] {"CONTR_MTR_BLLG_TRK" });
            }
        }

        if (contrXsMtrBllgTrkList.size() > 0) {
            int result = S21FastTBLAccessor.insert(contrXsMtrBllgTrkList.toArray(new CONTR_XS_MTR_BLLG_TRKTMsg[contrXsMtrBllgTrkList.size()]));
            if (result != contrXsMtrBllgTrkList.size()) {
                throw new S21AbendException(NSZM0398E, new String[] {"CONTR_XS_MTR_BLLG_TRK" });
            }
        }

        if (contrAddlChrgBllgTrkList.size() > 0) {
            int result = S21FastTBLAccessor.insert(contrAddlChrgBllgTrkList.toArray(new CONTR_ADDL_CHRG_BLLG_TRKTMsg[contrAddlChrgBllgTrkList.size()]));
            if (result != contrAddlChrgBllgTrkList.size()) {
                throw new S21AbendException(NSZM0398E, new String[] {"CONTR_ADDL_CHRG_BLLG_TRK" });
            }
        }

        if (contrBllgAllocTrkList.size() > 0) {
            int result = S21FastTBLAccessor.insert(contrBllgAllocTrkList.toArray(new CONTR_BLLG_ALLOC_TRKTMsg[contrBllgAllocTrkList.size()]));
            if (result != contrBllgAllocTrkList.size()) {
                throw new S21AbendException(NSZM0398E, new String[] {"CONTR_BLLG_ALLOC_TRK" });
            }
        }

        if (contrLbllgTrkList.size() > 0) {
            int result = S21FastTBLAccessor.insert(contrLbllgTrkList.toArray(new CONTR_BLLG_TRKTMsg[contrLbllgTrkList.size()]));
            if (result != contrLbllgTrkList.size()) {
                throw new S21AbendException(NSZM0398E, new String[] {"CONTR_BLLG_TRK" });
            }
        }
    }

    private void removeSvcContrBllg(List<SVC_CONTR_BASE_BLLGTMsg> svcContrBaseBllgList, List<SVC_CONTR_MTR_BLLGTMsg> svcContrMtrBllgList,
            List<SVC_CONTR_XS_MTR_BLLGTMsg> svcContrXsMtrBllgList, List<SVC_CONTR_ADDL_CHRG_BLLGTMsg> svcContrAddlChrgBllgList,
            List<SVC_CONTR_BLLG_ALLOCTMsg> svcContrBllgAllocList, List<SVC_CONTR_BLLGTMsg> svcContrBllgList) {

        if (svcContrBaseBllgList.size() > 0) {
            int result = S21FastTBLAccessor.removeLogical(svcContrBaseBllgList.toArray(new SVC_CONTR_BASE_BLLGTMsg[svcContrBaseBllgList.size()]));
            if (result != svcContrBaseBllgList.size()) {
                throw new S21AbendException(NSAM0033E, new String[] {"SVC_CONTR_BASE_BLLG" });
            }
        }

        if (svcContrMtrBllgList.size() > 0) {
            int result = S21FastTBLAccessor.removeLogical(svcContrMtrBllgList.toArray(new SVC_CONTR_MTR_BLLGTMsg[svcContrMtrBllgList.size()]));
            if (result != svcContrMtrBllgList.size()) {
                throw new S21AbendException(NSAM0033E, new String[] {"SVC_CONTR_MTR_BLLG" });
            }
        }

        if (svcContrXsMtrBllgList.size() > 0) {
            int result = S21FastTBLAccessor.removeLogical(svcContrXsMtrBllgList.toArray(new SVC_CONTR_XS_MTR_BLLGTMsg[svcContrXsMtrBllgList.size()]));
            if (result != svcContrXsMtrBllgList.size()) {
                throw new S21AbendException(NSAM0033E, new String[] {"SVC_CONTR_XS_MTR_BLLG" });
            }
        }

        if (svcContrAddlChrgBllgList.size() > 0) {
            int result = S21FastTBLAccessor.removeLogical(svcContrAddlChrgBllgList.toArray(new SVC_CONTR_ADDL_CHRG_BLLGTMsg[svcContrAddlChrgBllgList.size()]));
            if (result != svcContrAddlChrgBllgList.size()) {
                throw new S21AbendException(NSAM0033E, new String[] {"SVC_CONTR_ADDL_CHRG_BLLG" });
            }
        }

        if (svcContrBllgAllocList.size() > 0) {
            int result = S21FastTBLAccessor.removeLogical(svcContrBllgAllocList.toArray(new SVC_CONTR_BLLG_ALLOCTMsg[svcContrBllgAllocList.size()]));
            if (result != svcContrBllgAllocList.size()) {
                throw new S21AbendException(NSAM0033E, new String[] {"SVC_CONTR_BLLG_ALLOC" });
            }
        }

        if (svcContrBllgList.size() > 0) {
            int result = S21FastTBLAccessor.removeLogical(svcContrBllgList.toArray(new SVC_CONTR_BLLGTMsg[svcContrBllgList.size()]));
            if (result != svcContrBllgList.size()) {
                throw new S21AbendException(NSAM0033E, new String[] {"SVC_CONTR_BLLG" });
            }
        }
    }
    // END 2018/06/29 K.Kojima [QC#23685-1,ADD]

    // START 2018/07/04 K.Kojima [QC#23685-1,ADD]
    private void setGetDefCoaTrxCdInfoBeanOtherData(GetDefCoaTrxCdInfoBean bean) {
        if (hasValue(bean.getDsContrDtlPk())) {
            if (this.nsxc004001ContrInfoCache.contains(bean.getDsContrDtlPk())) {
                bean.setContrInfo(this.nsxc004001ContrInfoCache.get(bean.getDsContrDtlPk()));
            } else {
                Map<String, Object> nsxc004001ContrInfo = NSXC004001GetDefCoaTrxCd.getContrInfo(bean);
                if (nsxc004001ContrInfo != null) {
                    bean.setContrInfo(nsxc004001ContrInfo);
                    this.nsxc004001ContrInfoCache.put(bean.getDsContrDtlPk(), nsxc004001ContrInfo);
                }
            }
            if (this.nsxc004001DsContrDtlTMsgCache.contains(bean.getDsContrDtlPk())) {
                bean.setDsContrDtlTMsg(this.nsxc004001DsContrDtlTMsgCache.get(bean.getDsContrDtlPk()));
            } else {
                DS_CONTR_DTLTMsg nsxc004001DsContrDtlTMsg = getDsContrDtlTMsg(bean.getDsContrDtlPk());
                if (nsxc004001DsContrDtlTMsg != null) {
                    bean.setDsContrDtlTMsg(nsxc004001DsContrDtlTMsg);
                    this.nsxc004001DsContrDtlTMsgCache.put(bean.getDsContrDtlPk(), nsxc004001DsContrDtlTMsg);
                }
            }
        }
    }

    /**
     * Get DS_CONTR_DTL
     * @param dsContrPk BigDecimal
     * @return DS_CONTRTMsg
     */
    private DS_CONTR_DTLTMsg getDsContrDtlTMsg(BigDecimal dsContrDtlPk) {
        DS_CONTR_DTLTMsg tMsg = new DS_CONTR_DTLTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.dsContrDtlPk, dsContrDtlPk);
        return (DS_CONTR_DTLTMsg) S21FastTBLAccessor.findByKey(tMsg);
    }
    // END 2018/07/04 K.Kojima [QC#23685-1,ADD]

    // add start 2018/08/09 QC#27329-3
    private void setOrigSvcInvInfo(SVC_INVTMsg svcInvTMsg, String origSvcInvNum) {
        SVC_INVTMsg origSvcInvTMsg = getSvcInvBySvcInvNum(origSvcInvNum);
        if (origSvcInvTMsg == null) {
            return;
        }
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCustCd, origSvcInvTMsg.billToCustCd);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.shipToCustCd, origSvcInvTMsg.shipToCustCd);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToLocNm, origSvcInvTMsg.sellToLocNm);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToAddlLocNm, origSvcInvTMsg.sellToAddlLocNm);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToFirstLineAddr, origSvcInvTMsg.sellToFirstLineAddr);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToScdLineAddr, origSvcInvTMsg.sellToScdLineAddr);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToThirdLineAddr, origSvcInvTMsg.sellToThirdLineAddr);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToFrthLineAddr, origSvcInvTMsg.sellToFrthLineAddr);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToCtyAddr, origSvcInvTMsg.sellToCtyAddr);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToProvNm, origSvcInvTMsg.sellToProvNm);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToCntyNm, origSvcInvTMsg.sellToCntyNm);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToStCd, origSvcInvTMsg.sellToStCd);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToPostCd, origSvcInvTMsg.sellToPostCd);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToCtryCd, origSvcInvTMsg.sellToCtryCd);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToFirstRefCmntTxt, origSvcInvTMsg.sellToFirstRefCmntTxt);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.sellToScdRefCmntTxt, origSvcInvTMsg.sellToScdRefCmntTxt);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCustAcctCd, origSvcInvTMsg.billToCustAcctCd);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.ctacPsnPk, origSvcInvTMsg.ctacPsnPk);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToLocNm, origSvcInvTMsg.billToLocNm);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToAddlLocNm, origSvcInvTMsg.billToAddlLocNm);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToFirstLineAddr, origSvcInvTMsg.billToFirstLineAddr);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToScdLineAddr, origSvcInvTMsg.billToScdLineAddr);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToThirdLineAddr, origSvcInvTMsg.billToThirdLineAddr);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToFrthLineAddr, origSvcInvTMsg.billToFrthLineAddr);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCtyAddr, origSvcInvTMsg.billToCtyAddr);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToProvNm, origSvcInvTMsg.billToProvNm);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCntyNm, origSvcInvTMsg.billToCntyNm);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToStCd, origSvcInvTMsg.billToStCd);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToPostCd, origSvcInvTMsg.billToPostCd);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToCtryCd, origSvcInvTMsg.billToCtryCd);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToFirstRefCmntTxt, origSvcInvTMsg.billToFirstRefCmntTxt);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.billToScdRefCmntTxt, origSvcInvTMsg.billToScdRefCmntTxt);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.slsRepTocCd, origSvcInvTMsg.slsRepTocCd);
        ZYPEZDItemValueSetter.setValue(svcInvTMsg.shipToCustAcctCd, origSvcInvTMsg.shipToCustAcctCd);
    }

    private void setOrigSvcInvLineInfo(SVC_INV_LINETMsg svcInvLineTMsg, String origSvcInvNum, BigDecimal dsContrBllgSchdPk) {
        DS_CONTR_BLLG_SCHDTMsg schdTMsg = getDsContrBllgSchdTMsg(dsContrBllgSchdPk);
        if (schdTMsg == null || !hasValue(schdTMsg.origDsContrBllgSchdPk)) {
            return ;
        }
        SVC_INV_LINETMsg origSvcInvLineTMsg = getSvcInvLineBySchdPk(origSvcInvNum, schdTMsg.origDsContrBllgSchdPk.getValue());
        if (origSvcInvLineTMsg == null) {
            return;
        }
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.slsRepTocCd, origSvcInvLineTMsg.slsRepTocCd);
        ZYPEZDItemValueSetter.setValue(svcInvLineTMsg.shipToCustCd, origSvcInvLineTMsg.shipToCustCd);
    }

    private SVC_INVTMsg getSvcInvBySvcInvNum(String svcInvNum) {
        SVC_INVTMsg tMsg = new SVC_INVTMsg();
        tMsg.setSQLID("001");
        tMsg.setConditionValue("glblCmpyCd01", glblCmpyCd);
        tMsg.setConditionValue("svcInvNum01", svcInvNum);
        SVC_INVTMsgArray tMsgArray = (SVC_INVTMsgArray) EZDTBLAccessor.findByCondition(tMsg);
        if (tMsgArray.length() > 0) {
            return tMsgArray.no(0);
        }
        return null;
    }

    private SVC_INV_LINETMsg getSvcInvLineBySchdPk(String svcInvNum, BigDecimal dsContrBllgSchdPk) {
        SVC_INV_LINETMsg tMsg = new SVC_INV_LINETMsg();
        tMsg.setSQLID("005");
        tMsg.setConditionValue("glblCmpyCd01", glblCmpyCd);
        tMsg.setConditionValue("svcInvNum01", svcInvNum);
        tMsg.setConditionValue("dsContrBllgSchdPk01", dsContrBllgSchdPk);
        SVC_INV_LINETMsgArray tMsgArray = (SVC_INV_LINETMsgArray) EZDTBLAccessor.findByCondition(tMsg);
        if (tMsgArray.length() > 0) {
            return tMsgArray.no(0);
        }
        return null;
    }
    // add end 2018/08/09 QC#27329-3
    // Add Start 2018/09/20 QC#28171
    private List<GetDefCoaTrxCdForOutListInfoBean> setBrAllocList(GetDefCoaTrxCdForOutListInfoBean targetBean, Map<String, Object> rsltSchdMap, String svcInvCrhgTpCd, String crhgTpCd) {
        List<GetDefCoaTrxCdForOutListInfoBean> outList = new ArrayList<GetDefCoaTrxCdForOutListInfoBean>();
        if (hasValue(targetBean.getCoaBrCd())) {
            outList.add(targetBean);
            return outList;
        }

        BigDecimal aftDeclPntDigitNum = (BigDecimal) rsltSchdMap.get("AFT_DECL_PNT_DIGIT_NUM");
        int scale = aftDeclPntDigitNum.intValue();

        // get Contract Branch Allocation
        List<GetDefCoaTrxCdForOutListInfoBean> contrBrAllocList = getContrBrAlloc(rsltSchdMap, svcInvCrhgTpCd);
        if (contrBrAllocList.size() > 0) {
            return setContrBrAlloc(contrBrAllocList, targetBean, scale);
        }

        // get Defalut Branch
        List<GetDefCoaTrxCdForOutListInfoBean> defaultBrAllocList = getDefaultBrAlloc(rsltSchdMap, crhgTpCd);
        if (defaultBrAllocList.size() > 0) {
            return setContrBrAlloc(defaultBrAllocList, targetBean, scale);
        }
        return outList;
    }

    private List<GetDefCoaTrxCdForOutListInfoBean> getContrBrAlloc(Map<String, Object> rsltSchdMap, String svcInvCrhgTpCd) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("dsContrPk", (BigDecimal) rsltSchdMap.get("DS_CONTR_PK"));
        param.put("dsContrDtlPk", (BigDecimal) rsltSchdMap.get("DS_CONTR_DTL_PK"));
        param.put("svcInvCrhgTpCd", svcInvCrhgTpCd);
        List<Map<String, Object>> contrBrAllocList = (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getContrBrAlloc", param);

        List<GetDefCoaTrxCdForOutListInfoBean> rtnList = new ArrayList<GetDefCoaTrxCdForOutListInfoBean>();
        GetDefCoaTrxCdForOutListInfoBean been;
        for (Map<String, Object> contrBrAlloc : contrBrAllocList) {
            been = new GetDefCoaTrxCdForOutListInfoBean();
            been.setCoaBrCd((String) contrBrAlloc.get("COA_BR_CD"));
            been.setPrcAllocPct((BigDecimal) contrBrAlloc.get("PRC_ALLOC_RATE"));
            rtnList.add(been);
        }
        return rtnList;
    }

    private List<GetDefCoaTrxCdForOutListInfoBean> getDefaultBrAlloc(Map<String, Object> rsltSchdMap, String crhgTpCd) {
        GetDefCoaTrxCdInfoBean bean = new GetDefCoaTrxCdInfoBean();
        bean.setGlblCmpyCd(this.glblCmpyCd);
        bean.setSvcMachMstrPk((BigDecimal) rsltSchdMap.get("SVC_MACH_MSTR_PK"));
        bean.setDsContrDtlPk((BigDecimal) rsltSchdMap.get("DS_CONTR_DTL_PK"));
        bean.setMdseCd((String) rsltSchdMap.get("SVC_PGM_MDSE_CD"));
        bean.setDsAcctNum((String) rsltSchdMap.get("DS_ACCT_NUM"));
        bean.setBaseChrgFlg(FLG_OFF_N);
        bean.setUsgChrgFlg(FLG_OFF_N);
        bean.setAddlChrgFlg(FLG_OFF_N);
        if (SVC_INV_CHRG_TP.BASE_CHARGE.equals(crhgTpCd)) {
            bean.setBaseChrgFlg(FLG_ON_Y);
        }
        if (SVC_INV_CHRG_TP.METER_CHARGE.equals(crhgTpCd)) {
            bean.setUsgChrgFlg(FLG_ON_Y);
        }
        if (SVC_INV_CHRG_TP.ADDITIONAL_CHARGE.equals(crhgTpCd)) {
            bean.setAddlChrgFlg(FLG_ON_Y);
        }
        setGetDefCoaTrxCdInfoBeanOtherData(bean);
        if (hasValue(bean.getSvcMachMstrPk())) {
            bean.setMdlId((BigDecimal) rsltSchdMap.get("MDL_ID"));
        }

        if (NSXC004001GetDefCoaTrxCd.getDefCoaTrxCd(bean) != null) {
            return bean.getOutLisstInfoBean();
        }
        return new ArrayList<GetDefCoaTrxCdForOutListInfoBean>();
    }

    private List<GetDefCoaTrxCdForOutListInfoBean> setContrBrAlloc(List<GetDefCoaTrxCdForOutListInfoBean> contrBrAllocList, GetDefCoaTrxCdForOutListInfoBean targetBean, int scale) {
        List<GetDefCoaTrxCdForOutListInfoBean> outList = new ArrayList<GetDefCoaTrxCdForOutListInfoBean>();
        BigDecimal sumPrcAllocPct = BigDecimal.ZERO;
        GetDefCoaTrxCdForOutListInfoBean maxPctOutBean = null;
        BigDecimal sumPrcAllocAmt = BigDecimal.ZERO;
        GetDefCoaTrxCdForOutListInfoBean maxAmtOutBean = null;
        BigDecimal brAllocRate;
        BigDecimal prcAllocPct;
        BigDecimal prcAllocAmt;
        List<String> existBrMap = new ArrayList<String>();
        for (GetDefCoaTrxCdForOutListInfoBean contrBrAlloc : contrBrAllocList) {
            brAllocRate = contrBrAlloc.getPrcAllocPct();
            if (!hasValue(brAllocRate) || existBrMap.contains(contrBrAlloc.getCoaBrCd())) {
                continue;
            }

            GetDefCoaTrxCdForOutListInfoBean outBean = new GetDefCoaTrxCdForOutListInfoBean();
            outBean.setCoaCmpyCd(targetBean.getCoaCmpyCd());
            outBean.setCoaAfflCd(targetBean.getCoaAfflCd());
            outBean.setCoaBrCd(contrBrAlloc.getCoaBrCd());
            outBean.setCoaChCd(targetBean.getCoaChCd());
            outBean.setCoaCcCd(targetBean.getCoaCcCd());
            outBean.setCoaAcctCd(targetBean.getCoaAcctCd());
            outBean.setCoaProdCd(targetBean.getCoaProdCd());
            outBean.setCoaProjCd(targetBean.getCoaProjCd());
            outBean.setCoaExtnCd(targetBean.getCoaExtnCd());
            outBean.setInvLineSplTpCd("");
            outBean.setTrxCd(targetBean.getTrxCd());
            outBean.setTrxRsnCd(targetBean.getTrxRsnCd());
            outBean.setDfrdAcctgRuleCd(targetBean.getDfrdAcctgRuleCd());

            if (hasValue(targetBean.getPrcAllocPct())) {
                prcAllocPct = targetBean.getPrcAllocPct().multiply(brAllocRate).divide(BigDecimal.valueOf(INT_100), scale, RoundingMode.HALF_UP);
                outBean.setPrcAllocPct(prcAllocPct);

                sumPrcAllocPct = sumPrcAllocPct.add(prcAllocPct);
                if (maxPctOutBean == null || maxPctOutBean.getPrcAllocPct().compareTo(prcAllocPct) < 0) {
                    maxPctOutBean = outBean;
                }
            }

            if (hasValue(targetBean.getPrcAllocAmt())) {
                prcAllocAmt = targetBean.getPrcAllocAmt().multiply(brAllocRate).divide(BigDecimal.valueOf(INT_100), scale, BigDecimal.ROUND_HALF_UP);
                outBean.setPrcAllocAmt(prcAllocAmt);

                sumPrcAllocAmt = sumPrcAllocAmt.add(prcAllocAmt);
                if (maxAmtOutBean == null || maxAmtOutBean.getPrcAllocAmt().compareTo(prcAllocAmt) < 0) {
                    maxAmtOutBean = outBean;
                }
            }
            existBrMap.add(contrBrAlloc.getCoaBrCd());
            outList.add(outBean);
        }

        // Adjust
        BigDecimal maxPct = targetBean.getPrcAllocPct();
        if (maxPctOutBean != null && sumPrcAllocPct.compareTo(maxPct) != 0) {
            BigDecimal diffPrcAllocPct = maxPct.subtract(sumPrcAllocPct);
            maxPctOutBean.setPrcAllocPct(maxPctOutBean.getPrcAllocPct().add(diffPrcAllocPct));
        }

        BigDecimal maxAmt = targetBean.getPrcAllocAmt();
        if (maxAmtOutBean != null && sumPrcAllocAmt.compareTo(maxAmt) != 0) {
            BigDecimal diffPrcAllocAmt = maxAmt.subtract(sumPrcAllocAmt);
            maxAmtOutBean.setPrcAllocAmt(maxAmtOutBean.getPrcAllocAmt().add(diffPrcAllocAmt));
        }

        return outList;
    }
    // Add End 2018/09/20 QC#28171

    // START 2018/11/05 K.Kitachi [QC#28627, ADD]
    // mod start 2019/10/21 QC#53521
//    private boolean checkLinkContr(String svcInvKey, String dsContrCatgCd, String contrLinkNum, String svcContrBllgThruDt) {
//        if (!hasValue(contrLinkNum)) {
//            return true;
//        }
//        if (!checkHldByLinkNum(contrLinkNum, svcContrBllgThruDt, DS_CONTR_CTRL_STS.BILLING_HOLD)) {
//            addMessage(dsContrCatgCd, svcInvKey, 2, NSAM0739W, "Billing Hold", contrLinkNum);
//            return false;
//        }
//        if (!checkHldByLinkNum(contrLinkNum, svcContrBllgThruDt, DS_CONTR_CTRL_STS.HOLD)) {
//            addMessage(dsContrCatgCd, svcInvKey, 2, NSAM0739W, "Hold", contrLinkNum);
//            return false;
//        }
//        if (!checkHldByLinkNum(contrLinkNum, svcContrBllgThruDt, DS_CONTR_CTRL_STS.SYSTEM_HOLD)) {
//            addMessage(dsContrCatgCd, svcInvKey, 2, NSAM0739W, "System Hold", contrLinkNum);
//            return false;
//        }
//        // START 2019/01/17 S.Kitamura [QC#29952, ADD]
//        if (!checkHldByLinkNum(contrLinkNum, svcContrBllgThruDt, DS_CONTR_CTRL_STS.QA_HOLD)) {
//            addMessage(dsContrCatgCd, svcInvKey, 2, NSAM0739W, "QA Hold", contrLinkNum);
//            return false;
//        }
//        // END 2019/01/17 S.Kitamura [QC#29952, ADD]
//        return true;
//    }

    private String checkLinkContr(String svcInvKey, String dsContrCatgCd, String contrLinkNum, String mtrBllgNextBllgDt) {
        if (!hasValue(contrLinkNum)) {
            return null;
        }
        if (!checkHldByLinkNum(contrLinkNum, mtrBllgNextBllgDt, DS_CONTR_CTRL_STS.BILLING_HOLD)) {
            addMessage(dsContrCatgCd, svcInvKey, 2, NSAM0739W, "Billing Hold", contrLinkNum);
            return DS_CONTR_CTRL_STS.BILLING_HOLD;
        }
        if (!checkHldByLinkNum(contrLinkNum, mtrBllgNextBllgDt, DS_CONTR_CTRL_STS.HOLD)) {
            addMessage(dsContrCatgCd, svcInvKey, 2, NSAM0739W, "Hold", contrLinkNum);
            return DS_CONTR_CTRL_STS.HOLD;
        }
        if (!checkHldByLinkNum(contrLinkNum, mtrBllgNextBllgDt, DS_CONTR_CTRL_STS.QA_HOLD)) {
            addMessage(dsContrCatgCd, svcInvKey, 2, NSAM0739W, "QA Hold", contrLinkNum);
            return DS_CONTR_CTRL_STS.QA_HOLD;
        }
        if (hasValue(mtrBllgNextBllgDt)) {
            if (!checkHldByLinkNum(contrLinkNum, mtrBllgNextBllgDt, DS_CONTR_CTRL_STS.SYSTEM_HOLD)) {
                addMessage(dsContrCatgCd, svcInvKey, 2, NSAM0739W, "System Hold", contrLinkNum);
                return DS_CONTR_CTRL_STS.SYSTEM_HOLD;
            }
        }
        return null;
    }
    // mod end 2019/10/21 QC#53521

    // mod start 2019/10/21 QC#53521
    //private boolean checkHldByLinkNum(String contrLinkNum, String svcContrBllgThruDt, String dsContrCtrlStsCd) {
    private boolean checkHldByLinkNum(String contrLinkNum, String mtrBllgNextBllgDt, String dsContrCtrlStsCd) {
        //Map<String, Object> param = createParamHldByLinkNum(contrLinkNum, svcContrBllgThruDt, dsContrCtrlStsCd);
        Map<String, Object> param = createParamHldByLinkNum(contrLinkNum, mtrBllgNextBllgDt, dsContrCtrlStsCd);
    // mod end 2019/10/21 QC#53521
        BigDecimal count = countHldByLinkNum(param, "countHldHdrByLinkNum");
        if (BigDecimal.ZERO.compareTo(count) < 0) {
            return false;
        }
        count = countHldByLinkNum(param, "countHldDtlByLinkNum");
        if (BigDecimal.ZERO.compareTo(count) < 0) {
            return false;
        }
        count = countHldByLinkNum(param, "countHldBllgMtrByLinkNum");
        if (BigDecimal.ZERO.compareTo(count) < 0) {
            return false;
        }
        count = countHldByLinkNum(param, "countHldPrcEffByLinkNum");
        if (BigDecimal.ZERO.compareTo(count) < 0) {
            return false;
        }
        return true;
    }

    // mod start 2019/10/21 QC#53521
    //private Map<String, Object> createParamHldByLinkNum(String contrLinkNum, String svcContrBllgThruDt, String dsContrCtrlStsCd) {
    private Map<String, Object> createParamHldByLinkNum(String contrLinkNum, String mtrBllgNextBllgDt, String dsContrCtrlStsCd) {
    // mod end 2019/10/21 QC#53521
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("contrLinkNum", contrLinkNum);
        param.put("dsContrCtrlStsCd", dsContrCtrlStsCd);
    // mod start 2019/10/21 QC#53521
        //param.put("svcContrBllgThruDt", svcContrBllgThruDt);
        param.put("mtrBllgNextBllgDt", mtrBllgNextBllgDt);
    // mod end 2019/10/21 QC#53521
        return param;
    }
    // mod end 2019/10/21 QC#53521

    private BigDecimal countHldByLinkNum(Map<String, Object> param, String statementId) {
        return (BigDecimal) this.ssmBatClnt.queryObject(statementId, param);
    }
    // END 2018/11/05 K.Kitachi [QC#28627, ADD]

    // START 2019/01/21 K.Kitachi [QC#29083, ADD]
    private BigDecimal getCumCopyCnt(DS_CONTR_BLLG_MTRTMsg dsContrBllgMtrTMsg, SVC_CONTR_BLLGTMsg svcContrBllgTMsg, BigDecimal bllgFreeCopyCnt) {
        if (!hasValue(dsContrBllgMtrTMsg.cumCopyCnt)) {
            return bllgFreeCopyCnt;
        }
        Map<String, Object> nextBllgSchdDt = getNextBllgSchdDt(svcContrBllgTMsg.dsContrBllgSchdPk.getValue());
        if (nextBllgSchdDt == null) {
            return bllgFreeCopyCnt;
        }
        int diffMonths = NSXC001001CalcDate.diffMonths(dsContrBllgMtrTMsg.cumCopyStartDt.getValue(), svcContrBllgTMsg.svcContrBllgThruDt.getValue());
        int addMonths = diffMonths / dsContrBllgMtrTMsg.cumCopyFreqMthAot.getValueInt() * dsContrBllgMtrTMsg.cumCopyFreqMthAot.getValueInt();
        String nextResetDate = NSXC001001CalcDate.addMonths(dsContrBllgMtrTMsg.cumCopyStartDt.getValue(), addMonths);
        if (ZYPDateUtil.compare(nextResetDate, dsContrBllgMtrTMsg.cumCopyStartDt.getValue()) < 0) {
            return bllgFreeCopyCnt;
        }
        if (ZYPDateUtil.compare(nextResetDate, dsContrBllgMtrTMsg.cumCopyEndDt.getValue()) > 0) {
            return bllgFreeCopyCnt;
        }
        if (ZYPDateUtil.compare(nextResetDate, (String) nextBllgSchdDt.get("BLLG_SCHD_FROM_DT")) < 0) {
            return bllgFreeCopyCnt;
        }
        if (ZYPDateUtil.compare(nextResetDate, (String) nextBllgSchdDt.get("BLLG_SCHD_THRU_DT")) > 0) {
            return bllgFreeCopyCnt;
        }
        return dsContrBllgMtrTMsg.cumCopyCnt.getValue();
    }

    private Map<String, Object> getNextBllgSchdDt(BigDecimal dsContrBllgSchdPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("dsContrBllgSchdPk", dsContrBllgSchdPk);
        param.put("invTpCd", INV_TP.INVOICE);
        return (Map<String, Object>) this.ssmBatClnt.queryObject("getNextBllgSchdDt", param);
    }
    // END 2019/01/21 K.Kitachi [QC#29083, ADD]

    // START 2019/07/17 T.Kanasaka [QC#51576, ADD]
    private boolean isExistsNoMeterEntryTogetherGroup(BigDecimal dsContrPk, String bllgMtrBillToCustCd, String nextBllgDt, String crCardCustRefNum, BigDecimal ctacPsnPk) {

        if (!hasValue(crCardCustRefNum)) {
            crCardCustRefNum = "N/A";
        }
        if (!hasValue(ctacPsnPk)) {
            ctacPsnPk = new BigDecimal(-1);
        }

        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("dsContrMachLvl1", DS_CONTR_MACH_LVL_NUM_1);
        param.put("dsContrMachLvl2", DS_CONTR_MACH_LVL_NUM_2);
        param.put("dsContrMachLvl3", DS_CONTR_MACH_LVL_NUM_3);
        param.put("dsContrPk", dsContrPk);
        param.put("bllgMtrBillToCustCd", bllgMtrBillToCustCd);
        param.put("nextBllgDt", nextBllgDt);
        param.put("crCardCustRefNum", crCardCustRefNum);
        param.put("ctacPsnPk", ctacPsnPk);
        BigDecimal count = (BigDecimal) this.ssmBatClnt.queryObject("countNoMeterEntryTogetherGroup", param);
        if (BigDecimal.ZERO.compareTo(count) < 0) {
            return true;
        }
        return false;
    }
    // END 2019/07/17 T.Kanasaka [QC#51576, ADD]

    // START 2019/10/29 K.Kitachi [QC#54203, ADD]
    private Map<String, Object> getSvcMachMstrHist(BigDecimal svcMachMstrPk) {
        if (!hasValue(svcMachMstrPk)) {
            return null;
        }
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("svcMachMstrPk", svcMachMstrPk);
        param.put("svcMachMstrStsCdList", this.svcMachMstrStsCust);
        return (Map<String, Object>) this.ssmBatClnt.queryObject("getSvcMachMstrHist", param);
    }

    private Map<String, Object> getSvcConfigMstrDtl(BigDecimal svcMachMstrPk, BigDecimal svcConfigMstrPk) {
        if (!hasValue(svcMachMstrPk) || !hasValue(svcConfigMstrPk)) {
            return null;
        }
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("svcMachMstrPk", svcMachMstrPk);
        param.put("svcConfigMstrPk", svcConfigMstrPk);
        return (Map<String, Object>) this.ssmBatClnt.queryObject("getSvcConfigMstrDtl", param);
    }

    private void setMainUnitInfo(Map<String, Object> mainUnitInfo, BigDecimal svcMachMstrPk, BigDecimal svcConfigMstrPk) {
        String svcMachMstrStsCd = (String) mainUnitInfo.get("SVC_MACH_MSTR_STS_CD");
        if (!hasValue(svcMachMstrStsCd) || this.svcMachMstrStsCust.contains(svcMachMstrStsCd)) {
            return;
        }
        Map<String, Object> svcMachMstrHist = getSvcMachMstrHist(svcMachMstrPk);
        if (svcMachMstrHist != null) {
            mainUnitInfo.put("SHIP_TO_CUST_CD", (String) svcMachMstrHist.get("SHIP_TO_CUST_CD"));
            mainUnitInfo.put("MDSE_CD", (String) svcMachMstrHist.get("MDSE_CD"));
            mainUnitInfo.put("SER_NUM", (String) svcMachMstrHist.get("SER_NUM"));
            mainUnitInfo.put("MDSE_NM", (String) svcMachMstrHist.get("MDSE_NM"));
        }
        Map<String, Object> svcConfigMstrDtl = getSvcConfigMstrDtl(svcMachMstrPk, svcConfigMstrPk);
        if (svcConfigMstrDtl != null) {
            mainUnitInfo.put("MDL_ID", (BigDecimal) svcConfigMstrDtl.get("MDL_ID"));
            mainUnitInfo.put("MDL_NM", (String) svcConfigMstrDtl.get("MDL_NM"));
        }
    }

    private void setContrDtlInfoList(List<Map<String, Object>> contrDtlInfoList, String dsContrCatgCd) {
        for (Map<String, Object> contrDtlInfo : contrDtlInfoList) {
            String svcMachMstrStsCd = (String) contrDtlInfo.get("SVC_MACH_MSTR_STS_CD");
            if (!hasValue(svcMachMstrStsCd) || this.svcMachMstrStsCust.contains(svcMachMstrStsCd)) {
                continue;
            }
            Map<String, Object> mainMachMstrHist = getSvcMachMstrHist((BigDecimal) contrDtlInfo.get("SVC_MACH_MSTR_PK"));
            Map<String, Object> dtlMachMstrHist = getSvcMachMstrHist((BigDecimal) contrDtlInfo.get("DTL_MACH_MSTR_PK"));
            Map<String, Object> dtlConfigMstrDtl = getSvcConfigMstrDtl((BigDecimal) contrDtlInfo.get("DTL_MACH_MSTR_PK"), (BigDecimal) contrDtlInfo.get("DTL_CONFIG_MSTR_PK"));
            String mainUnitLineFlg = (String) contrDtlInfo.get("MAIN_UNIT_LINE_FLG");
            if (FLG_ON_Y.equals(mainUnitLineFlg) || DS_CONTR_DTL_TP.ACCESSORIES.equals((String) contrDtlInfo.get("DS_CONTR_DTL_TP_CD"))) {
                if (dtlMachMstrHist != null) {
                    contrDtlInfo.put("MDSE_CD", (String) dtlMachMstrHist.get("MDSE_CD"));
                    contrDtlInfo.put("MDSE_NM", (String) dtlMachMstrHist.get("MDSE_NM"));
                    contrDtlInfo.put("CUR_LOC_ACCT_NUM", (String) dtlMachMstrHist.get("CUR_LOC_ACCT_NUM"));
                    contrDtlInfo.put("CUR_LOC_NUM", (String) dtlMachMstrHist.get("CUR_LOC_NUM"));
                    contrDtlInfo.put("SER_NUM", (String) dtlMachMstrHist.get("SER_NUM"));
                }
                if (dtlConfigMstrDtl != null) {
                    contrDtlInfo.put("MDL_ID", (BigDecimal) dtlConfigMstrDtl.get("MDL_ID"));
                    contrDtlInfo.put("MDL_NM", (String) dtlConfigMstrDtl.get("MDL_NM"));
                }
            }
            if (FLG_ON_Y.equals(mainUnitLineFlg)) {
                if (mainMachMstrHist != null) {
                    contrDtlInfo.put("SHIP_TO_CUST_CD", (String) mainMachMstrHist.get("SHIP_TO_CUST_CD"));
                }
            }
            if (DS_CONTR_CATG.REGULAR.equals(dsContrCatgCd)) {
                if (dtlMachMstrHist != null) {
                    contrDtlInfo.put("CTRL_FLD_TXT_01", (String) dtlMachMstrHist.get("CTRL_FLD_TXT_01"));
                    contrDtlInfo.put("CTRL_FLD_TXT_02", (String) dtlMachMstrHist.get("CTRL_FLD_TXT_02"));
                    contrDtlInfo.put("CTRL_FLD_TXT_03", (String) dtlMachMstrHist.get("CTRL_FLD_TXT_03"));
                    contrDtlInfo.put("CTRL_FLD_TXT_04", (String) dtlMachMstrHist.get("CTRL_FLD_TXT_04"));
                    contrDtlInfo.put("CTRL_FLD_TXT_05", (String) dtlMachMstrHist.get("CTRL_FLD_TXT_05"));
                    contrDtlInfo.put("CTRL_FLD_TXT_06", (String) dtlMachMstrHist.get("CTRL_FLD_TXT_06"));
                }
            }
        }
    }
    // END 2019/10/29 K.Kitachi [QC#54203, ADD]

    // START 2019/11/08 K.Kitachi [QC#54368, ADD]
    private String createGrpSvcInvKey(SVC_CONTR_BLLGTMsg svcContrBllgTMsg) {
        StringBuilder sb = new StringBuilder();
        sb.append(svcContrBllgTMsg.dsContrPk.getValue());
        sb.append(svcContrBllgTMsg.baseChrgFlg.getValue());
        sb.append(svcContrBllgTMsg.dsContrDtlPk.getValue());
        sb.append(svcContrBllgTMsg.usgChrgFlg.getValue());
        if (FLG_ON_Y.equals(svcContrBllgTMsg.usgChrgFlg.getValue())) {
            sb.append(svcContrBllgTMsg.dsContrBllgMtrPk.getValue());
        }
        return sb.toString();
    }

    private boolean isExistsPoInclBllgPeriod(BigDecimal svcContrBllgPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("svcContrBllgPk", svcContrBllgPk);
        param.put("dsContrMachLvl1", DS_CONTR_MACH_LVL_NUM_1);
        param.put("dsContrMachLvl2", DS_CONTR_MACH_LVL_NUM_2);
        param.put("dsContrMachLvl3", DS_CONTR_MACH_LVL_NUM_3);
        BigDecimal count = (BigDecimal) this.ssmBatClnt.queryObject("countPoInclBllgPeriod", param);
        if (BigDecimal.ZERO.compareTo(count) < 0) {
            return true;
        }
        return false;
    }

    private boolean checkPoPeriodForLinkContr(BigDecimal dsContrPk, String contrLinkNum, BigDecimal svcContrBllgPk, String baseChrgFlg) {
        if (!hasValue(contrLinkNum)) {
            return true;
        }
        List<Map<String, Object>> linkContrList = getLinkContrList(dsContrPk, contrLinkNum, baseChrgFlg);
        for (Map<String, Object> linkContr : linkContrList) {
            boolean poReq = NSXC001001ContrValidation.checkPoRequired(this.glblCmpyCd, this.slsDt, (String) linkContr.get("DS_ACCT_NUM"), (String) linkContr.get("BILL_TO_CUST_CD"), ONBATCH_TYPE.BATCH);
            if (poReq && !validPoPeriodForLinkContr(svcContrBllgPk, (BigDecimal) linkContr.get("DS_CONTR_PK"))) {
                return false;
            }
        }
        return true;
    }

    private List<Map<String, Object>> getLinkContrList(BigDecimal dsContrPk, String contrLinkNum, String baseChrgFlg) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("dsContrPk", dsContrPk);
        param.put("contrLinkNum", contrLinkNum);
        List<Map<String, Object>> linkContrList;
        if (ZYPConstant.FLG_ON_Y.equals(baseChrgFlg)) {
            linkContrList = (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getLinkContrListForBase", param);
        } else {
            linkContrList = (List<Map<String, Object>>) ssmBatClnt.queryObjectList("getLinkContrListForUsage", param);
        }
        return linkContrList;
    }

    private boolean validPoPeriodForLinkContr(BigDecimal svcContrBllgPk, BigDecimal dsContrPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("svcContrBllgPk", svcContrBllgPk);
        param.put("dsContrPk", dsContrPk);
        param.put("dsContrMachLvl1", DS_CONTR_MACH_LVL_NUM_1);
        param.put("dsContrMachLvl2", DS_CONTR_MACH_LVL_NUM_2);
        param.put("dsContrMachLvl3", DS_CONTR_MACH_LVL_NUM_3);
        BigDecimal count = (BigDecimal) this.ssmBatClnt.queryObject("countPoExclBllgPeriodForLinkContr", param);
        if (BigDecimal.ZERO.compareTo(count) < 0) {
            return false;
        }
        return true;
    }
    // END 2019/11/08 K.Kitachi [QC#54368, ADD]

    // START 2020/01/09 K.Kitachi [QC#55173, ADD]
    private void creditProcess() {
        List<Map<String, Object>> svcCrRebilList = getSvcCrRebilList();
        for (Map<String, Object> svcCrRebil : svcCrRebilList) {
            // mod start 2020/01/27 QC#56014
            //creditSvcInvProcess(svcCrRebil);
            SVC_INVTMsg svcInvTMsg = creditSvcInvProcess(svcCrRebil);
            // mod end 2020/01/27 QC#56014
            archiveProcess(svcCrRebil);
            // add start 2020/01/27 QC#56014
            if (!callCrRebilApiForCredit(svcInvTMsg, svcCrRebil)) {
                rollback();
                continue;
            }
            // add end 2020/01/27 QC#56014
            commit();
            this.normCnt++;
        }
    }

    // mod start 2020/01/27 QC#56014
    //private void creditSvcInvProcess(Map<String, Object> svcCrRebil) {
    private SVC_INVTMsg creditSvcInvProcess(Map<String, Object> svcCrRebil) {
        SVC_INVTMsg svcInvTMsg = getSvcInvBySvcInvNum((String) svcCrRebil.get("ORIG_SVC_INV_NUM"));
        SVC_INVTMsg insTMsg = createSvcInvTMsg(svcInvTMsg, svcCrRebil);
        insertTable(insTMsg);

        creditSvcInvLineProcess(insTMsg, svcInvTMsg.svcInvNum.getValue());
        
        // START 2024/02/20 H.Iinuma [QC#61468,ADD]
        creditFrtChrgReplInfoProcess(insTMsg.svcInvNum.getValue(), (String) svcCrRebil.get("ORIG_SVC_INV_NUM"));
        creditFrtChrgReplDtlProcess(insTMsg.svcInvNum.getValue(), (String) svcCrRebil.get("ORIG_SVC_INV_NUM"));
        // END 2024/02/20 H.Iinuma [QC#61468,ADD]
        
        return insTMsg;
    }
    // mod end 2020/01/27 QC#56014

    private void creditSvcInvLineProcess(SVC_INVTMsg svcInvTMsg, String svcInvNum) {
        SVC_INV_LINETMsgArray svcInvLineTMsgArray = getSvcInvLineTMsgArray(svcInvNum);
        Map<BigDecimal, BigDecimal> svcInvLinePkMap = new HashMap<BigDecimal, BigDecimal>();
        for (int i = 0; i < svcInvLineTMsgArray.getValidCount(); i++) {
            SVC_INV_LINETMsg insTMsg = createSvcInvLineTMsg(svcInvLineTMsgArray.no(i), svcInvTMsg, svcInvLinePkMap);
            insertTable(insTMsg);

            svcInvLinePkMap.put(svcInvLineTMsgArray.no(i).svcInvLinePk.getValue(), insTMsg.svcInvLinePk.getValue());
            updateDsContrBllgSchd(svcInvTMsg, insTMsg);

            creditSvcInvLineMtrProcess(insTMsg, svcInvLineTMsgArray.no(i).svcInvLinePk.getValue());
            creditSvcInvLineAllocProcess(insTMsg, svcInvLineTMsgArray.no(i).svcInvLinePk.getValue());
            creditSvcInvLineAddlChrgProcess(insTMsg, svcInvLineTMsgArray.no(i).svcInvLinePk.getValue());
        }
    }

    private void creditSvcInvLineMtrProcess(SVC_INV_LINETMsg svcInvLineTMsg, BigDecimal svcInvLinePk) {
        SVC_INV_LINE_MTRTMsgArray svcInvLineMtrTMsgArray = getSvcInvLineMtrTMsgArray(svcInvLinePk);
        for (int i = 0; i < svcInvLineMtrTMsgArray.getValidCount(); i++) {
            SVC_INV_LINE_MTRTMsg insTMsg = createSvcInvLineMtrTMsg(svcInvLineMtrTMsgArray.no(i), svcInvLineTMsg);
            insertTable(insTMsg);

            creditSvcInvLineXsMtrProcess(insTMsg, svcInvLineMtrTMsgArray.no(i).svcInvLineMtrPk.getValue());
        }
    }

    private void creditSvcInvLineXsMtrProcess(SVC_INV_LINE_MTRTMsg svcInvLineMtrTMsg, BigDecimal svcInvLineMtrPk) {
        SVC_INV_LINE_XS_MTRTMsgArray svcInvLineXsMtrTMsgArray = getSvcInvLineXsMtrTMsgArray(svcInvLineMtrPk);
        for (int i = 0; i < svcInvLineXsMtrTMsgArray.getValidCount(); i++) {
            SVC_INV_LINE_XS_MTRTMsg insTMsg = createSvcInvLineXsMtrTMsg(svcInvLineXsMtrTMsgArray.no(i), svcInvLineMtrTMsg);
            insertTable(insTMsg);
        }
    }

    private void creditSvcInvLineAllocProcess(SVC_INV_LINETMsg svcInvLineTMsg, BigDecimal svcInvLinePk) {
        SVC_INV_LINE_ALLOCTMsgArray svcInvLineAllocTMsgArray = getSvcInvLineAllocTMsgArray(svcInvLinePk);
        for (int i = 0; i < svcInvLineAllocTMsgArray.getValidCount(); i++) {
            SVC_INV_LINE_ALLOCTMsg insTMsg = createSvcInvLineAllocTMsg(svcInvLineAllocTMsgArray.no(i), svcInvLineTMsg);
            insertTable(insTMsg);
        }
    }

    private void creditSvcInvLineAddlChrgProcess(SVC_INV_LINETMsg svcInvLineTMsg, BigDecimal svcInvLinePk) {
        SVC_INV_LINE_ADDL_CHRGTMsgArray svcInvLineAddlChrgTMsgArray = getSvcInvLineAddlChrgTMsgArray(svcInvLinePk);
        for (int i = 0; i < svcInvLineAddlChrgTMsgArray.getValidCount(); i++) {
            SVC_INV_LINE_ADDL_CHRGTMsg insTMsg = createSvcInvLineAddlChrgTMsg(svcInvLineAddlChrgTMsgArray.no(i), svcInvLineTMsg);
            insertTable(insTMsg);
        }
    }

    
    // START 2024/02/20 H.Iinuma [QC#61468,ADD]
    /**
     * @param svcInvNum String
     */
    private void creditFrtChrgReplInfoProcess(String svcInvNum, String origSvcInvNum) {
        List<FRT_CHRG_REPL_INFOTMsg> frtChrgReplInfoTMsgList = getFrtChrgReplInfoTMsgList(origSvcInvNum);
        for (FRT_CHRG_REPL_INFOTMsg frtChrgReplInfoTMsg : frtChrgReplInfoTMsgList) {
            ZYPEZDItemValueSetter.setValue(frtChrgReplInfoTMsg.svcInvNum, svcInvNum);
            S21FastTBLAccessor.insert(frtChrgReplInfoTMsg);
            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(frtChrgReplInfoTMsg.getReturnCode())) {
                throw new S21AbendException(NSZM0398E, new String[] {"FRT_CHRG_REPL_INFO" });
            }
        }
    }

    /**
     * @param svcInvNum String
     */
    private void creditFrtChrgReplDtlProcess(String svcInvNum, String origSvcInvNum) {
        List<FRT_CHRG_REPL_DTLTMsg> frtChrgReplDtlTMsgList = getFrtChrgReplDtlTMsgList(origSvcInvNum);
        for (FRT_CHRG_REPL_DTLTMsg frtChrgReplDtlTMsg : frtChrgReplDtlTMsgList) {
            ZYPEZDItemValueSetter.setValue(frtChrgReplDtlTMsg.svcInvNum, svcInvNum);
            S21FastTBLAccessor.insert(frtChrgReplDtlTMsg);
            if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(frtChrgReplDtlTMsg.getReturnCode())) {
                throw new S21AbendException(NSZM0398E, new String[] {"FRT_CHRG_REPL_DTL" });
            }
        }
    }
    // END 2024/02/20 H.Iinuma [QC#61468,ADD]
    
    private List<Map<String, Object>> getSvcCrRebilList() {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        String[] svcCrRebilStsCdList = {SVC_CR_REBIL_STS.APPROVED, SVC_CR_REBIL_STS.PROCESSED };
        param.put("svcCrRebilStsCdList", svcCrRebilStsCdList);
        param.put("invTpCd", INV_TP.CREDIT_MEMO);
        param.put("bllgCpltStsCdList", this.bllgCpltStsCdList);
        param.put("dsContrCatgCdReg", DS_CONTR_CATG.REGULAR);
        param.put("dsContrCatgCdFlt", DS_CONTR_CATG.FLEET);
        param.put("dsContrCatgCdAgg", DS_CONTR_CATG.AGGREGATE);
        param.put("multiCnt", this.multiCnt);
        param.put("usrVar1", this.usrVar1);
        return (List<Map<String, Object>>) this.ssmBatClnt.queryObjectList("getSvcCrRebilList", param);
    }

    private List<BigDecimal> getSvcContrBllgPkList(BigDecimal svcCrRebilPk, BigDecimal svcCrRebilDtlPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("svcCrRebilPk", svcCrRebilPk);
        param.put("svcCrRebilDtlPk", svcCrRebilDtlPk);
        param.put("invTpCd", INV_TP.CREDIT_MEMO);
        param.put("bllgCpltStsCdList", this.bllgCpltStsCdList);
        param.put("dsContrCatgCdReg", DS_CONTR_CATG.REGULAR);
        param.put("dsContrCatgCdFlt", DS_CONTR_CATG.FLEET);
        param.put("dsContrCatgCdAgg", DS_CONTR_CATG.AGGREGATE);
        param.put("multiCnt", this.multiCnt);
        param.put("usrVar1", this.usrVar1);

        List<Map<String, Object>> rsltMapList = (List<Map<String, Object>>) this.ssmBatClnt.queryObjectList("getSvcContrBllgPkList", param);
        List<BigDecimal> svcContrBllgPkList = new ArrayList<BigDecimal>();
        for (Map<String, Object> rsltMap : rsltMapList) {
            BigDecimal svcContrBllgPk = (BigDecimal) rsltMap.get("SVC_CONTR_BLLG_PK");
            svcContrBllgPkList.add(svcContrBllgPk);
            BigDecimal prntSvcContrBllgPk = (BigDecimal) rsltMap.get("PRNT_SVC_CONTR_BLLG_PK");
            if (hasValue(prntSvcContrBllgPk) && !svcContrBllgPkList.contains(prntSvcContrBllgPk)) {
                svcContrBllgPkList.add(prntSvcContrBllgPk);
            }
        }
        return svcContrBllgPkList;
    }

    private BigDecimal getCreditDsContrBllgSchdPk(BigDecimal origDsContrBllgSchdPk) {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("glblCmpyCd", this.glblCmpyCd);
        param.put("origDsContrBllgSchdPk", origDsContrBllgSchdPk);
        param.put("dsBllgSchdTpCd", DS_BLLG_SCHD_TP.CREDIT_CREDIT_AND_REBILL);
        return (BigDecimal) this.ssmBatClnt.queryObject("getCreditDsContrBllgSchdPk", param);
    }

    private DS_CONTR_BLLG_SCHDTMsg getDsContrBllgSchdTMsgForUpdate(BigDecimal dsContrBllgSchdPk) {
        DS_CONTR_BLLG_SCHDTMsg inTMsg = new DS_CONTR_BLLG_SCHDTMsg();
        setValue(inTMsg.glblCmpyCd, this.glblCmpyCd);
        setValue(inTMsg.dsContrBllgSchdPk, dsContrBllgSchdPk);
        return (DS_CONTR_BLLG_SCHDTMsg) S21FastTBLAccessor.findByKeyForUpdate(inTMsg);
    }

    private SVC_INV_LINETMsgArray getSvcInvLineTMsgArray(String svcInvNum) {
        SVC_INV_LINETMsg inMsg = new SVC_INV_LINETMsg();
        inMsg.setSQLID("001");
        inMsg.setConditionValue("glblCmpyCd01", this.glblCmpyCd);
        inMsg.setConditionValue("svcInvNum01", svcInvNum);
        return (SVC_INV_LINETMsgArray) EZDTBLAccessor.findByCondition(inMsg);
    }

    private SVC_INV_LINE_MTRTMsgArray getSvcInvLineMtrTMsgArray(BigDecimal svcInvLinePk) {
        SVC_INV_LINE_MTRTMsg inMsg = new SVC_INV_LINE_MTRTMsg();
        inMsg.setSQLID("001");
        inMsg.setConditionValue("glblCmpyCd01", this.glblCmpyCd);
        inMsg.setConditionValue("svcInvLinePk01", svcInvLinePk);
        return (SVC_INV_LINE_MTRTMsgArray) EZDTBLAccessor.findByCondition(inMsg);
    }

    private SVC_INV_LINE_XS_MTRTMsgArray getSvcInvLineXsMtrTMsgArray(BigDecimal svcInvLineMtrPk) {
        SVC_INV_LINE_XS_MTRTMsg inMsg = new SVC_INV_LINE_XS_MTRTMsg();
        inMsg.setSQLID("002");
        inMsg.setConditionValue("glblCmpyCd01", this.glblCmpyCd);
        inMsg.setConditionValue("svcInvLineMtrPk01", svcInvLineMtrPk);
        return (SVC_INV_LINE_XS_MTRTMsgArray) EZDTBLAccessor.findByCondition(inMsg);
    }

    private SVC_INV_LINE_ALLOCTMsgArray getSvcInvLineAllocTMsgArray(BigDecimal svcInvLinePk) {
        SVC_INV_LINE_ALLOCTMsg inMsg = new SVC_INV_LINE_ALLOCTMsg();
        inMsg.setSQLID("001");
        inMsg.setConditionValue("glblCmpyCd01", this.glblCmpyCd);
        inMsg.setConditionValue("svcInvLinePk01", svcInvLinePk);
        return (SVC_INV_LINE_ALLOCTMsgArray) EZDTBLAccessor.findByCondition(inMsg);
    }

    private SVC_INV_LINE_ADDL_CHRGTMsgArray getSvcInvLineAddlChrgTMsgArray(BigDecimal svcInvLinePk) {
        SVC_INV_LINE_ADDL_CHRGTMsg inMsg = new SVC_INV_LINE_ADDL_CHRGTMsg();
        inMsg.setSQLID("001");
        inMsg.setConditionValue("glblCmpyCd01", this.glblCmpyCd);
        inMsg.setConditionValue("svcInvLinePk01", svcInvLinePk);
        return (SVC_INV_LINE_ADDL_CHRGTMsgArray) EZDTBLAccessor.findByCondition(inMsg);
    }

    private SVC_INVTMsg createSvcInvTMsg(SVC_INVTMsg origTMsg, Map<String, Object> svcCrRebil) {
        SVC_INVTMsg insTMsg = new SVC_INVTMsg();
        EZDMsg.copy(origTMsg, null, insTMsg, null);
        setValue(insTMsg.svcInvPk, ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqAccessor.SVC_INV_SQ));
        setValue(insTMsg.svcInvNum, insTMsg.svcInvPk.getValue().toPlainString());
        // START 2020/04/09 K.Kitachi [QC#56447, DEL]
//        setValue(insTMsg.invDt, this.slsDt);
        // END 2020/04/09 K.Kitachi [QC#56447, DEL]
        setValue(insTMsg.invTpCd, INV_TP.CREDIT_MEMO);
        setValue(insTMsg.svcInvStsCd, SVC_INV_STS.PRINTED);
        // START 2020/04/09 K.Kitachi [QC#56447, ADD]
        setValue(insTMsg.invDueDt, insTMsg.invDt);
        // END 2020/04/09 K.Kitachi [QC#56447, ADD]
        SVC_CR_REBIL_DTLTMsg svcCrRebilDtlTMsg = getSvcCrRebilDtlTMsg(insTMsg.svcCrRebilDtlPk.getValue());
        String invPrintStsCd = ZYPConstant.FLG_ON_1;
        if (svcCrRebilDtlTMsg != null) {
            if (FLG_OFF_N.equals(svcCrRebilDtlTMsg.invPrintFlg.getValue())) {
                invPrintStsCd = PROCESSED_2;
            }
        }
        setValue(insTMsg.invPrintStsCd, invPrintStsCd);
        setValue(insTMsg.origSvcInvNum, (String) svcCrRebil.get("ORIG_SVC_INV_NUM"));
        setValue(insTMsg.svcInvOmLinkFlg, FLG_OFF_N);
        setValue(insTMsg.svcCrRebilPk, (BigDecimal) svcCrRebil.get("SVC_CR_REBIL_PK"));
        setValue(insTMsg.svcCrRebilDtlPk, (BigDecimal) svcCrRebil.get("SVC_CR_REBIL_DTL_PK"));
        setValue(insTMsg.custCareTktNum, (String) svcCrRebil.get("CUST_INCDT_ID"));
        setValue(insTMsg.svcInvOmLinkStsCd, "0");
        setValue(insTMsg.cfsLinkStsCd, CFS_LINK_STS.IN_COMPLETED);
        setValue(insTMsg.tempSvcInvNumFlg, FLG_ON_Y);
        // START 2023/08/18 S.Ikariya [QC#61721,ADD]
        Map<String, Object> pmtTermInfo = null;
        String pmtTermCashDiscCd = insTMsg.pmtTermCashDiscCd.getValue();

        if ((PMT_TERM_CASH_DISC.CREDIT_CARD.equals(pmtTermCashDiscCd))
                || (PMT_TERM_CASH_DISC.CHECK_BY_PHONE.equals(pmtTermCashDiscCd))) {
            pmtTermInfo = getPmtTermInfo(this.crPmtTermCc);
        } else {
            pmtTermInfo = getPmtTermInfo(this.crPmtTermExCc);
        }
        ZYPEZDItemValueSetter.setValue(insTMsg.pmtTermCashDiscCd, (String) pmtTermInfo.get("PMT_TERM_CASH_DISC_CD"));
        ZYPEZDItemValueSetter.setValue(insTMsg.pmtTermCd, (String) pmtTermInfo.get("PMT_TERM_CD"));
        ZYPEZDItemValueSetter.setValue(insTMsg.pmtTermCashDiscDescTxt, (String) pmtTermInfo.get("PMT_TERM_CASH_DISC_DESC_TXT"));
        ZYPEZDItemValueSetter.setValue(insTMsg.pmtTermStartDt, this.slsDt);
        BigDecimal invDueDt = nullToZero((BigDecimal) pmtTermInfo.get("PMT_TERM_AOT"));
        ZYPEZDItemValueSetter.setValue(insTMsg.invDueDt, ZYPDateUtil.addDays(this.slsDt, invDueDt.intValue()));
        // END 2023/08/18 S.Ikariya [QC#61721,ADD]
        return insTMsg;
    }

    private SVC_INV_LINETMsg createSvcInvLineTMsg(SVC_INV_LINETMsg origTMsg, SVC_INVTMsg svcInvTMsg, Map<BigDecimal, BigDecimal> svcInvLinePkMap) {
        SVC_INV_LINETMsg insTMsg = new SVC_INV_LINETMsg();
        EZDMsg.copy(origTMsg, null, insTMsg, null);
        setValue(insTMsg.svcInvLinePk, ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqAccessor.SVC_INV_LINE_SQ));
        setValue(insTMsg.svcInvNum, svcInvTMsg.svcInvNum);
        insTMsg.prntSvcInvLinePk.clear();
        if (svcInvLinePkMap.containsKey(origTMsg.prntSvcInvLinePk.getValue())) {
            setValue(insTMsg.prntSvcInvLinePk, svcInvLinePkMap.get(origTMsg.prntSvcInvLinePk.getValue()));
        }
        // START 2022/05/16 K.Kitachi [QC#60030, MOD]
        if (!SVC_INV_CHRG_TP.ADDITIONAL_CHARGE.equals(insTMsg.svcInvChrgTpCd.getValue())) {
            insTMsg.dsContrBllgSchdPk.clear();
            BigDecimal dsContrBllgSchdPk = getCreditDsContrBllgSchdPk(origTMsg.dsContrBllgSchdPk.getValue());
            if (hasValue(dsContrBllgSchdPk)) {
                setValue(insTMsg.dsContrBllgSchdPk, dsContrBllgSchdPk);
            }
        }
        // END 2022/05/16 K.Kitachi [QC#60030, MOD]
        return insTMsg;
    }

    private SVC_INV_LINE_MTRTMsg createSvcInvLineMtrTMsg(SVC_INV_LINE_MTRTMsg origTMsg, SVC_INV_LINETMsg svcInvLineTMsg) {
        SVC_INV_LINE_MTRTMsg insTMsg = new SVC_INV_LINE_MTRTMsg();
        EZDMsg.copy(origTMsg, null, insTMsg, null);
        setValue(insTMsg.svcInvLineMtrPk, ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqAccessor.SVC_INV_LINE_MTR_SQ));
        setValue(insTMsg.svcInvLinePk, svcInvLineTMsg.svcInvLinePk);
        setValue(insTMsg.svcInvNum, svcInvLineTMsg.svcInvNum);
        return insTMsg;
    }

    private SVC_INV_LINE_XS_MTRTMsg createSvcInvLineXsMtrTMsg(SVC_INV_LINE_XS_MTRTMsg origTMsg, SVC_INV_LINE_MTRTMsg svcInvLineMtrTMsg) {
        SVC_INV_LINE_XS_MTRTMsg insTMsg = new SVC_INV_LINE_XS_MTRTMsg();
        EZDMsg.copy(origTMsg, null, insTMsg, null);
        setValue(insTMsg.svcInvLineXsMtrPk, ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqAccessor.SVC_INV_LINE_XS_MTR_SQ));
        setValue(insTMsg.svcInvLinePk, svcInvLineMtrTMsg.svcInvLinePk);
        setValue(insTMsg.svcInvNum, svcInvLineMtrTMsg.svcInvNum);
        setValue(insTMsg.svcInvLineMtrPk, svcInvLineMtrTMsg.svcInvLineMtrPk);
        return insTMsg;
    }

    private SVC_INV_LINE_ALLOCTMsg createSvcInvLineAllocTMsg(SVC_INV_LINE_ALLOCTMsg origTMsg, SVC_INV_LINETMsg svcInvLineTMsg) {
        SVC_INV_LINE_ALLOCTMsg insTMsg = new SVC_INV_LINE_ALLOCTMsg();
        EZDMsg.copy(origTMsg, null, insTMsg, null);
        setValue(insTMsg.svcInvLineAllocPk, ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqAccessor.SVC_INV_LINE_ALLOC_SQ));
        setValue(insTMsg.svcInvLinePk, svcInvLineTMsg.svcInvLinePk);
        setValue(insTMsg.svcInvNum, svcInvLineTMsg.svcInvNum);
        return insTMsg;
    }

    private SVC_INV_LINE_ADDL_CHRGTMsg createSvcInvLineAddlChrgTMsg(SVC_INV_LINE_ADDL_CHRGTMsg origTMsg, SVC_INV_LINETMsg svcInvLineTMsg) {
        SVC_INV_LINE_ADDL_CHRGTMsg insTMsg = new SVC_INV_LINE_ADDL_CHRGTMsg();
        EZDMsg.copy(origTMsg, null, insTMsg, null);
        setValue(insTMsg.svcInvLineAddlChrgPk, ZYPOracleSeqAccessor.getNumberBigDecimal(ZYPOracleSeqAccessor.SVC_INV_LINE_ADDL_CHRG_SQ));
        setValue(insTMsg.svcInvLinePk, svcInvLineTMsg.svcInvLinePk);
        return insTMsg;
    }

    private void insertTable(EZDTMsg ezdTMsg) {
        S21FastTBLAccessor.insert(ezdTMsg);
        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(ezdTMsg.getReturnCode())) {
            throw new S21AbendException(NSZM0398E, new String[] {ezdTMsg.getTableName() });
        }
    }

    private void updateTable(EZDTMsg ezdTMsg) {
        S21FastTBLAccessor.update(ezdTMsg);
        if (!S21FastTBLAccessor.RTNCD_NORMAL.equals(ezdTMsg.getReturnCode())) {
            throw new S21AbendException(NSZM0399E, new String[] {ezdTMsg.getTableName() });
        }
    }

    private void updateDsContrBllgSchd(SVC_INVTMsg svcInvTMsg, SVC_INV_LINETMsg svcInvLineTMsg) {

        // START 2022/05/16 K.Kitachi [QC#60030, ADD]
        if (SVC_INV_CHRG_TP.ADDITIONAL_CHARGE.equals(svcInvLineTMsg.svcInvChrgTpCd.getValue())) {
            return;
        }
        // END 2022/05/16 K.Kitachi [QC#60030, ADD]

        DS_CONTR_BLLG_SCHDTMsg dsContrBllgSchdTMsg = getDsContrBllgSchdTMsgForUpdate(svcInvLineTMsg.dsContrBllgSchdPk.getValue());
        // START 2022/06/07 K.Kitachi [QC#60160, ADD]
        if (dsContrBllgSchdTMsg == null) {
            return;
        }
        // END 2022/06/07 K.Kitachi [QC#60160, ADD]

        setValue(dsContrBllgSchdTMsg.svcInvNum, svcInvTMsg.svcInvNum);
        setValue(dsContrBllgSchdTMsg.invDt, svcInvTMsg.invDt);
        setValue(dsContrBllgSchdTMsg.invFlg, ZYPConstant.FLG_ON_Y);
        setValue(dsContrBllgSchdTMsg.dsBllgSchdStsCd, DS_BLLG_SCHD_STS.CLOSE);
        setValue(dsContrBllgSchdTMsg.slsTaxRate, svcInvLineTMsg.slsTaxRate);
        setValue(dsContrBllgSchdTMsg.dealTaxAmt, svcInvLineTMsg.invLineDealTaxAmt);
        setValue(dsContrBllgSchdTMsg.funcTaxAmt, svcInvLineTMsg.invLineFuncTaxAmt);
        updateTable(dsContrBllgSchdTMsg);

        if (!DS_CONTR_CATG.AGGREGATE.equals(svcInvTMsg.dsContrCatgCd.getValue()) || !hasValue(dsContrBllgSchdTMsg.prntDsContrBllgSchdPk)) {
            return;
        }

        DS_CONTR_BLLG_SCHDTMsg prntDsContrBllgSchdTMsg = getDsContrBllgSchdTMsgForUpdate(dsContrBllgSchdTMsg.prntDsContrBllgSchdPk.getValue());
        // START 2022/06/07 K.Kitachi [QC#60160, ADD]
        if (prntDsContrBllgSchdTMsg == null) {
            return;
        }
        // END 2022/06/07 K.Kitachi [QC#60160, ADD]
        if (!DS_CONTR_DTL_TP.AGGREGATE.equals(prntDsContrBllgSchdTMsg.dsContrDtlTpCd.getValue())) {
            return;
        }

        setValue(prntDsContrBllgSchdTMsg.svcInvNum, svcInvTMsg.svcInvNum);
        setValue(prntDsContrBllgSchdTMsg.invDt, svcInvTMsg.invDt);
        setValue(prntDsContrBllgSchdTMsg.invFlg, ZYPConstant.FLG_ON_Y);
        setValue(prntDsContrBllgSchdTMsg.dsBllgSchdStsCd, DS_BLLG_SCHD_STS.CLOSE);
        updateTable(prntDsContrBllgSchdTMsg);
    }

    private void archiveProcess(Map<String, Object> svcCrRebil) {

        S21InfoLogOutput.println("[Test][archiveProcessForCredit]Start");

        List<SVC_CONTR_BASE_BLLGTMsg> svcContrBaseBllgList = new ArrayList<SVC_CONTR_BASE_BLLGTMsg>();
        List<SVC_CONTR_MTR_BLLGTMsg> svcContrMtrBllgList = new ArrayList<SVC_CONTR_MTR_BLLGTMsg>();
        List<SVC_CONTR_XS_MTR_BLLGTMsg> svcContrXsMtrBllgList = new ArrayList<SVC_CONTR_XS_MTR_BLLGTMsg>();
        List<SVC_CONTR_ADDL_CHRG_BLLGTMsg> svcContrAddlChrgBllgList = new ArrayList<SVC_CONTR_ADDL_CHRG_BLLGTMsg>();
        List<SVC_CONTR_BLLG_ALLOCTMsg> svcContrBllgAllocList = new ArrayList<SVC_CONTR_BLLG_ALLOCTMsg>();
        List<SVC_CONTR_BLLGTMsg> svcContrBllgList = new ArrayList<SVC_CONTR_BLLGTMsg>();
        List<CONTR_BASE_BLLG_TRKTMsg> contrBaseBllgTrkList = new ArrayList<CONTR_BASE_BLLG_TRKTMsg>();
        List<CONTR_MTR_BLLG_TRKTMsg> contrMtrBllgTrkList = new ArrayList<CONTR_MTR_BLLG_TRKTMsg>();
        List<CONTR_XS_MTR_BLLG_TRKTMsg> contrXsMtrBllgTrkList = new ArrayList<CONTR_XS_MTR_BLLG_TRKTMsg>();
        List<CONTR_ADDL_CHRG_BLLG_TRKTMsg> contrAddlChrgBllgTrkList = new ArrayList<CONTR_ADDL_CHRG_BLLG_TRKTMsg>();
        List<CONTR_BLLG_ALLOC_TRKTMsg> contrBllgAllocTrkList = new ArrayList<CONTR_BLLG_ALLOC_TRKTMsg>();
        List<CONTR_BLLG_TRKTMsg> contrLbllgTrkList = new ArrayList<CONTR_BLLG_TRKTMsg>();

        List<BigDecimal> svcContrBllgPkList = getSvcContrBllgPkList((BigDecimal) svcCrRebil.get("SVC_CR_REBIL_PK"), (BigDecimal) svcCrRebil.get("SVC_CR_REBIL_DTL_PK"));
        for (BigDecimal svcContrBllgPk : svcContrBllgPkList) {
            archiveSvcContrBaseBllg(svcContrBllgPk, svcContrBaseBllgList, contrBaseBllgTrkList);
            archiveSvcContrMtrBllg(svcContrBllgPk, svcContrMtrBllgList, contrMtrBllgTrkList);
            archiveSvcContrXsMtrBllg(svcContrBllgPk, svcContrXsMtrBllgList, contrXsMtrBllgTrkList);
            archiveSvcContrAddlChrgBllg(svcContrBllgPk, svcContrAddlChrgBllgList, contrAddlChrgBllgTrkList);
            archiveSvcContrBllgAlloc(svcContrBllgPk, svcContrBllgAllocList, contrBllgAllocTrkList);
            archiveSvcContrBllg(svcContrBllgPk, svcContrBllgList, contrLbllgTrkList);
        }

        insertContrBllgTrk(contrBaseBllgTrkList, contrMtrBllgTrkList, contrXsMtrBllgTrkList, contrAddlChrgBllgTrkList, contrBllgAllocTrkList, contrLbllgTrkList);
        removeSvcContrBllg(svcContrBaseBllgList, svcContrMtrBllgList, svcContrXsMtrBllgList, svcContrAddlChrgBllgList, svcContrBllgAllocList, svcContrBllgList);

        S21InfoLogOutput.println("[Test][archiveProcessForCredit]End");
    }
    // END 2020/01/09 K.Kitachi [QC#55173, ADD]

    // add start 2020/01/27 QC#56014
    private boolean callCrRebilApiForCredit(SVC_INVTMsg svcInvTMsg, Map<String, Object> svcCrRebil) {
        BigDecimal dsContrPk = (BigDecimal) svcCrRebil.get("DS_CONTR_PK");
        BigDecimal svcCrRebilPk = (BigDecimal) svcCrRebil.get("SVC_CR_REBIL_PK");
        String dsContrCatgCd = (String) svcCrRebil.get("DS_CONTR_CATG_CD");

        StringBuilder sb = new StringBuilder();
        sb.append(dsContrPk.toPlainString());
        sb.append(":");
        sb.append(INV_TP.CREDIT_MEMO);
        sb.append(":");
        sb.append(svcCrRebilPk);
        String svcInvKey = sb.toString();

        return callCrRebilApi(dsContrCatgCd, svcInvKey, svcInvTMsg);
    }
    // add end 2020/01/27 QC#56014

    // START 2022/02/09 S.Kitamura [QC#59683, ADD]
    private String getAllLineTgtrFlg(String dsInvTgtrTpCd) {
        DS_INV_TGTR_TPTMsg tMsg = new DS_INV_TGTR_TPTMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.dsInvTgtrTpCd, dsInvTgtrTpCd);
        tMsg = (DS_INV_TGTR_TPTMsg) S21CodeTableAccessor.findByKey(tMsg);
        if (tMsg != null) {
            return tMsg.allLineTgtrFlg.getValue();
        }
        return FLG_OFF_N;
    }
    // END   2022/02/09 S.Kitamura [QC#59683, ADD]

    // START 07/04/2022 [QC#60271, ADD]
    private SVC_INV_LINETMsg getSvcInvLineFindByKey(BigDecimal svcInvLinePk) {
        SVC_INV_LINETMsg tMsg = new SVC_INV_LINETMsg();
        ZYPEZDItemValueSetter.setValue(tMsg.glblCmpyCd, this.glblCmpyCd);
        ZYPEZDItemValueSetter.setValue(tMsg.svcInvLinePk, svcInvLinePk);
        return (SVC_INV_LINETMsg) S21FastTBLAccessor.findByKey(tMsg);
    }
    // END   07/04/2022 [QC#60271, ADD]
}
