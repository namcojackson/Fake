// This file was automatically generated by Screen Field Definition Document and XLA200710010
// Generated on    :20240216091639000
// Velocity Macro:svltdatabean.vm V200604010
// Excel Add-in :ScreenFieldDefinitionDocument_AddIn_XLS200710010.xla XLA200710010
/*
 *NSAL0460Bean.java Copyright FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */

package  business.servlet.NSAL0460;

import parts.servletcommon.EZDCommonDataBean;

/*
 * NSAL0460 is data bean class.
 */
public class NSAL0460Bean extends EZDCommonDataBean {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	//Constant Definition Area
	/** GLBL_CMPY_CD*/
	public static final String glblCmpyCd = "glblCmpyCd";

	/** SLS_DT*/
	public static final String slsDt = "slsDt";

	/** XX_NUM*/
	public static final String xxNum = "xxNum";

	/** SVC_MEMO_RSN_CD_PS*/
	public static final String svcMemoRsnCd_PS = "svcMemoRsnCd_PS";

	/** SVC_MEMO_RSN_CD_PC*/
	public static final String svcMemoRsnCd_PC = "svcMemoRsnCd_PC";

	/** SVC_MEMO_RSN_NM_PC*/
	public static final String svcMemoRsnNm_PC = "svcMemoRsnNm_PC";

	/** SVC_CMNT_TXT*/
	public static final String svcCmntTxt = "svcCmntTxt";

	/** XX_HLD_FLG*/
	public static final String xxHldFlg = "xxHldFlg";

	/** XX_CHK_BOX_H*/
	public static final String xxChkBox_H = "xxChkBox_H";

	/** A*/
	public static final String A = "A";

	/** DS_CONTR_NUM*/
	public static final String dsContrNum = "dsContrNum";

	/** XX_CHK_BOX*/
	public static final String xxChkBox = "xxChkBox";

	/** SER_NUM*/
	public static final String serNum = "serNum";

	/** CONTR_EFF_FROM_DT*/
	public static final String contrEffFromDt = "contrEffFromDt";

	/** CONTR_EFF_FROM_DT_P*/
	public static final String contrEffFromDt_P = "contrEffFromDt_P";

	/** MDL_MTR_LB_CD*/
	public static final String mdlMtrLbCd = "mdlMtrLbCd";

	/** MTR_LB_DESC_TXT*/
	public static final String mtrLbDescTxt = "mtrLbDescTxt";

	/** MTR_READ_DT*/
	public static final String mtrReadDt = "mtrReadDt";

	/** READ_MTR_CNT*/
	public static final String readMtrCnt = "readMtrCnt";

	/** SVC_CMNT_TXT_A*/
	public static final String svcCmntTxt_A = "svcCmntTxt_A";

	/** DS_CONTR_PK*/
	public static final String dsContrPk = "dsContrPk";

	/** DS_CONTR_DTL_PK*/
	public static final String dsContrDtlPk = "dsContrDtlPk";

	/** SVC_MACH_MSTR_PK*/
	public static final String svcMachMstrPk = "svcMachMstrPk";

	/** SVC_PHYS_MTR_PK*/
	public static final String svcPhysMtrPk = "svcPhysMtrPk";

	/** XX_ROW_NUM_A*/
	public static final String xxRowNum_A = "xxRowNum_A";

	/** XX_ROW_NUM_C*/
	public static final String xxRowNum_C = "xxRowNum_C";

	/** XX_ROW_NUM_D*/
	public static final String xxRowNum_D = "xxRowNum_D";

	/** ACTV_FLG*/
	public static final String actvFlg = "actvFlg";

	/** XX_READ_ONLY_FLG*/
	public static final String xxReadOnlyFlg = "xxReadOnlyFlg";

	/** DS_MTR_READ_TP_GRP_CD*/
	public static final String dsMtrReadTpGrpCd = "dsMtrReadTpGrpCd";

	/** DS_MTR_READ_TP_CD*/
	public static final String dsMtrReadTpCd = "dsMtrReadTpCd";

	/** XX_WRN_SKIP_FLG*/
	public static final String xxWrnSkipFlg = "xxWrnSkipFlg";

	/** XX_REC_HIST_CRAT_TS*/
	public static final String xxRecHistCratTs = "xxRecHistCratTs";

	/** XX_REC_HIST_CRAT_BY_NM*/
	public static final String xxRecHistCratByNm = "xxRecHistCratByNm";

	/** XX_REC_HIST_UPD_TS*/
	public static final String xxRecHistUpdTs = "xxRecHistUpdTs";

	/** XX_REC_HIST_UPD_BY_NM*/
	public static final String xxRecHistUpdByNm = "xxRecHistUpdByNm";

	/** XX_REC_HIST_TBL_NM*/
	public static final String xxRecHistTblNm = "xxRecHistTblNm";

	/** XX_PAGE_SHOW_FROM_NUM*/
	public static final String xxPageShowFromNum = "xxPageShowFromNum";

	/** XX_PAGE_SHOW_TO_NUM*/
	public static final String xxPageShowToNum = "xxPageShowToNum";

	/** XX_PAGE_SHOW_OF_NUM*/
	public static final String xxPageShowOfNum = "xxPageShowOfNum";

	/** DS_CONTR_PK_OP*/
	public static final String dsContrPk_OP = "dsContrPk_OP";

	/** DS_CONTR_DTL_PK_OP*/
	public static final String dsContrDtlPk_OP = "dsContrDtlPk_OP";

	/** SVC_MACH_MSTR_PK_OP*/
	public static final String svcMachMstrPk_OP = "svcMachMstrPk_OP";

	/** START_DT_OP*/
	public static final String startDt_OP = "startDt_OP";

	/** P*/
	public static final String P = "P";

	/** DS_CONTR_PK_P1*/
	public static final String dsContrPk_P1 = "dsContrPk_P1";

	/** DS_CONTR_DTL_PK_P1*/
	public static final String dsContrDtlPk_P1 = "dsContrDtlPk_P1";

	/** Q*/
	public static final String Q = "Q";

	/** SVC_PHYS_MTR_PK_P*/
	public static final String svcPhysMtrPk_P = "svcPhysMtrPk_P";

	/** MTR_LB_CD_P*/
	public static final String mtrLbCd_P = "mtrLbCd_P";

	/** MTR_READ_DT_P*/
	public static final String mtrReadDt_P = "mtrReadDt_P";

	/** READ_MTR_CNT_P*/
	public static final String readMtrCnt_P = "readMtrCnt_P";

	/** SVC_PHYS_MTR_READ_GRP_SQ_P*/
	public static final String svcPhysMtrReadGrpSq_P = "svcPhysMtrReadGrpSq_P";

	/** DS_MTR_READ_TP_GRP_CD_P*/
	public static final String dsMtrReadTpGrpCd_P = "dsMtrReadTpGrpCd_P";

	/**
	 * Method name:NSAL0460 is Bean's Constructor.
	 * <dd>method explanation:Initialization when instance of NSAL0460Bean is generated
	 * <dd>Remarks:
	 */
	public NSAL0460Bean() {
		super("business.servlet.NSAL0460.NSAL0460BMsg");
	}

	/**
	 * get  GLBL_CMPY_CD.
	 * @return GLBL_CMPY_CD
	 */
	public String getGlblCmpyCd() {
		return outputValue(glblCmpyCd);
	}

	/**
	 * set  GLBL_CMPY_CD.
	 * @param data GLBL_CMPY_CD
	 */
	public void setGlblCmpyCd(String data) {
		inputValue(glblCmpyCd,data);
	}

	/**
	 * get  SLS_DT.
	 * @return SLS_DT
	 */
	public String getSlsDt() {
		return outputValue(slsDt, VALUE_YEAR_MONTH_DAY);
	}

	/**
	 * set  SLS_DT.
	 * @param data SLS_DT
	 */
	public void setSlsDt(String data) {
		inputValue(slsDt, data, VALUE_YEAR_MONTH_DAY);
	}

	/**
	 * get  XX_NUM.
	 * @return XX_NUM
	 */
	public String getXxNum() {
		return outputValue(xxNum);
	}

	/**
	 * set  XX_NUM.
	 * @param data XX_NUM
	 */
	public void setXxNum(String data) {
		inputValue(xxNum,data);
	}

	/**
	 * get  SVC_MEMO_RSN_CD_PS.
	 * @return SVC_MEMO_RSN_CD_PS
	 */
	public String getSvcMemoRsnCd_PS() {
		return outputValue(svcMemoRsnCd_PS);
	}

	/**
	 * set  SVC_MEMO_RSN_CD_PS.
	 * @param data SVC_MEMO_RSN_CD_PS
	 */
	public void setSvcMemoRsnCd_PS(String data) {
		inputValue(svcMemoRsnCd_PS,data);
	}

	/**
	 * get  SVC_MEMO_RSN_CD_PC.
	 * @param idx1 Index Number
	 * @return SVC_MEMO_RSN_CD_PC
	 */
	public String getSvcMemoRsnCd_PC(int idx1) {
	 	 return outputValue(svcMemoRsnCd_PC, idx1);
	}

	/**
	 * get  SVC_MEMO_RSN_NM_PC.
	 * @param idx1 Index Number
	 * @return SVC_MEMO_RSN_NM_PC
	 */
	public String getSvcMemoRsnNm_PC(int idx1) {
	 	 return outputValue(svcMemoRsnNm_PC, idx1);
	}

	/**
	 * get  SVC_CMNT_TXT.
	 * @return SVC_CMNT_TXT
	 */
	public String getSvcCmntTxt() {
		return outputValue(svcCmntTxt);
	}

	/**
	 * set  SVC_CMNT_TXT.
	 * @param data SVC_CMNT_TXT
	 */
	public void setSvcCmntTxt(String data) {
		inputValue(svcCmntTxt,data);
	}

	/**
	 * get  XX_HLD_FLG.
	 * @return XX_HLD_FLG
	 */
	public String getXxHldFlg() {
		return outputValue(xxHldFlg);
	}

	/**
	 * set  XX_HLD_FLG.
	 * @param data XX_HLD_FLG
	 */
	public void setXxHldFlg(String data) {
		inputValue(xxHldFlg,data);
	}

	/**
	 * get  XX_CHK_BOX_H.
	 * @return XX_CHK_BOX_H
	 */
	public String getXxChkBox_H() {
		return outputValue(xxChkBox_H);
	}

	/**
	 * set  XX_CHK_BOX_H.
	 * @param data XX_CHK_BOX_H
	 */
	public void setXxChkBox_H(String data) {
		inputValue(xxChkBox_H,data);
	}

	/**
	 * get  DS_CONTR_NUM.
	 * @param idx1 List Number
	 * @return DS_CONTR_NUM
	 */
	public String getDsContrNum(int idx1) {
		return outputValue(A, idx1, dsContrNum);
	}

	/**
	 * set  DS_CONTR_NUM.
	 * @param data DS_CONTR_NUMArray
	 */
	public void setDsContrNum(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, dsContrNum, data[j]);
		}
	}

	/**
	 * get  XX_CHK_BOX.
	 * @param idx1 List Number
	 * @return XX_CHK_BOX
	 */
	public String getXxChkBox(int idx1) {
		return outputValue(A, idx1, xxChkBox);
	}

	/**
	 * set  XX_CHK_BOX.
	 * @param data XX_CHK_BOXArray
	 */
	public void setXxChkBox(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, xxChkBox, data[j]);
		}
	}

	/**
	 * get  SER_NUM.
	 * @param idx1 List Number
	 * @return SER_NUM
	 */
	public String getSerNum(int idx1) {
		return outputValue(A, idx1, serNum);
	}

	/**
	 * set  SER_NUM.
	 * @param data SER_NUMArray
	 */
	public void setSerNum(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, serNum, data[j]);
		}
	}

	/**
	 * get  CONTR_EFF_FROM_DT.
	 * @param idx1 List Number
	 * @return CONTR_EFF_FROM_DT
	 */
	public String getContrEffFromDt(int idx1) {
		return outputValue(A, idx1, contrEffFromDt, VALUE_YEAR_MONTH_DAY);
	}

	/**
	 * set  CONTR_EFF_FROM_DT.
	 * @param data CONTR_EFF_FROM_DTArray
	 */
	public void setContrEffFromDt(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i,  contrEffFromDt, data[j], VALUE_YEAR_MONTH_DAY);
		}
	}

	/**
	 * get  CONTR_EFF_FROM_DT_P.
	 * @param idx1 List Number
	 * @return CONTR_EFF_FROM_DT_P
	 */
	public String getContrEffFromDt_P(int idx1) {
		return outputValue(A, idx1, contrEffFromDt_P, VALUE_YEAR_MONTH_DAY);
	}

	/**
	 * set  CONTR_EFF_FROM_DT_P.
	 * @param data CONTR_EFF_FROM_DT_PArray
	 */
	public void setContrEffFromDt_P(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i,  contrEffFromDt_P, data[j], VALUE_YEAR_MONTH_DAY);
		}
	}

	/**
	 * get  MDL_MTR_LB_CD.
	 * @param idx1 List Number
	 * @return MDL_MTR_LB_CD
	 */
	public String getMdlMtrLbCd(int idx1) {
		return outputValue(A, idx1, mdlMtrLbCd);
	}

	/**
	 * set  MDL_MTR_LB_CD.
	 * @param data MDL_MTR_LB_CDArray
	 */
	public void setMdlMtrLbCd(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, mdlMtrLbCd, data[j]);
		}
	}

	/**
	 * get  MTR_LB_DESC_TXT.
	 * @param idx1 List Number
	 * @return MTR_LB_DESC_TXT
	 */
	public String getMtrLbDescTxt(int idx1) {
		return outputValue(A, idx1, mtrLbDescTxt);
	}

	/**
	 * set  MTR_LB_DESC_TXT.
	 * @param data MTR_LB_DESC_TXTArray
	 */
	public void setMtrLbDescTxt(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, mtrLbDescTxt, data[j]);
		}
	}

	/**
	 * get  MTR_READ_DT.
	 * @param idx1 List Number
	 * @return MTR_READ_DT
	 */
	public String getMtrReadDt(int idx1) {
		return outputValue(A, idx1, mtrReadDt, VALUE_YEAR_MONTH_DAY);
	}

	/**
	 * set  MTR_READ_DT.
	 * @param data MTR_READ_DTArray
	 */
	public void setMtrReadDt(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i,  mtrReadDt, data[j], VALUE_YEAR_MONTH_DAY);
		}
	}

	/**
	 * get  READ_MTR_CNT.
	 * @param idx1 List Number
	 * @return READ_MTR_CNT
	 */
	public String getReadMtrCnt(int idx1) {
		return outputValue(A, idx1, readMtrCnt);
	}

	/**
	 * set  READ_MTR_CNT.
	 * @param data READ_MTR_CNTArray
	 */
	public void setReadMtrCnt(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, readMtrCnt, data[j]);
		}
	}

	/**
	 * get  SVC_CMNT_TXT_A.
	 * @param idx1 List Number
	 * @return SVC_CMNT_TXT_A
	 */
	public String getSvcCmntTxt_A(int idx1) {
		return outputValue(A, idx1, svcCmntTxt_A);
	}

	/**
	 * set  SVC_CMNT_TXT_A.
	 * @param data SVC_CMNT_TXT_AArray
	 */
	public void setSvcCmntTxt_A(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, svcCmntTxt_A, data[j]);
		}
	}

	/**
	 * get  DS_CONTR_PK.
	 * @param idx1 List Number
	 * @return DS_CONTR_PK
	 */
	public String getDsContrPk(int idx1) {
		return outputValue(A, idx1, dsContrPk);
	}

	/**
	 * set  DS_CONTR_PK.
	 * @param data DS_CONTR_PKArray
	 */
	public void setDsContrPk(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, dsContrPk, data[j]);
		}
	}

	/**
	 * get  DS_CONTR_DTL_PK.
	 * @param idx1 List Number
	 * @return DS_CONTR_DTL_PK
	 */
	public String getDsContrDtlPk(int idx1) {
		return outputValue(A, idx1, dsContrDtlPk);
	}

	/**
	 * set  DS_CONTR_DTL_PK.
	 * @param data DS_CONTR_DTL_PKArray
	 */
	public void setDsContrDtlPk(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, dsContrDtlPk, data[j]);
		}
	}

	/**
	 * get  SVC_MACH_MSTR_PK.
	 * @param idx1 List Number
	 * @return SVC_MACH_MSTR_PK
	 */
	public String getSvcMachMstrPk(int idx1) {
		return outputValue(A, idx1, svcMachMstrPk);
	}

	/**
	 * set  SVC_MACH_MSTR_PK.
	 * @param data SVC_MACH_MSTR_PKArray
	 */
	public void setSvcMachMstrPk(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, svcMachMstrPk, data[j]);
		}
	}

	/**
	 * get  SVC_PHYS_MTR_PK.
	 * @param idx1 List Number
	 * @return SVC_PHYS_MTR_PK
	 */
	public String getSvcPhysMtrPk(int idx1) {
		return outputValue(A, idx1, svcPhysMtrPk);
	}

	/**
	 * set  SVC_PHYS_MTR_PK.
	 * @param data SVC_PHYS_MTR_PKArray
	 */
	public void setSvcPhysMtrPk(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, svcPhysMtrPk, data[j]);
		}
	}

	/**
	 * get  XX_ROW_NUM_A.
	 * @param idx1 List Number
	 * @return XX_ROW_NUM_A
	 */
	public String getXxRowNum_A(int idx1) {
		return outputValue(A, idx1, xxRowNum_A);
	}

	/**
	 * set  XX_ROW_NUM_A.
	 * @param data XX_ROW_NUM_AArray
	 */
	public void setXxRowNum_A(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, xxRowNum_A, data[j]);
		}
	}

	/**
	 * get  XX_ROW_NUM_C.
	 * @param idx1 List Number
	 * @return XX_ROW_NUM_C
	 */
	public String getXxRowNum_C(int idx1) {
		return outputValue(A, idx1, xxRowNum_C);
	}

	/**
	 * set  XX_ROW_NUM_C.
	 * @param data XX_ROW_NUM_CArray
	 */
	public void setXxRowNum_C(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, xxRowNum_C, data[j]);
		}
	}

	/**
	 * get  XX_ROW_NUM_D.
	 * @param idx1 List Number
	 * @return XX_ROW_NUM_D
	 */
	public String getXxRowNum_D(int idx1) {
		return outputValue(A, idx1, xxRowNum_D);
	}

	/**
	 * set  XX_ROW_NUM_D.
	 * @param data XX_ROW_NUM_DArray
	 */
	public void setXxRowNum_D(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, xxRowNum_D, data[j]);
		}
	}

	/**
	 * get  ACTV_FLG.
	 * @param idx1 List Number
	 * @return ACTV_FLG
	 */
	public String getActvFlg(int idx1) {
		return outputValue(A, idx1, actvFlg);
	}

	/**
	 * set  ACTV_FLG.
	 * @param data ACTV_FLGArray
	 */
	public void setActvFlg(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, actvFlg, data[j]);
		}
	}

	/**
	 * get  XX_READ_ONLY_FLG.
	 * @param idx1 List Number
	 * @return XX_READ_ONLY_FLG
	 */
	public String getXxReadOnlyFlg(int idx1) {
		return outputValue(A, idx1, xxReadOnlyFlg);
	}

	/**
	 * set  XX_READ_ONLY_FLG.
	 * @param data XX_READ_ONLY_FLGArray
	 */
	public void setXxReadOnlyFlg(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, xxReadOnlyFlg, data[j]);
		}
	}

	/**
	 * get  DS_MTR_READ_TP_GRP_CD.
	 * @param idx1 List Number
	 * @return DS_MTR_READ_TP_GRP_CD
	 */
	public String getDsMtrReadTpGrpCd(int idx1) {
		return outputValue(A, idx1, dsMtrReadTpGrpCd);
	}

	/**
	 * set  DS_MTR_READ_TP_GRP_CD.
	 * @param data DS_MTR_READ_TP_GRP_CDArray
	 */
	public void setDsMtrReadTpGrpCd(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, dsMtrReadTpGrpCd, data[j]);
		}
	}

	/**
	 * get  DS_MTR_READ_TP_CD.
	 * @param idx1 List Number
	 * @return DS_MTR_READ_TP_CD
	 */
	public String getDsMtrReadTpCd(int idx1) {
		return outputValue(A, idx1, dsMtrReadTpCd);
	}

	/**
	 * set  DS_MTR_READ_TP_CD.
	 * @param data DS_MTR_READ_TP_CDArray
	 */
	public void setDsMtrReadTpCd(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, dsMtrReadTpCd, data[j]);
		}
	}

	/**
	 * get  XX_WRN_SKIP_FLG.
	 * @param idx1 List Number
	 * @return XX_WRN_SKIP_FLG
	 */
	public String getXxWrnSkipFlg(int idx1) {
		return outputValue(A, idx1, xxWrnSkipFlg);
	}

	/**
	 * set  XX_WRN_SKIP_FLG.
	 * @param data XX_WRN_SKIP_FLGArray
	 */
	public void setXxWrnSkipFlg(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, xxWrnSkipFlg, data[j]);
		}
	}

	/**
	 * get  XX_REC_HIST_CRAT_TS.
	 * @param idx1 List Number
	 * @return XX_REC_HIST_CRAT_TS
	 */
	public String getXxRecHistCratTs(int idx1) {
		return outputValue(A, idx1, xxRecHistCratTs);
	}

	/**
	 * set  XX_REC_HIST_CRAT_TS.
	 * @param data XX_REC_HIST_CRAT_TSArray
	 */
	public void setXxRecHistCratTs(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, xxRecHistCratTs, data[j]);
		}
	}

	/**
	 * get  XX_REC_HIST_CRAT_BY_NM.
	 * @param idx1 List Number
	 * @return XX_REC_HIST_CRAT_BY_NM
	 */
	public String getXxRecHistCratByNm(int idx1) {
		return outputValue(A, idx1, xxRecHistCratByNm);
	}

	/**
	 * set  XX_REC_HIST_CRAT_BY_NM.
	 * @param data XX_REC_HIST_CRAT_BY_NMArray
	 */
	public void setXxRecHistCratByNm(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, xxRecHistCratByNm, data[j]);
		}
	}

	/**
	 * get  XX_REC_HIST_UPD_TS.
	 * @param idx1 List Number
	 * @return XX_REC_HIST_UPD_TS
	 */
	public String getXxRecHistUpdTs(int idx1) {
		return outputValue(A, idx1, xxRecHistUpdTs);
	}

	/**
	 * set  XX_REC_HIST_UPD_TS.
	 * @param data XX_REC_HIST_UPD_TSArray
	 */
	public void setXxRecHistUpdTs(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, xxRecHistUpdTs, data[j]);
		}
	}

	/**
	 * get  XX_REC_HIST_UPD_BY_NM.
	 * @param idx1 List Number
	 * @return XX_REC_HIST_UPD_BY_NM
	 */
	public String getXxRecHistUpdByNm(int idx1) {
		return outputValue(A, idx1, xxRecHistUpdByNm);
	}

	/**
	 * set  XX_REC_HIST_UPD_BY_NM.
	 * @param data XX_REC_HIST_UPD_BY_NMArray
	 */
	public void setXxRecHistUpdByNm(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, xxRecHistUpdByNm, data[j]);
		}
	}

	/**
	 * get  XX_REC_HIST_TBL_NM.
	 * @param idx1 List Number
	 * @return XX_REC_HIST_TBL_NM
	 */
	public String getXxRecHistTblNm(int idx1) {
		return outputValue(A, idx1, xxRecHistTblNm);
	}

	/**
	 * set  XX_REC_HIST_TBL_NM.
	 * @param data XX_REC_HIST_TBL_NMArray
	 */
	public void setXxRecHistTblNm(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(A);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(A, i, xxRecHistTblNm, data[j]);
		}
	}

	/**
	 * get  XX_PAGE_SHOW_FROM_NUM.
	 * @return XX_PAGE_SHOW_FROM_NUM
	 */
	public String getXxPageShowFromNum() {
		return outputValue(xxPageShowFromNum);
	}

	/**
	 * set  XX_PAGE_SHOW_FROM_NUM.
	 * @param data XX_PAGE_SHOW_FROM_NUM
	 */
	public void setXxPageShowFromNum(String data) {
		inputValue(xxPageShowFromNum,data);
	}

	/**
	 * get  XX_PAGE_SHOW_TO_NUM.
	 * @return XX_PAGE_SHOW_TO_NUM
	 */
	public String getXxPageShowToNum() {
		return outputValue(xxPageShowToNum);
	}

	/**
	 * set  XX_PAGE_SHOW_TO_NUM.
	 * @param data XX_PAGE_SHOW_TO_NUM
	 */
	public void setXxPageShowToNum(String data) {
		inputValue(xxPageShowToNum,data);
	}

	/**
	 * get  XX_PAGE_SHOW_OF_NUM.
	 * @return XX_PAGE_SHOW_OF_NUM
	 */
	public String getXxPageShowOfNum() {
		return outputValue(xxPageShowOfNum);
	}

	/**
	 * set  XX_PAGE_SHOW_OF_NUM.
	 * @param data XX_PAGE_SHOW_OF_NUM
	 */
	public void setXxPageShowOfNum(String data) {
		inputValue(xxPageShowOfNum,data);
	}

	/**
	 * get  DS_CONTR_PK_OP.
	 * @return DS_CONTR_PK_OP
	 */
	public String getDsContrPk_OP() {
		return outputValue(dsContrPk_OP);
	}

	/**
	 * set  DS_CONTR_PK_OP.
	 * @param data DS_CONTR_PK_OP
	 */
	public void setDsContrPk_OP(String data) {
		inputValue(dsContrPk_OP,data);
	}

	/**
	 * get  DS_CONTR_DTL_PK_OP.
	 * @return DS_CONTR_DTL_PK_OP
	 */
	public String getDsContrDtlPk_OP() {
		return outputValue(dsContrDtlPk_OP);
	}

	/**
	 * set  DS_CONTR_DTL_PK_OP.
	 * @param data DS_CONTR_DTL_PK_OP
	 */
	public void setDsContrDtlPk_OP(String data) {
		inputValue(dsContrDtlPk_OP,data);
	}

	/**
	 * get  SVC_MACH_MSTR_PK_OP.
	 * @return SVC_MACH_MSTR_PK_OP
	 */
	public String getSvcMachMstrPk_OP() {
		return outputValue(svcMachMstrPk_OP);
	}

	/**
	 * set  SVC_MACH_MSTR_PK_OP.
	 * @param data SVC_MACH_MSTR_PK_OP
	 */
	public void setSvcMachMstrPk_OP(String data) {
		inputValue(svcMachMstrPk_OP,data);
	}

	/**
	 * get  START_DT_OP.
	 * @return START_DT_OP
	 */
	public String getStartDt_OP() {
		return outputValue(startDt_OP, VALUE_YEAR_MONTH_DAY);
	}

	/**
	 * set  START_DT_OP.
	 * @param data START_DT_OP
	 */
	public void setStartDt_OP(String data) {
		inputValue(startDt_OP, data, VALUE_YEAR_MONTH_DAY);
	}

	/**
	 * get  DS_CONTR_PK_P1.
	 * @param idx1 List Number
	 * @return DS_CONTR_PK_P1
	 */
	public String getDsContrPk_P1(int idx1) {
		return outputValue(P, idx1, dsContrPk_P1);
	}

	/**
	 * set  DS_CONTR_PK_P1.
	 * @param data DS_CONTR_PK_P1Array
	 */
	public void setDsContrPk_P1(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(P);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(P, i, dsContrPk_P1, data[j]);
		}
	}

	/**
	 * get  DS_CONTR_DTL_PK_P1.
	 * @param idx1 List Number
	 * @return DS_CONTR_DTL_PK_P1
	 */
	public String getDsContrDtlPk_P1(int idx1) {
		return outputValue(P, idx1, dsContrDtlPk_P1);
	}

	/**
	 * set  DS_CONTR_DTL_PK_P1.
	 * @param data DS_CONTR_DTL_PK_P1Array
	 */
	public void setDsContrDtlPk_P1(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(P);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(P, i, dsContrDtlPk_P1, data[j]);
		}
	}

	/**
	 * get  SVC_PHYS_MTR_PK_P.
	 * @param idx1 List Number
	 * @return SVC_PHYS_MTR_PK_P
	 */
	public String getSvcPhysMtrPk_P(int idx1) {
		return outputValue(Q, idx1, svcPhysMtrPk_P);
	}

	/**
	 * set  SVC_PHYS_MTR_PK_P.
	 * @param data SVC_PHYS_MTR_PK_PArray
	 */
	public void setSvcPhysMtrPk_P(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(Q);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(Q, i, svcPhysMtrPk_P, data[j]);
		}
	}

	/**
	 * get  MTR_LB_CD_P.
	 * @param idx1 List Number
	 * @return MTR_LB_CD_P
	 */
	public String getMtrLbCd_P(int idx1) {
		return outputValue(Q, idx1, mtrLbCd_P);
	}

	/**
	 * set  MTR_LB_CD_P.
	 * @param data MTR_LB_CD_PArray
	 */
	public void setMtrLbCd_P(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(Q);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(Q, i, mtrLbCd_P, data[j]);
		}
	}

	/**
	 * get  MTR_READ_DT_P.
	 * @param idx1 List Number
	 * @return MTR_READ_DT_P
	 */
	public String getMtrReadDt_P(int idx1) {
		return outputValue(Q, idx1, mtrReadDt_P, VALUE_YEAR_MONTH_DAY);
	}

	/**
	 * set  MTR_READ_DT_P.
	 * @param data MTR_READ_DT_PArray
	 */
	public void setMtrReadDt_P(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(Q);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(Q, i,  mtrReadDt_P, data[j], VALUE_YEAR_MONTH_DAY);
		}
	}

	/**
	 * get  READ_MTR_CNT_P.
	 * @param idx1 List Number
	 * @return READ_MTR_CNT_P
	 */
	public String getReadMtrCnt_P(int idx1) {
		return outputValue(Q, idx1, readMtrCnt_P);
	}

	/**
	 * set  READ_MTR_CNT_P.
	 * @param data READ_MTR_CNT_PArray
	 */
	public void setReadMtrCnt_P(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(Q);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(Q, i, readMtrCnt_P, data[j]);
		}
	}

	/**
	 * get  SVC_PHYS_MTR_READ_GRP_SQ_P.
	 * @param idx1 List Number
	 * @return SVC_PHYS_MTR_READ_GRP_SQ_P
	 */
	public String getSvcPhysMtrReadGrpSq_P(int idx1) {
		return outputValue(Q, idx1, svcPhysMtrReadGrpSq_P);
	}

	/**
	 * set  SVC_PHYS_MTR_READ_GRP_SQ_P.
	 * @param data SVC_PHYS_MTR_READ_GRP_SQ_PArray
	 */
	public void setSvcPhysMtrReadGrpSq_P(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(Q);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(Q, i, svcPhysMtrReadGrpSq_P, data[j]);
		}
	}

	/**
	 * get  DS_MTR_READ_TP_GRP_CD_P.
	 * @param idx1 List Number
	 * @return DS_MTR_READ_TP_GRP_CD_P
	 */
	public String getDsMtrReadTpGrpCd_P(int idx1) {
		return outputValue(Q, idx1, dsMtrReadTpGrpCd_P);
	}

	/**
	 * set  DS_MTR_READ_TP_GRP_CD_P.
	 * @param data DS_MTR_READ_TP_GRP_CD_PArray
	 */
	public void setDsMtrReadTpGrpCd_P(String[] data) {
		int i,j;
		int startPoint = getDisplayStartPoint(Q);
		for(i = startPoint, j = 0; i < (startPoint + data.length); i++, j++) {
			inputValue(Q, i, dsMtrReadTpGrpCd_P, data[j]);
		}
	}

}

