//This file was automatically generated by Business Component Interface Definition Document (Business Component Interface Message Data Definition) and XLA200710010.
// Generated on    :20161108161330000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :BusinessComponentInterfaceDefinitionDocumentAddIn_XLS200710010.xla XLA200710010
/*
 *NMAL7290CMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.blap.NMAL7290;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NMAL7290 Business Component Interface Message class.
 * @author
 * @version XLA200710010
 */
public class NMAL7290CMsg extends EZDCMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** XX_SCR_EVENT_NM*/
	public final EZDCStringItem              xxScrEventNm;

    /** XX_FILE_DATA*/
	public final EZDCMimeSourceItem              xxFileData;

    /** XX_WRN_SKIP_FLG*/
	public final EZDCStringItem              xxWrnSkipFlg;

    /** PRC_RULE_PRCD_PK*/
	public final EZDCBigDecimalItem              prcRulePrcdPk;

    /** PRC_RULE_PRCD_PK_BK*/
	public final EZDCBigDecimalItem              prcRulePrcdPk_BK;

    /** PRC_RULE_PRCD_GRP_NM*/
	public final EZDCStringItem              prcRulePrcdGrpNm;

    /** ACTV_FLG*/
	public final EZDCStringItem              actvFlg;

    /** PRC_PRCD_ACT_TP_CD*/
	public final EZDCStringItem              prcPrcdActTpCd;

    /** PRC_PRCD_ACT_TP_CD_L*/
	public final EZDCStringItemArray              prcPrcdActTpCd_L;

    /** PRC_PRCD_ACT_TP_DESC_TXT_L*/
	public final EZDCStringItemArray              prcPrcdActTpDescTxt_L;

    /** EFF_FROM_DT*/
	public final EZDCDateItem              effFromDt;

    /** EFF_THRU_DT*/
	public final EZDCDateItem              effThruDt;

    /** XX_FULL_NM_H1*/
	public final EZDCStringItem              xxFullNm_H1;

    /** CRAT_DT*/
	public final EZDCDateItem              cratDt;

    /** XX_FULL_NM_H2*/
	public final EZDCStringItem              xxFullNm_H2;

    /** LAST_UPD_DT*/
	public final EZDCDateItem              lastUpdDt;

    /** _EZUpdateDateTime*/
	public final EZDCStringItem              ezUpTime;

    /** _EZUpTimeZone*/
	public final EZDCStringItem              ezUpTimeZone;

    /** PRC_RULE_CATG_CD*/
	public final EZDCStringItem              prcRuleCatgCd;

    /** PRC_RULE_CATG_CD_L*/
	public final EZDCStringItemArray              prcRuleCatgCd_L;

    /** PRC_RULE_CATG_DESC_TXT_L*/
	public final EZDCStringItemArray              prcRuleCatgDescTxt_L;

    /** PRC_RULE_NM*/
	public final EZDCStringItem              prcRuleNm;

    /** LINE_BIZ_TP_CD*/
	public final EZDCStringItem              lineBizTpCd;

    /** LINE_BIZ_TP_CD_L*/
	public final EZDCStringItemArray              lineBizTpCd_L;

    /** LINE_BIZ_TP_DESC_TXT_L*/
	public final EZDCStringItemArray              lineBizTpDescTxt_L;

    /** PRC_RULE_COND_TP_CD*/
	public final EZDCStringItem              prcRuleCondTpCd;

    /** PRC_RULE_COND_TP_CD_L*/
	public final EZDCStringItemArray              prcRuleCondTpCd_L;

    /** PRC_RULE_COND_TP_DESC_TXT_L*/
	public final EZDCStringItemArray              prcRuleCondTpDescTxt_L;

    /** DS_ORD_CATG_CD*/
	public final EZDCStringItem              dsOrdCatgCd;

    /** DS_ORD_TP_CD*/
	public final EZDCStringItem              dsOrdTpCd;

    /** A*/
	public final business.blap.NMAL7290.NMAL7290_ACMsgArray              A;

    /** B*/
	public final business.blap.NMAL7290.NMAL7290_BCMsgArray              B;


	/**
	 * NMAL7290CMsg is constructor.
	 * The initialization when the instance of NMAL7290CMsg is generated.
	 */
	public NMAL7290CMsg() {
		this(false, -1);
	}

	/**
	 * NMAL7290CMsg is constructor.
	 * The initialization when the instance of NMAL7290CMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NMAL7290CMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		xxScrEventNm = (EZDCStringItem)newItem("xxScrEventNm");
		xxFileData = (EZDCMimeSourceItem)newItem("xxFileData");
		xxWrnSkipFlg = (EZDCStringItem)newItem("xxWrnSkipFlg");
		prcRulePrcdPk = (EZDCBigDecimalItem)newItem("prcRulePrcdPk");
		prcRulePrcdPk_BK = (EZDCBigDecimalItem)newItem("prcRulePrcdPk_BK");
		prcRulePrcdGrpNm = (EZDCStringItem)newItem("prcRulePrcdGrpNm");
		actvFlg = (EZDCStringItem)newItem("actvFlg");
		prcPrcdActTpCd = (EZDCStringItem)newItem("prcPrcdActTpCd");
		prcPrcdActTpCd_L = (EZDCStringItemArray)newItemArray("prcPrcdActTpCd_L");
		prcPrcdActTpDescTxt_L = (EZDCStringItemArray)newItemArray("prcPrcdActTpDescTxt_L");
		effFromDt = (EZDCDateItem)newItem("effFromDt");
		effThruDt = (EZDCDateItem)newItem("effThruDt");
		xxFullNm_H1 = (EZDCStringItem)newItem("xxFullNm_H1");
		cratDt = (EZDCDateItem)newItem("cratDt");
		xxFullNm_H2 = (EZDCStringItem)newItem("xxFullNm_H2");
		lastUpdDt = (EZDCDateItem)newItem("lastUpdDt");
		ezUpTime = (EZDCStringItem)newItem("ezUpTime");
		ezUpTimeZone = (EZDCStringItem)newItem("ezUpTimeZone");
		prcRuleCatgCd = (EZDCStringItem)newItem("prcRuleCatgCd");
		prcRuleCatgCd_L = (EZDCStringItemArray)newItemArray("prcRuleCatgCd_L");
		prcRuleCatgDescTxt_L = (EZDCStringItemArray)newItemArray("prcRuleCatgDescTxt_L");
		prcRuleNm = (EZDCStringItem)newItem("prcRuleNm");
		lineBizTpCd = (EZDCStringItem)newItem("lineBizTpCd");
		lineBizTpCd_L = (EZDCStringItemArray)newItemArray("lineBizTpCd_L");
		lineBizTpDescTxt_L = (EZDCStringItemArray)newItemArray("lineBizTpDescTxt_L");
		prcRuleCondTpCd = (EZDCStringItem)newItem("prcRuleCondTpCd");
		prcRuleCondTpCd_L = (EZDCStringItemArray)newItemArray("prcRuleCondTpCd_L");
		prcRuleCondTpDescTxt_L = (EZDCStringItemArray)newItemArray("prcRuleCondTpDescTxt_L");
		dsOrdCatgCd = (EZDCStringItem)newItem("dsOrdCatgCd");
		dsOrdTpCd = (EZDCStringItem)newItem("dsOrdTpCd");
		A = (business.blap.NMAL7290.NMAL7290_ACMsgArray)newMsgArray("A");
		B = (business.blap.NMAL7290.NMAL7290_BCMsgArray)newMsgArray("B");
	}

	/**
	 * get the type of array which is stored
	 * @return NMAL7290CMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NMAL7290CMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"xxScrEventNm", "xxScrEventNm", null, null, TYPE_HANKAKUEISU, "50", null},
	{"xxFileData", "xxFileData", null, null, TYPE_UPLOAD, null, null},
	{"xxWrnSkipFlg", "xxWrnSkipFlg", null, null, TYPE_HANKAKUEISU, "1", null},
	{"prcRulePrcdPk", "prcRulePrcdPk", null, null, TYPE_SEISU_SYOSU, "28", "0"},
	{"prcRulePrcdPk_BK", "prcRulePrcdPk_BK", "BK", null, TYPE_SEISU_SYOSU, "28", "0"},
	{"prcRulePrcdGrpNm", "prcRulePrcdGrpNm", null, null, TYPE_HANKAKUEISU, "50", null},
	{"actvFlg", "actvFlg", null, null, TYPE_HANKAKUEISU, "1", null},
	{"prcPrcdActTpCd", "prcPrcdActTpCd", null, null, TYPE_HANKAKUEISU, "2", null},
	{"prcPrcdActTpCd_L", "prcPrcdActTpCd_L", "L", "99", TYPE_HANKAKUEISU, "2", null},
	{"prcPrcdActTpDescTxt_L", "prcPrcdActTpDescTxt_L", "L", "99", TYPE_HANKAKUEISU, "50", null},
	{"effFromDt", "effFromDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"effThruDt", "effThruDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"xxFullNm_H1", "xxFullNm_H1", "H1", null, TYPE_HANKAKUEISU, "100", null},
	{"cratDt", "cratDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"xxFullNm_H2", "xxFullNm_H2", "H2", null, TYPE_HANKAKUEISU, "100", null},
	{"lastUpdDt", "lastUpdDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"ezUpTime", "ezUpTime", null, null, TYPE_HANKAKUEISU, "17", null},
	{"ezUpTimeZone", "ezUpTimeZone", null, null, TYPE_HANKAKUEISU, "5", null},
	{"prcRuleCatgCd", "prcRuleCatgCd", null, null, TYPE_HANKAKUEISU, "2", null},
	{"prcRuleCatgCd_L", "prcRuleCatgCd_L", "L", "99", TYPE_HANKAKUEISU, "2", null},
	{"prcRuleCatgDescTxt_L", "prcRuleCatgDescTxt_L", "L", "99", TYPE_HANKAKUEISU, "50", null},
	{"prcRuleNm", "prcRuleNm", null, null, TYPE_HANKAKUEISU, "50", null},
	{"lineBizTpCd", "lineBizTpCd", null, null, TYPE_HANKAKUEISU, "8", null},
	{"lineBizTpCd_L", "lineBizTpCd_L", "L", "99", TYPE_HANKAKUEISU, "8", null},
	{"lineBizTpDescTxt_L", "lineBizTpDescTxt_L", "L", "99", TYPE_HANKAKUEISU, "50", null},
	{"prcRuleCondTpCd", "prcRuleCondTpCd", null, null, TYPE_HANKAKUEISU, "2", null},
	{"prcRuleCondTpCd_L", "prcRuleCondTpCd_L", "L", "99", TYPE_HANKAKUEISU, "2", null},
	{"prcRuleCondTpDescTxt_L", "prcRuleCondTpDescTxt_L", "L", "99", TYPE_HANKAKUEISU, "50", null},
	{"dsOrdCatgCd", "dsOrdCatgCd", null, null, TYPE_HANKAKUEISU, "4", null},
	{"dsOrdTpCd", "dsOrdTpCd", null, null, TYPE_HANKAKUEISU, "4", null},
	{"A", "A", null, "200", "business.blap.NMAL7290.NMAL7290_ACMsgArray", null, null},
	
	{"B", "B", null, "200", "business.blap.NMAL7290.NMAL7290_BCMsgArray", null, null},
	
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"XX_SCR_EVENT_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxScrEventNm
        {"XX_FILE_DATA",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxFileData
        {"XX_WRN_SKIP_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxWrnSkipFlg
        {"PRC_RULE_PRCD_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcRulePrcdPk
        {"PRC_RULE_PRCD_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcRulePrcdPk_BK
        {"PRC_RULE_PRCD_GRP_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcRulePrcdGrpNm
        {"ACTV_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//actvFlg
        {"PRC_PRCD_ACT_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcPrcdActTpCd
        {"PRC_PRCD_ACT_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcPrcdActTpCd_L
        {"PRC_PRCD_ACT_TP_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcPrcdActTpDescTxt_L
        {"EFF_FROM_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//effFromDt
        {"EFF_THRU_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//effThruDt
        {"XX_FULL_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxFullNm_H1
        {"CRAT_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//cratDt
        {"XX_FULL_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxFullNm_H2
        {"LAST_UPD_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//lastUpdDt
        {"_EZUpdateDateTime",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ezUpTime
        {"_EZUpTimeZone",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ezUpTimeZone
        {"PRC_RULE_CATG_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcRuleCatgCd
        {"PRC_RULE_CATG_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcRuleCatgCd_L
        {"PRC_RULE_CATG_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcRuleCatgDescTxt_L
        {"PRC_RULE_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcRuleNm
        {"LINE_BIZ_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//lineBizTpCd
        {"LINE_BIZ_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//lineBizTpCd_L
        {"LINE_BIZ_TP_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//lineBizTpDescTxt_L
        {"PRC_RULE_COND_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcRuleCondTpCd
        {"PRC_RULE_COND_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcRuleCondTpCd_L
        {"PRC_RULE_COND_TP_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcRuleCondTpDescTxt_L
        {"DS_ORD_CATG_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsOrdCatgCd
        {"DS_ORD_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsOrdTpCd
		null,	//A
		null,	//B
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

