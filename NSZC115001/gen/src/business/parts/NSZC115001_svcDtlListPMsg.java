//This file was automatically generated by Common Business Component Interface Definition Document and XLA200710010.
// Generated on    :20180823154148000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :CommonBusinessComponentInterfaceDefinitionDocumentAddIn_XLS200710010.xla XLA200710010
/*
 *NSZC115001_svcDtlListPMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.parts;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NSZC115001 Common Business Component Interface Message class.
 * @author
 * @version XLA200710010
 */
public class NSZC115001_svcDtlListPMsg extends EZDPMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** XX_RQST_TP_CD*/
	public final EZDPStringItem              xxRqstTpCd;

    /** DEL_FLG_PI*/
	public final EZDPStringItem              delFlg_PI;

    /** DS_CONTR_PK*/
	public final EZDPBigDecimalItem              dsContrPk;

    /** SHELL_LINE_NUM*/
	public final EZDPBigDecimalItem              shellLineNum;

    /** SVC_PGM_MDSE_CD*/
	public final EZDPStringItem              svcPgmMdseCd;

    /** PRC_SVC_CONTR_TP_CD*/
	public final EZDPStringItem              prcSvcContrTpCd;

    /** PRC_SVC_PLN_TP_CD*/
	public final EZDPStringItem              prcSvcPlnTpCd;

    /** DS_CONTR_CATG_CD*/
	public final EZDPStringItem              dsContrCatgCd;

    /** BASE_BLLG_CYCLE_CD*/
	public final EZDPStringItem              baseBllgCycleCd;

    /** USG_BLLG_CYCLE_CD*/
	public final EZDPStringItem              usgBllgCycleCd;

    /** FROM_PER_MTH_NUM*/
	public final EZDPBigDecimalItem              fromPerMthNum;

    /** TO_PER_MTH_NUM*/
	public final EZDPBigDecimalItem              toPerMthNum;

    /** BILL_WITH_EQUIP_FLG*/
	public final EZDPStringItem              billWithEquipFlg;

    /** BILL_BY_TP_CD*/
	public final EZDPStringItem              billByTpCd;

    /** SOLD_TO_CUST_LOC_CD*/
	public final EZDPStringItem              soldToCustLocCd;

    /** SELL_TO_CUST_CD*/
	public final EZDPStringItem              sellToCustCd;

    /** CPO_SVC_AGMT_VER_NUM*/
	public final EZDPStringItem              cpoSvcAgmtVerNum;

    /** MAN_CONTR_OVRD_FLG*/
	public final EZDPStringItem              manContrOvrdFlg;

    /** MAN_CONTR_OVRD_RSN_CD*/
	public final EZDPStringItem              manContrOvrdRsnCd;

    /** MAN_CONTR_OVRD_CMNT_TXT*/
	public final EZDPStringItem              manContrOvrdCmntTxt;

    /** DS_CONTR_PK_AD*/
	public final EZDPBigDecimalItem              dsContrPk_AD;

    /** ADD_ASRY_FLG*/
	public final EZDPStringItem              addAsryFlg;

    /** CR_REBIL_CD*/
	public final EZDPStringItem              crRebilCd;

    /** APPLY_EQUIP_BILL_TO_FLG*/
	public final EZDPStringItem              applyEquipBillToFlg;

    /** FIX_TERM_IN_MTH_AOT*/
	public final EZDPBigDecimalItem              fixTermInMthAot;

    /** MAX_UPLFT_PCT*/
	public final EZDPBigDecimalItem              maxUplftPct;

    /** ADDL_BASE_PRC_CATG_CD*/
	public final EZDPStringItem              addlBasePrcCatgCd;

    /** RNTL_PRC_CATG_CD*/
	public final EZDPStringItem              rntlPrcCatgCd;

    /** ADDL_CHRG_PRC_CATG_CD*/
	public final EZDPStringItem              addlChrgPrcCatgCd;

    /** XX_MSG_ID*/
	public final EZDPStringItem              xxMsgId;


	/**
	 * NSZC115001_svcDtlListPMsg is constructor.
	 * The initialization when the instance of NSZC115001_svcDtlListPMsg is generated.
	 */
	public NSZC115001_svcDtlListPMsg() {
		this(false, -1);
	}

	/**
	 * NSZC115001_svcDtlListPMsg is constructor.
	 * The initialization when the instance of NSZC115001_svcDtlListPMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NSZC115001_svcDtlListPMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		xxRqstTpCd = (EZDPStringItem)newItem("xxRqstTpCd");
		delFlg_PI = (EZDPStringItem)newItem("delFlg_PI");
		dsContrPk = (EZDPBigDecimalItem)newItem("dsContrPk");
		shellLineNum = (EZDPBigDecimalItem)newItem("shellLineNum");
		svcPgmMdseCd = (EZDPStringItem)newItem("svcPgmMdseCd");
		prcSvcContrTpCd = (EZDPStringItem)newItem("prcSvcContrTpCd");
		prcSvcPlnTpCd = (EZDPStringItem)newItem("prcSvcPlnTpCd");
		dsContrCatgCd = (EZDPStringItem)newItem("dsContrCatgCd");
		baseBllgCycleCd = (EZDPStringItem)newItem("baseBllgCycleCd");
		usgBllgCycleCd = (EZDPStringItem)newItem("usgBllgCycleCd");
		fromPerMthNum = (EZDPBigDecimalItem)newItem("fromPerMthNum");
		toPerMthNum = (EZDPBigDecimalItem)newItem("toPerMthNum");
		billWithEquipFlg = (EZDPStringItem)newItem("billWithEquipFlg");
		billByTpCd = (EZDPStringItem)newItem("billByTpCd");
		soldToCustLocCd = (EZDPStringItem)newItem("soldToCustLocCd");
		sellToCustCd = (EZDPStringItem)newItem("sellToCustCd");
		cpoSvcAgmtVerNum = (EZDPStringItem)newItem("cpoSvcAgmtVerNum");
		manContrOvrdFlg = (EZDPStringItem)newItem("manContrOvrdFlg");
		manContrOvrdRsnCd = (EZDPStringItem)newItem("manContrOvrdRsnCd");
		manContrOvrdCmntTxt = (EZDPStringItem)newItem("manContrOvrdCmntTxt");
		dsContrPk_AD = (EZDPBigDecimalItem)newItem("dsContrPk_AD");
		addAsryFlg = (EZDPStringItem)newItem("addAsryFlg");
		crRebilCd = (EZDPStringItem)newItem("crRebilCd");
		applyEquipBillToFlg = (EZDPStringItem)newItem("applyEquipBillToFlg");
		fixTermInMthAot = (EZDPBigDecimalItem)newItem("fixTermInMthAot");
		maxUplftPct = (EZDPBigDecimalItem)newItem("maxUplftPct");
		addlBasePrcCatgCd = (EZDPStringItem)newItem("addlBasePrcCatgCd");
		rntlPrcCatgCd = (EZDPStringItem)newItem("rntlPrcCatgCd");
		addlChrgPrcCatgCd = (EZDPStringItem)newItem("addlChrgPrcCatgCd");
		xxMsgId = (EZDPStringItem)newItem("xxMsgId");
	}

	/**
	 * get the type of array which is stored
	 * @return NSZC115001_svcDtlListPMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NSZC115001_svcDtlListPMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"xxRqstTpCd", "xxRqstTpCd", null, null, TYPE_HANKAKUEISU, "1", null},
	{"delFlg_PI", "delFlg_PI", "PI", null, TYPE_HANKAKUEISU, "1", null},
	{"dsContrPk", "dsContrPk", null, null, TYPE_SEISU_SYOSU, "28", "0"},
	{"shellLineNum", "shellLineNum", null, null, TYPE_SEISU_SYOSU, "10", "0"},
	{"svcPgmMdseCd", "svcPgmMdseCd", null, null, TYPE_HANKAKUEISU, "16", null},
	{"prcSvcContrTpCd", "prcSvcContrTpCd", null, null, TYPE_HANKAKUEISU, "2", null},
	{"prcSvcPlnTpCd", "prcSvcPlnTpCd", null, null, TYPE_HANKAKUEISU, "2", null},
	{"dsContrCatgCd", "dsContrCatgCd", null, null, TYPE_HANKAKUEISU, "3", null},
	{"baseBllgCycleCd", "baseBllgCycleCd", null, null, TYPE_HANKAKUEISU, "1", null},
	{"usgBllgCycleCd", "usgBllgCycleCd", null, null, TYPE_HANKAKUEISU, "1", null},
	{"fromPerMthNum", "fromPerMthNum", null, null, TYPE_SEISU_SYOSU, "3", "0"},
	{"toPerMthNum", "toPerMthNum", null, null, TYPE_SEISU_SYOSU, "3", "0"},
	{"billWithEquipFlg", "billWithEquipFlg", null, null, TYPE_HANKAKUEISU, "1", null},
	{"billByTpCd", "billByTpCd", null, null, TYPE_HANKAKUEISU, "2", null},
	{"soldToCustLocCd", "soldToCustLocCd", null, null, TYPE_HANKAKUEISU, "20", null},
	{"sellToCustCd", "sellToCustCd", null, null, TYPE_HANKAKUEISU, "20", null},
	{"cpoSvcAgmtVerNum", "cpoSvcAgmtVerNum", null, null, TYPE_HANKAKUEISU, "50", null},
	{"manContrOvrdFlg", "manContrOvrdFlg", null, null, TYPE_HANKAKUEISU, "1", null},
	{"manContrOvrdRsnCd", "manContrOvrdRsnCd", null, null, TYPE_HANKAKUEISU, "5", null},
	{"manContrOvrdCmntTxt", "manContrOvrdCmntTxt", null, null, TYPE_HANKAKUEISU, "2000", null},
	{"dsContrPk_AD", "dsContrPk_AD", "AD", null, TYPE_SEISU_SYOSU, "28", "0"},
	{"addAsryFlg", "addAsryFlg", null, null, TYPE_HANKAKUEISU, "1", null},
	{"crRebilCd", "crRebilCd", null, null, TYPE_HANKAKUEISU, "20", null},
	{"applyEquipBillToFlg", "applyEquipBillToFlg", null, null, TYPE_HANKAKUEISU, "1", null},
	{"fixTermInMthAot", "fixTermInMthAot", null, null, TYPE_SEISU_SYOSU, "3", "0"},
	{"maxUplftPct", "maxUplftPct", null, null, TYPE_SEISU_SYOSU, "3", "0"},
	{"addlBasePrcCatgCd", "addlBasePrcCatgCd", null, null, TYPE_HANKAKUEISU, "10", null},
	{"rntlPrcCatgCd", "rntlPrcCatgCd", null, null, TYPE_HANKAKUEISU, "10", null},
	{"addlChrgPrcCatgCd", "addlChrgPrcCatgCd", null, null, TYPE_HANKAKUEISU, "10", null},
	{"xxMsgId", "xxMsgId", null, null, TYPE_HANKAKUEISU, "9", null},
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"XX_RQST_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxRqstTpCd
        {"DEL_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//delFlg_PI
        {"DS_CONTR_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsContrPk
        {"SHELL_LINE_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shellLineNum
        {"SVC_PGM_MDSE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcPgmMdseCd
        {"PRC_SVC_CONTR_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcSvcContrTpCd
        {"PRC_SVC_PLN_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcSvcPlnTpCd
        {"DS_CONTR_CATG_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsContrCatgCd
        {"BASE_BLLG_CYCLE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//baseBllgCycleCd
        {"USG_BLLG_CYCLE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//usgBllgCycleCd
        {"FROM_PER_MTH_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//fromPerMthNum
        {"TO_PER_MTH_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//toPerMthNum
        {"BILL_WITH_EQUIP_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//billWithEquipFlg
        {"BILL_BY_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//billByTpCd
        {"SOLD_TO_CUST_LOC_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//soldToCustLocCd
        {"SELL_TO_CUST_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//sellToCustCd
        {"CPO_SVC_AGMT_VER_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//cpoSvcAgmtVerNum
        {"MAN_CONTR_OVRD_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//manContrOvrdFlg
        {"MAN_CONTR_OVRD_RSN_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//manContrOvrdRsnCd
        {"MAN_CONTR_OVRD_CMNT_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//manContrOvrdCmntTxt
        {"DS_CONTR_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsContrPk_AD
        {"ADD_ASRY_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//addAsryFlg
        {"CR_REBIL_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//crRebilCd
        {"APPLY_EQUIP_BILL_TO_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//applyEquipBillToFlg
        {"FIX_TERM_IN_MTH_AOT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//fixTermInMthAot
        {"MAX_UPLFT_PCT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//maxUplftPct
        {"ADDL_BASE_PRC_CATG_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//addlBasePrcCatgCd
        {"RNTL_PRC_CATG_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//rntlPrcCatgCd
        {"ADDL_CHRG_PRC_CATG_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//addlChrgPrcCatgCd
        {"XX_MSG_ID",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxMsgId
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

