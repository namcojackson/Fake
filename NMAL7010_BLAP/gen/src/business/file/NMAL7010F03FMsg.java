//This file was automatically generated by Text File Layout Definition Document and XLA200710010.
// Generated on    :20151013091417000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :TextFileLayoutDefinitionDocument_AddIn_XLS200710010.xla XLA200710010
/*
 *NMAL7010F03FMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.file;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NMAL7010F03 File Layout Message class.
 * @author
 * @version XLA200710010
 */
public class NMAL7010F03FMsg extends EZDFMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** MDL_NM*/
	public final EZDFStringItem              mdlNm;

    /** PRC_SVC_TIER_TP_NM*/
	public final EZDFStringItem              prcSvcTierTpNm;

    /** PRC_MTR_PKG_NM*/
	public final EZDFStringItem              prcMtrPkgNm;

    /** PRC_SVC_PLN_TP_NM*/
	public final EZDFStringItem              prcSvcPlnTpNm;

    /** PRC_SVC_CONTR_TP_NM*/
	public final EZDFStringItem              prcSvcContrTpNm;

    /** MTR_LB_NM*/
	public final EZDFStringItem              mtrLbNm;

    /** AVG_COPY_VOL_CNT*/
	public final EZDFBigDecimalItem              avgCopyVolCnt;

    /** MIN_COPY_VOL_CNT*/
	public final EZDFBigDecimalItem              minCopyVolCnt;

    /** MAX_COPY_VOL_CNT*/
	public final EZDFBigDecimalItem              maxCopyVolCnt;

    /** PRC_LIST_BAND_NM*/
	public final EZDFStringItem              prcListBandNm;

    /** BASE_AMT*/
	public final EZDFBigDecimalItem              baseAmt;

    /** MIN_BASE_AMT*/
	public final EZDFBigDecimalItem              minBaseAmt;

    /** MAX_BASE_AMT*/
	public final EZDFBigDecimalItem              maxBaseAmt;

    /** CPC_AMT_RATE*/
	public final EZDFBigDecimalItem              cpcAmtRate;

    /** MIN_CPC_AMT_RATE*/
	public final EZDFBigDecimalItem              minCpcAmtRate;

    /** MAX_CPC_AMT_RATE*/
	public final EZDFBigDecimalItem              maxCpcAmtRate;

    /** TERM_FROM_MTH_AOT*/
	public final EZDFBigDecimalItem              termFromMthAot;

    /** TERM_THRU_MTH_AOT*/
	public final EZDFBigDecimalItem              termThruMthAot;

    /** MDSE_CD*/
	public final EZDFStringItem              mdseCd;

    /** EFF_FROM_DT*/
	public final EZDFDateItem              effFromDt;

    /** EFF_THRU_DT*/
	public final EZDFDateItem              effThruDt;

    /** MTR_MULT_RATE*/
	public final EZDFBigDecimalItem              mtrMultRate;


	/**
	 * NMAL7010F03FMsg is constructor.
	 * The initialization when the instance of NMAL7010F03FMsg is generated.
	 */
	public NMAL7010F03FMsg() {
		this(false, -1);
	}

	/**
	 * NMAL7010F03FMsg is constructor.
	 * The initialization when the instance of NMAL7010F03FMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NMAL7010F03FMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		mdlNm = (EZDFStringItem)newItem("mdlNm");
		prcSvcTierTpNm = (EZDFStringItem)newItem("prcSvcTierTpNm");
		prcMtrPkgNm = (EZDFStringItem)newItem("prcMtrPkgNm");
		prcSvcPlnTpNm = (EZDFStringItem)newItem("prcSvcPlnTpNm");
		prcSvcContrTpNm = (EZDFStringItem)newItem("prcSvcContrTpNm");
		mtrLbNm = (EZDFStringItem)newItem("mtrLbNm");
		avgCopyVolCnt = (EZDFBigDecimalItem)newItem("avgCopyVolCnt");
		minCopyVolCnt = (EZDFBigDecimalItem)newItem("minCopyVolCnt");
		maxCopyVolCnt = (EZDFBigDecimalItem)newItem("maxCopyVolCnt");
		prcListBandNm = (EZDFStringItem)newItem("prcListBandNm");
		baseAmt = (EZDFBigDecimalItem)newItem("baseAmt");
		minBaseAmt = (EZDFBigDecimalItem)newItem("minBaseAmt");
		maxBaseAmt = (EZDFBigDecimalItem)newItem("maxBaseAmt");
		cpcAmtRate = (EZDFBigDecimalItem)newItem("cpcAmtRate");
		minCpcAmtRate = (EZDFBigDecimalItem)newItem("minCpcAmtRate");
		maxCpcAmtRate = (EZDFBigDecimalItem)newItem("maxCpcAmtRate");
		termFromMthAot = (EZDFBigDecimalItem)newItem("termFromMthAot");
		termThruMthAot = (EZDFBigDecimalItem)newItem("termThruMthAot");
		mdseCd = (EZDFStringItem)newItem("mdseCd");
		effFromDt = (EZDFDateItem)newItem("effFromDt");
		effThruDt = (EZDFDateItem)newItem("effThruDt");
		mtrMultRate = (EZDFBigDecimalItem)newItem("mtrMultRate");
	}

	/**
	 * get the type of array which is stored
	 * @return NMAL7010F03FMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NMAL7010F03FMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"mdlNm", "mdlNm", null, null, TYPE_HANKAKUEISU, "50", null},
	{"prcSvcTierTpNm", "prcSvcTierTpNm", null, null, TYPE_HANKAKUEISU, "30", null},
	{"prcMtrPkgNm", "prcMtrPkgNm", null, null, TYPE_HANKAKUEISU, "50", null},
	{"prcSvcPlnTpNm", "prcSvcPlnTpNm", null, null, TYPE_HANKAKUEISU, "30", null},
	{"prcSvcContrTpNm", "prcSvcContrTpNm", null, null, TYPE_HANKAKUEISU, "30", null},
	{"mtrLbNm", "mtrLbNm", null, null, TYPE_HANKAKUEISU, "30", null},
	{"avgCopyVolCnt", "avgCopyVolCnt", null, null, TYPE_SEISU_SYOSU, "12", "0"},
	{"minCopyVolCnt", "minCopyVolCnt", null, null, TYPE_SEISU_SYOSU, "12", "0"},
	{"maxCopyVolCnt", "maxCopyVolCnt", null, null, TYPE_SEISU_SYOSU, "12", "0"},
	{"prcListBandNm", "prcListBandNm", null, null, TYPE_HANKAKUEISU, "30", null},
	{"baseAmt", "baseAmt", null, null, TYPE_SEISU_SYOSU, "19", "4"},
	{"minBaseAmt", "minBaseAmt", null, null, TYPE_SEISU_SYOSU, "19", "4"},
	{"maxBaseAmt", "maxBaseAmt", null, null, TYPE_SEISU_SYOSU, "19", "4"},
	{"cpcAmtRate", "cpcAmtRate", null, null, TYPE_SEISU_SYOSU, "9", "5"},
	{"minCpcAmtRate", "minCpcAmtRate", null, null, TYPE_SEISU_SYOSU, "9", "5"},
	{"maxCpcAmtRate", "maxCpcAmtRate", null, null, TYPE_SEISU_SYOSU, "9", "5"},
	{"termFromMthAot", "termFromMthAot", null, null, TYPE_SEISU_SYOSU, "3", "0"},
	{"termThruMthAot", "termThruMthAot", null, null, TYPE_SEISU_SYOSU, "3", "0"},
	{"mdseCd", "mdseCd", null, null, TYPE_HANKAKUEISU, "16", null},
	{"effFromDt", "effFromDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"effThruDt", "effThruDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"mtrMultRate", "mtrMultRate", null, null, TYPE_SEISU_SYOSU, "9", "5"},
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"MDL_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mdlNm
        {"PRC_SVC_TIER_TP_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcSvcTierTpNm
        {"PRC_MTR_PKG_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcMtrPkgNm
        {"PRC_SVC_PLN_TP_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcSvcPlnTpNm
        {"PRC_SVC_CONTR_TP_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcSvcContrTpNm
        {"MTR_LB_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrLbNm
        {"AVG_COPY_VOL_CNT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//avgCopyVolCnt
        {"MIN_COPY_VOL_CNT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//minCopyVolCnt
        {"MAX_COPY_VOL_CNT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//maxCopyVolCnt
        {"PRC_LIST_BAND_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcListBandNm
        {"BASE_AMT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//baseAmt
        {"MIN_BASE_AMT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//minBaseAmt
        {"MAX_BASE_AMT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//maxBaseAmt
        {"CPC_AMT_RATE",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//cpcAmtRate
        {"MIN_CPC_AMT_RATE",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//minCpcAmtRate
        {"MAX_CPC_AMT_RATE",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//maxCpcAmtRate
        {"TERM_FROM_MTH_AOT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//termFromMthAot
        {"TERM_THRU_MTH_AOT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//termThruMthAot
        {"MDSE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mdseCd
        {"EFF_FROM_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//effFromDt
        {"EFF_THRU_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//effThruDt
        {"MTR_MULT_RATE",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrMultRate
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

