//This file was automatically generated by Business Component Interface Definition Document (Business Component Interface Message Data Definition) and XLA200710010.
// Generated on    :20231108093940000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :BusinessComponentInterfaceDefinitionDocumentAddIn_XLS200710010.xla XLA200710010
/*
 *NMAL6720_CCMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.blap.NMAL6720;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NMAL6720 Business Component Interface Message class.
 * @author
 * @version XLA200710010
 */
public class NMAL6720_CCMsg extends EZDCMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** CTAC_PSN_PK_C1*/
	public final EZDCBigDecimalItem              ctacPsnPk_C1;

    /** CTAC_PSN_NUM_C1*/
	public final EZDCStringItem              ctacPsnNum_C1;

    /** DS_CTAC_PSN_RELN_PK_C1*/
	public final EZDCBigDecimalItem              dsCtacPsnRelnPk_C1;

    /** CTAC_TP_CD_C1*/
	public final EZDCStringItem              ctacTpCd_C1;

    /** CTAC_TP_DESC_TXT_C1*/
	public final EZDCStringItem              ctacTpDescTxt_C1;

    /** CTAC_PSN_FIRST_NM_C1*/
	public final EZDCStringItem              ctacPsnFirstNm_C1;

    /** CTAC_PSN_LAST_NM_C1*/
	public final EZDCStringItem              ctacPsnLastNm_C1;

    /** DS_CTAC_PSN_DEPT_NM_C1*/
	public final EZDCStringItem              dsCtacPsnDeptNm_C1;

    /** DS_CTAC_PNT_VAL_TXT_C1*/
	public final EZDCStringItem              dsCtacPntValTxt_C1;

    /** DS_CTAC_PNT_VAL_TXT_C2*/
	public final EZDCStringItem              dsCtacPntValTxt_C2;

    /** DS_CTAC_PSN_EXTN_NUM_C1*/
	public final EZDCStringItem              dsCtacPsnExtnNum_C1;

    /** EFF_FROM_DT_C1*/
	public final EZDCDateItem              effFromDt_C1;

    /** EFF_THRU_DT_C1*/
	public final EZDCDateItem              effThruDt_C1;

    /** DS_PRIM_LOC_FLG_C1*/
	public final EZDCStringItem              dsPrimLocFlg_C1;

    /** DS_PRIM_LOC_FLG_CB*/
	public final EZDCStringItem              dsPrimLocFlg_CB;

    /** DS_ACCT_STS_NM_C1*/
	public final EZDCStringItem              dsAcctStsNm_C1;

    /** _EZUpdateDateTime_C1*/
	public final EZDCStringItem              ezUpTime_C1;

    /** _EZUpTimeZone_C1*/
	public final EZDCStringItem              ezUpTimeZone_C1;

    /** XX_REC_HIST_CRAT_TS_C1*/
	public final EZDCStringItem              xxRecHistCratTs_C1;

    /** XX_REC_HIST_CRAT_BY_NM_C1*/
	public final EZDCStringItem              xxRecHistCratByNm_C1;

    /** XX_REC_HIST_UPD_TS_C1*/
	public final EZDCStringItem              xxRecHistUpdTs_C1;

    /** XX_REC_HIST_UPD_BY_NM_C1*/
	public final EZDCStringItem              xxRecHistUpdByNm_C1;

    /** XX_REC_HIST_TBL_NM_C1*/
	public final EZDCStringItem              xxRecHistTblNm_C1;


	/**
	 * NMAL6720_CCMsg is constructor.
	 * The initialization when the instance of NMAL6720_CCMsg is generated.
	 */
	public NMAL6720_CCMsg() {
		this(false, -1);
	}

	/**
	 * NMAL6720_CCMsg is constructor.
	 * The initialization when the instance of NMAL6720_CCMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NMAL6720_CCMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		ctacPsnPk_C1 = (EZDCBigDecimalItem)newItem("ctacPsnPk_C1");
		ctacPsnNum_C1 = (EZDCStringItem)newItem("ctacPsnNum_C1");
		dsCtacPsnRelnPk_C1 = (EZDCBigDecimalItem)newItem("dsCtacPsnRelnPk_C1");
		ctacTpCd_C1 = (EZDCStringItem)newItem("ctacTpCd_C1");
		ctacTpDescTxt_C1 = (EZDCStringItem)newItem("ctacTpDescTxt_C1");
		ctacPsnFirstNm_C1 = (EZDCStringItem)newItem("ctacPsnFirstNm_C1");
		ctacPsnLastNm_C1 = (EZDCStringItem)newItem("ctacPsnLastNm_C1");
		dsCtacPsnDeptNm_C1 = (EZDCStringItem)newItem("dsCtacPsnDeptNm_C1");
		dsCtacPntValTxt_C1 = (EZDCStringItem)newItem("dsCtacPntValTxt_C1");
		dsCtacPntValTxt_C2 = (EZDCStringItem)newItem("dsCtacPntValTxt_C2");
		dsCtacPsnExtnNum_C1 = (EZDCStringItem)newItem("dsCtacPsnExtnNum_C1");
		effFromDt_C1 = (EZDCDateItem)newItem("effFromDt_C1");
		effThruDt_C1 = (EZDCDateItem)newItem("effThruDt_C1");
		dsPrimLocFlg_C1 = (EZDCStringItem)newItem("dsPrimLocFlg_C1");
		dsPrimLocFlg_CB = (EZDCStringItem)newItem("dsPrimLocFlg_CB");
		dsAcctStsNm_C1 = (EZDCStringItem)newItem("dsAcctStsNm_C1");
		ezUpTime_C1 = (EZDCStringItem)newItem("ezUpTime_C1");
		ezUpTimeZone_C1 = (EZDCStringItem)newItem("ezUpTimeZone_C1");
		xxRecHistCratTs_C1 = (EZDCStringItem)newItem("xxRecHistCratTs_C1");
		xxRecHistCratByNm_C1 = (EZDCStringItem)newItem("xxRecHistCratByNm_C1");
		xxRecHistUpdTs_C1 = (EZDCStringItem)newItem("xxRecHistUpdTs_C1");
		xxRecHistUpdByNm_C1 = (EZDCStringItem)newItem("xxRecHistUpdByNm_C1");
		xxRecHistTblNm_C1 = (EZDCStringItem)newItem("xxRecHistTblNm_C1");
	}

	/**
	 * get the type of array which is stored
	 * @return NMAL6720_CCMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NMAL6720_CCMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"ctacPsnPk_C1", "ctacPsnPk_C1", "C1", null, TYPE_SEISU_SYOSU, "28", "0"},
	{"ctacPsnNum_C1", "ctacPsnNum_C1", "C1", null, TYPE_HANKAKUEISU, "10", null},
	{"dsCtacPsnRelnPk_C1", "dsCtacPsnRelnPk_C1", "C1", null, TYPE_SEISU_SYOSU, "28", "0"},
	{"ctacTpCd_C1", "ctacTpCd_C1", "C1", null, TYPE_HANKAKUEISU, "20", null},
	{"ctacTpDescTxt_C1", "ctacTpDescTxt_C1", "C1", null, TYPE_HANKAKUEISU, "50", null},
	{"ctacPsnFirstNm_C1", "ctacPsnFirstNm_C1", "C1", null, TYPE_HANKAKUEISU, "30", null},
	{"ctacPsnLastNm_C1", "ctacPsnLastNm_C1", "C1", null, TYPE_HANKAKUEISU, "30", null},
	{"dsCtacPsnDeptNm_C1", "dsCtacPsnDeptNm_C1", "C1", null, TYPE_HANKAKUEISU, "50", null},
	{"dsCtacPntValTxt_C1", "dsCtacPntValTxt_C1", "C1", null, TYPE_HANKAKUEISU, "320", null},
	{"dsCtacPntValTxt_C2", "dsCtacPntValTxt_C2", "C2", null, TYPE_HANKAKUEISU, "320", null},
	{"dsCtacPsnExtnNum_C1", "dsCtacPsnExtnNum_C1", "C1", null, TYPE_HANKAKUEISU, "10", null},
	{"effFromDt_C1", "effFromDt_C1", "C1", null, TYPE_NENTSUKIHI, "8", null},
	{"effThruDt_C1", "effThruDt_C1", "C1", null, TYPE_NENTSUKIHI, "8", null},
	{"dsPrimLocFlg_C1", "dsPrimLocFlg_C1", "C1", null, TYPE_HANKAKUEISU, "1", null},
	{"dsPrimLocFlg_CB", "dsPrimLocFlg_CB", "CB", null, TYPE_HANKAKUEISU, "1", null},
	{"dsAcctStsNm_C1", "dsAcctStsNm_C1", "C1", null, TYPE_HANKAKUEISU, "20", null},
	{"ezUpTime_C1", "ezUpTime_C1", "C1", null, TYPE_HANKAKUEISU, "17", null},
	{"ezUpTimeZone_C1", "ezUpTimeZone_C1", "C1", null, TYPE_HANKAKUEISU, "5", null},
	{"xxRecHistCratTs_C1", "xxRecHistCratTs_C1", "C1", null, TYPE_HANKAKUSUJI, "17", null},
	{"xxRecHistCratByNm_C1", "xxRecHistCratByNm_C1", "C1", null, TYPE_HANKAKUEISU, "150", null},
	{"xxRecHistUpdTs_C1", "xxRecHistUpdTs_C1", "C1", null, TYPE_HANKAKUSUJI, "17", null},
	{"xxRecHistUpdByNm_C1", "xxRecHistUpdByNm_C1", "C1", null, TYPE_HANKAKUEISU, "150", null},
	{"xxRecHistTblNm_C1", "xxRecHistTblNm_C1", "C1", null, TYPE_HANKAKUEISU, "60", null},
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"CTAC_PSN_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ctacPsnPk_C1
        {"CTAC_PSN_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ctacPsnNum_C1
        {"DS_CTAC_PSN_RELN_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsCtacPsnRelnPk_C1
        {"CTAC_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ctacTpCd_C1
        {"CTAC_TP_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ctacTpDescTxt_C1
        {"CTAC_PSN_FIRST_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ctacPsnFirstNm_C1
        {"CTAC_PSN_LAST_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ctacPsnLastNm_C1
        {"DS_CTAC_PSN_DEPT_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsCtacPsnDeptNm_C1
        {"DS_CTAC_PNT_VAL_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsCtacPntValTxt_C1
        {"DS_CTAC_PNT_VAL_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsCtacPntValTxt_C2
        {"DS_CTAC_PSN_EXTN_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsCtacPsnExtnNum_C1
        {"EFF_FROM_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//effFromDt_C1
        {"EFF_THRU_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//effThruDt_C1
        {"DS_PRIM_LOC_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsPrimLocFlg_C1
        {"DS_PRIM_LOC_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsPrimLocFlg_CB
        {"DS_ACCT_STS_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsAcctStsNm_C1
        {"_EZUpdateDateTime",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ezUpTime_C1
        {"_EZUpTimeZone",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ezUpTimeZone_C1
        {"XX_REC_HIST_CRAT_TS",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxRecHistCratTs_C1
        {"XX_REC_HIST_CRAT_BY_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxRecHistCratByNm_C1
        {"XX_REC_HIST_UPD_TS",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxRecHistUpdTs_C1
        {"XX_REC_HIST_UPD_BY_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxRecHistUpdByNm_C1
        {"XX_REC_HIST_TBL_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxRecHistTblNm_C1
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

