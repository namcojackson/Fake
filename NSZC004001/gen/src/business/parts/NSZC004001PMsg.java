//This file was automatically generated by Common Business Component Interface Definition Document and XLA200710010.
// Generated on    :20180809180931000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :CommonBusinessComponentInterfaceDefinitionDocumentAddIn_XLS200710010.xla XLA200710010
/*
 *NSZC004001PMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.parts;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NSZC004001 Common Business Component Interface Message class.
 * @author
 * @version XLA200710010
 */
public class NSZC004001PMsg extends EZDPMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** GLBL_CMPY_CD*/
	public final EZDPStringItem              glblCmpyCd;

    /** XX_MODE_CD*/
	public final EZDPStringItem              xxModeCd;

    /** FSR_NUM*/
	public final EZDPStringItem              fsrNum;

    /** FSR_VISIT_NUM*/
	public final EZDPStringItem              fsrVisitNum;

    /** TECH_CD*/
	public final EZDPStringItem              techCd;

    /** SVC_CHRG_CONT_FLG*/
	public final EZDPStringItem              svcChrgContFlg;

    /** BYPS_PRF_TECH_FLG*/
	public final EZDPStringItem              bypsPrfTechFlg;

    /** TECH_SCHD_FROM_DT*/
	public final EZDPDateItem              techSchdFromDt;

    /** TECH_SCHD_FROM_TM*/
	public final EZDPStringItem              techSchdFromTm;

    /** SCHD_DISPT_EML_FLG*/
	public final EZDPStringItem              schdDisptEmlFlg;

    /** FSR_VISIT_STS_CD*/
	public final EZDPStringItem              fsrVisitStsCd;

    /** SVC_ASG_TP_CD*/
	public final EZDPStringItem              svcAsgTpCd;

    /** SVC_ASG_TECH_CD*/
	public final EZDPStringItem              svcAsgTechCd;

    /** FUT_SVC_DT*/
	public final EZDPDateItem              futSvcDt;

    /** FUT_SVC_TM*/
	public final EZDPStringItem              futSvcTm;

    /** OVRD_FLG*/
	public final EZDPStringItem              ovrdFlg;

    /** MBL_INTFC_FLG*/
	public final EZDPStringItem              mblIntfcFlg;

    /** xxSvcTaskNumList*/
	public final business.parts.NSZC004001_xxSvcTaskNumListPMsgArray              xxSvcTaskNumList;

    /** FSR_EVENT_EXE_USR_ID*/
	public final EZDPStringItem              fsrEventExeUsrId;

    /** xxMsgIdList*/
	public final business.parts.NSZC004001_xxMsgIdListPMsgArray              xxMsgIdList;


	/**
	 * NSZC004001PMsg is constructor.
	 * The initialization when the instance of NSZC004001PMsg is generated.
	 */
	public NSZC004001PMsg() {
		this(false, -1);
	}

	/**
	 * NSZC004001PMsg is constructor.
	 * The initialization when the instance of NSZC004001PMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NSZC004001PMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		glblCmpyCd = (EZDPStringItem)newItem("glblCmpyCd");
		xxModeCd = (EZDPStringItem)newItem("xxModeCd");
		fsrNum = (EZDPStringItem)newItem("fsrNum");
		fsrVisitNum = (EZDPStringItem)newItem("fsrVisitNum");
		techCd = (EZDPStringItem)newItem("techCd");
		svcChrgContFlg = (EZDPStringItem)newItem("svcChrgContFlg");
		bypsPrfTechFlg = (EZDPStringItem)newItem("bypsPrfTechFlg");
		techSchdFromDt = (EZDPDateItem)newItem("techSchdFromDt");
		techSchdFromTm = (EZDPStringItem)newItem("techSchdFromTm");
		schdDisptEmlFlg = (EZDPStringItem)newItem("schdDisptEmlFlg");
		fsrVisitStsCd = (EZDPStringItem)newItem("fsrVisitStsCd");
		svcAsgTpCd = (EZDPStringItem)newItem("svcAsgTpCd");
		svcAsgTechCd = (EZDPStringItem)newItem("svcAsgTechCd");
		futSvcDt = (EZDPDateItem)newItem("futSvcDt");
		futSvcTm = (EZDPStringItem)newItem("futSvcTm");
		ovrdFlg = (EZDPStringItem)newItem("ovrdFlg");
		mblIntfcFlg = (EZDPStringItem)newItem("mblIntfcFlg");
		xxSvcTaskNumList = (business.parts.NSZC004001_xxSvcTaskNumListPMsgArray)newMsgArray("xxSvcTaskNumList");
		fsrEventExeUsrId = (EZDPStringItem)newItem("fsrEventExeUsrId");
		xxMsgIdList = (business.parts.NSZC004001_xxMsgIdListPMsgArray)newMsgArray("xxMsgIdList");
	}

	/**
	 * get the type of array which is stored
	 * @return NSZC004001PMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NSZC004001PMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"glblCmpyCd", "glblCmpyCd", null, null, TYPE_HANKAKUEISU, "4", null},
	{"xxModeCd", "xxModeCd", null, null, TYPE_HANKAKUEISU, "2", null},
	{"fsrNum", "fsrNum", null, null, TYPE_HANKAKUEISU, "10", null},
	{"fsrVisitNum", "fsrVisitNum", null, null, TYPE_HANKAKUEISU, "10", null},
	{"techCd", "techCd", null, null, TYPE_HANKAKUEISU, "20", null},
	{"svcChrgContFlg", "svcChrgContFlg", null, null, TYPE_HANKAKUEISU, "1", null},
	{"bypsPrfTechFlg", "bypsPrfTechFlg", null, null, TYPE_HANKAKUEISU, "1", null},
	{"techSchdFromDt", "techSchdFromDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"techSchdFromTm", "techSchdFromTm", null, null, TYPE_HANKAKUSUJI, "6", null},
	{"schdDisptEmlFlg", "schdDisptEmlFlg", null, null, TYPE_HANKAKUEISU, "1", null},
	{"fsrVisitStsCd", "fsrVisitStsCd", null, null, TYPE_HANKAKUEISU, "2", null},
	{"svcAsgTpCd", "svcAsgTpCd", null, null, TYPE_HANKAKUEISU, "2", null},
	{"svcAsgTechCd", "svcAsgTechCd", null, null, TYPE_HANKAKUEISU, "20", null},
	{"futSvcDt", "futSvcDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"futSvcTm", "futSvcTm", null, null, TYPE_HANKAKUSUJI, "6", null},
	{"ovrdFlg", "ovrdFlg", null, null, TYPE_HANKAKUEISU, "1", null},
	{"mblIntfcFlg", "mblIntfcFlg", null, null, TYPE_HANKAKUEISU, "1", null},
	{"xxSvcTaskNumList", "xxSvcTaskNumList", null, "200", "business.parts.NSZC004001_xxSvcTaskNumListPMsgArray", null, null},
	
	{"fsrEventExeUsrId", "fsrEventExeUsrId", null, null, TYPE_HANKAKUEISU, "16", null},
	{"xxMsgIdList", "xxMsgIdList", null, "100", "business.parts.NSZC004001_xxMsgIdListPMsgArray", null, null},
	
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"GLBL_CMPY_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//glblCmpyCd
        {"XX_MODE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxModeCd
        {"FSR_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//fsrNum
        {"FSR_VISIT_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//fsrVisitNum
        {"TECH_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//techCd
        {"SVC_CHRG_CONT_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcChrgContFlg
        {"BYPS_PRF_TECH_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//bypsPrfTechFlg
        {"TECH_SCHD_FROM_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//techSchdFromDt
        {"TECH_SCHD_FROM_TM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//techSchdFromTm
        {"SCHD_DISPT_EML_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//schdDisptEmlFlg
        {"FSR_VISIT_STS_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//fsrVisitStsCd
        {"SVC_ASG_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcAsgTpCd
        {"SVC_ASG_TECH_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcAsgTechCd
        {"FUT_SVC_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//futSvcDt
        {"FUT_SVC_TM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//futSvcTm
        {"OVRD_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ovrdFlg
        {"MBL_INTFC_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mblIntfcFlg
		null,	//xxSvcTaskNumList
        {"FSR_EVENT_EXE_USR_ID",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//fsrEventExeUsrId
		null,	//xxMsgIdList
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

