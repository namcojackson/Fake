//This file was automatically generated by Business Component Interface Definition Document (Business Component Interface Message Data Definition) and XLA200710010.
// Generated on    :20160225081056000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :BusinessComponentInterfaceDefinitionDocumentAddIn_XLS200710010.xla XLA200710010
/*
 *NSAL1260CMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.blap.NSAL1260;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NSAL1260 Business Component Interface Message class.
 * @author
 * @version XLA200710010
 */
public class NSAL1260CMsg extends EZDCMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** GLBL_CMPY_CD*/
	public final EZDCStringItem              glblCmpyCd;

    /** SLS_DT*/
	public final EZDCDateItem              slsDt;

    /** DS_CONTR_PK*/
	public final EZDCBigDecimalItem              dsContrPk;

    /** Q*/
	public final business.blap.NSAL1260.NSAL1260_QCMsgArray              Q;

    /** DS_ACCT_NUM_H*/
	public final EZDCStringItem              dsAcctNum_H;

    /** DS_ACCT_NM_H*/
	public final EZDCStringItem              dsAcctNm_H;

    /** CONTR_VRSN_EFF_FROM_DT_H*/
	public final EZDCDateItem              contrVrsnEffFromDt_H;

    /** CONTR_VRSN_EFF_THRU_DT_H*/
	public final EZDCDateItem              contrVrsnEffThruDt_H;

    /** BLLG_CYCLE_DESC_TXT_H*/
	public final EZDCStringItem              bllgCycleDescTxt_H;

    /** BLLG_CYCLE_CD_H*/
	public final EZDCStringItem              bllgCycleCd_H;

    /** XX_FILE_DATA*/
	public final EZDCMimeSourceItem              xxFileData;

    /** XX_ERR_FLG*/
	public final EZDCStringItem              xxErrFlg;

    /** BLLG_CYCLE_CD_L*/
	public final EZDCStringItemArray              bllgCycleCd_L;

    /** BLLG_CYCLE_DESC_TXT_L*/
	public final EZDCStringItemArray              bllgCycleDescTxt_L;

    /** MTR_READ_METH_CD_L*/
	public final EZDCStringItemArray              mtrReadMethCd_L;

    /** MTR_READ_METH_DESC_TXT_L*/
	public final EZDCStringItemArray              mtrReadMethDescTxt_L;

    /** XX_PAGE_SHOW_FROM_NUM*/
	public final EZDCBigDecimalItem              xxPageShowFromNum;

    /** XX_PAGE_SHOW_TO_NUM*/
	public final EZDCBigDecimalItem              xxPageShowToNum;

    /** XX_PAGE_SHOW_OF_NUM*/
	public final EZDCBigDecimalItem              xxPageShowOfNum;

    /** XX_PAGE_SHOW_CUR_NUM*/
	public final EZDCBigDecimalItem              xxPageShowCurNum;

    /** XX_PAGE_SHOW_TOT_NUM*/
	public final EZDCBigDecimalItem              xxPageShowTotNum;

    /** A*/
	public final business.blap.NSAL1260.NSAL1260_ACMsgArray              A;


	/**
	 * NSAL1260CMsg is constructor.
	 * The initialization when the instance of NSAL1260CMsg is generated.
	 */
	public NSAL1260CMsg() {
		this(false, -1);
	}

	/**
	 * NSAL1260CMsg is constructor.
	 * The initialization when the instance of NSAL1260CMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NSAL1260CMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		glblCmpyCd = (EZDCStringItem)newItem("glblCmpyCd");
		slsDt = (EZDCDateItem)newItem("slsDt");
		dsContrPk = (EZDCBigDecimalItem)newItem("dsContrPk");
		Q = (business.blap.NSAL1260.NSAL1260_QCMsgArray)newMsgArray("Q");
		dsAcctNum_H = (EZDCStringItem)newItem("dsAcctNum_H");
		dsAcctNm_H = (EZDCStringItem)newItem("dsAcctNm_H");
		contrVrsnEffFromDt_H = (EZDCDateItem)newItem("contrVrsnEffFromDt_H");
		contrVrsnEffThruDt_H = (EZDCDateItem)newItem("contrVrsnEffThruDt_H");
		bllgCycleDescTxt_H = (EZDCStringItem)newItem("bllgCycleDescTxt_H");
		bllgCycleCd_H = (EZDCStringItem)newItem("bllgCycleCd_H");
		xxFileData = (EZDCMimeSourceItem)newItem("xxFileData");
		xxErrFlg = (EZDCStringItem)newItem("xxErrFlg");
		bllgCycleCd_L = (EZDCStringItemArray)newItemArray("bllgCycleCd_L");
		bllgCycleDescTxt_L = (EZDCStringItemArray)newItemArray("bllgCycleDescTxt_L");
		mtrReadMethCd_L = (EZDCStringItemArray)newItemArray("mtrReadMethCd_L");
		mtrReadMethDescTxt_L = (EZDCStringItemArray)newItemArray("mtrReadMethDescTxt_L");
		xxPageShowFromNum = (EZDCBigDecimalItem)newItem("xxPageShowFromNum");
		xxPageShowToNum = (EZDCBigDecimalItem)newItem("xxPageShowToNum");
		xxPageShowOfNum = (EZDCBigDecimalItem)newItem("xxPageShowOfNum");
		xxPageShowCurNum = (EZDCBigDecimalItem)newItem("xxPageShowCurNum");
		xxPageShowTotNum = (EZDCBigDecimalItem)newItem("xxPageShowTotNum");
		A = (business.blap.NSAL1260.NSAL1260_ACMsgArray)newMsgArray("A");
	}

	/**
	 * get the type of array which is stored
	 * @return NSAL1260CMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NSAL1260CMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"glblCmpyCd", "glblCmpyCd", null, null, TYPE_HANKAKUEISU, "4", null},
	{"slsDt", "slsDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"dsContrPk", "dsContrPk", null, null, TYPE_SEISU_SYOSU, "28", "0"},
	{"Q", "Q", null, "1000", "business.blap.NSAL1260.NSAL1260_QCMsgArray", null, null},
	
	{"dsAcctNum_H", "dsAcctNum_H", "H", null, TYPE_HANKAKUEISU, "20", null},
	{"dsAcctNm_H", "dsAcctNm_H", "H", null, TYPE_HANKAKUEISU, "360", null},
	{"contrVrsnEffFromDt_H", "contrVrsnEffFromDt_H", "H", null, TYPE_NENTSUKIHI, "8", null},
	{"contrVrsnEffThruDt_H", "contrVrsnEffThruDt_H", "H", null, TYPE_NENTSUKIHI, "8", null},
	{"bllgCycleDescTxt_H", "bllgCycleDescTxt_H", "H", null, TYPE_HANKAKUEISU, "50", null},
	{"bllgCycleCd_H", "bllgCycleCd_H", "H", null, TYPE_HANKAKUEISU, "1", null},
	{"xxFileData", "xxFileData", null, null, TYPE_UPLOAD, null, null},
	{"xxErrFlg", "xxErrFlg", null, null, TYPE_HANKAKUEISU, "1", null},
	{"bllgCycleCd_L", "bllgCycleCd_L", "L", "99", TYPE_HANKAKUEISU, "1", null},
	{"bllgCycleDescTxt_L", "bllgCycleDescTxt_L", "L", "99", TYPE_HANKAKUEISU, "50", null},
	{"mtrReadMethCd_L", "mtrReadMethCd_L", "L", "99", TYPE_HANKAKUEISU, "2", null},
	{"mtrReadMethDescTxt_L", "mtrReadMethDescTxt_L", "L", "99", TYPE_HANKAKUEISU, "50", null},
	{"xxPageShowFromNum", "xxPageShowFromNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowToNum", "xxPageShowToNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowOfNum", "xxPageShowOfNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowCurNum", "xxPageShowCurNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowTotNum", "xxPageShowTotNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"A", "A", null, "100", "business.blap.NSAL1260.NSAL1260_ACMsgArray", null, null},
	
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"GLBL_CMPY_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//glblCmpyCd
        {"SLS_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//slsDt
        {"DS_CONTR_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsContrPk
		null,	//Q
        {"DS_ACCT_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsAcctNum_H
        {"DS_ACCT_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsAcctNm_H
        {"CONTR_VRSN_EFF_FROM_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//contrVrsnEffFromDt_H
        {"CONTR_VRSN_EFF_THRU_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//contrVrsnEffThruDt_H
        {"BLLG_CYCLE_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//bllgCycleDescTxt_H
        {"BLLG_CYCLE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//bllgCycleCd_H
        {"XX_FILE_DATA",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxFileData
        {"XX_ERR_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxErrFlg
        {"BLLG_CYCLE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//bllgCycleCd_L
        {"BLLG_CYCLE_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//bllgCycleDescTxt_L
        {"MTR_READ_METH_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrReadMethCd_L
        {"MTR_READ_METH_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrReadMethDescTxt_L
        {"XX_PAGE_SHOW_FROM_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowFromNum
        {"XX_PAGE_SHOW_TO_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowToNum
        {"XX_PAGE_SHOW_OF_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowOfNum
        {"XX_PAGE_SHOW_CUR_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowCurNum
        {"XX_PAGE_SHOW_TOT_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowTotNum
		null,	//A
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

