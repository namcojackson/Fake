//This file was automatically generated by Logical Database Layout Definition Document and XLA200710010c.
// Generated on    :20230920174604000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :LogicalDatabaseLayoutDefinition Document_AddIn_XLS200710010.xla XLA200710010c
/*
 *SVC_PHYS_MTR_UPD_WRKFMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.db;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is SVC_PHYS_MTR_UPD_WRK Table Layout Message class.
 * @author
 * @version XLA200710010c
 */
public class SVC_PHYS_MTR_UPD_WRKFMsg extends EZDFMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** GLBL_CMPY_CD*/
	public final EZDFStringItem              GLBL_CMPY_CD;

    /** UPLD_CSV_RQST_PK*/
	public final EZDFBigDecimalItem              UPLD_CSV_RQST_PK;

    /** UPLD_CSV_RQST_ROW_NUM*/
	public final EZDFBigDecimalItem              UPLD_CSV_RQST_ROW_NUM;

    /** PROC_MODE_CD*/
	public final EZDFStringItem              PROC_MODE_CD;

    /** SER_NUM*/
	public final EZDFStringItem              SER_NUM;

    /** SVC_MACH_MSTR_PK*/
	public final EZDFBigDecimalItem              SVC_MACH_MSTR_PK;

    /** SVC_PHYS_MTR_READ_GRP_SQ*/
	public final EZDFBigDecimalItem              SVC_PHYS_MTR_READ_GRP_SQ;

    /** MTR_LB_DESC_TXT*/
	public final EZDFStringItem              MTR_LB_DESC_TXT;

    /** DS_MTR_READ_TP_GRP_CD*/
	public final EZDFStringItem              DS_MTR_READ_TP_GRP_CD;

    /** DS_MTR_READ_TP_DESC_TXT*/
	public final EZDFStringItem              DS_MTR_READ_TP_DESC_TXT;

    /** VLD_MTR_TXT*/
	public final EZDFStringItem              VLD_MTR_TXT;

    /** MTR_READ_DT*/
	public final EZDFDateItem              MTR_READ_DT;

    /** SVC_TASK_NUM*/
	public final EZDFStringItem              SVC_TASK_NUM;

    /** DS_TEST_COPY_CLS_DESC_TXT*/
	public final EZDFStringItem              DS_TEST_COPY_CLS_DESC_TXT;

    /** READ_MTR_CNT*/
	public final EZDFBigDecimalItem              READ_MTR_CNT;

    /** MTR_ENTRY_CMNT_TXT*/
	public final EZDFStringItem              MTR_ENTRY_CMNT_TXT;

    /** UPLD_CSV_RQST_CMNT_TXT*/
	public final EZDFStringItem              UPLD_CSV_RQST_CMNT_TXT;


	/**
	 * SVC_PHYS_MTR_UPD_WRKFMsg is constructor.
	 * The initialization when the instance of SVC_PHYS_MTR_UPD_WRKFMsg is generated.
	 */
	public SVC_PHYS_MTR_UPD_WRKFMsg() {
		this(false, -1);
	}

	/**
	 * SVC_PHYS_MTR_UPD_WRKFMsg is constructor.
	 * The initialization when the instance of SVC_PHYS_MTR_UPD_WRKFMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public SVC_PHYS_MTR_UPD_WRKFMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		GLBL_CMPY_CD = (EZDFStringItem)newItem("glblCmpyCd");
		UPLD_CSV_RQST_PK = (EZDFBigDecimalItem)newItem("upldCsvRqstPk");
		UPLD_CSV_RQST_ROW_NUM = (EZDFBigDecimalItem)newItem("upldCsvRqstRowNum");
		PROC_MODE_CD = (EZDFStringItem)newItem("procModeCd");
		SER_NUM = (EZDFStringItem)newItem("serNum");
		SVC_MACH_MSTR_PK = (EZDFBigDecimalItem)newItem("svcMachMstrPk");
		SVC_PHYS_MTR_READ_GRP_SQ = (EZDFBigDecimalItem)newItem("svcPhysMtrReadGrpSq");
		MTR_LB_DESC_TXT = (EZDFStringItem)newItem("mtrLbDescTxt");
		DS_MTR_READ_TP_GRP_CD = (EZDFStringItem)newItem("dsMtrReadTpGrpCd");
		DS_MTR_READ_TP_DESC_TXT = (EZDFStringItem)newItem("dsMtrReadTpDescTxt");
		VLD_MTR_TXT = (EZDFStringItem)newItem("vldMtrTxt");
		MTR_READ_DT = (EZDFDateItem)newItem("mtrReadDt");
		SVC_TASK_NUM = (EZDFStringItem)newItem("svcTaskNum");
		DS_TEST_COPY_CLS_DESC_TXT = (EZDFStringItem)newItem("dsTestCopyClsDescTxt");
		READ_MTR_CNT = (EZDFBigDecimalItem)newItem("readMtrCnt");
		MTR_ENTRY_CMNT_TXT = (EZDFStringItem)newItem("mtrEntryCmntTxt");
		UPLD_CSV_RQST_CMNT_TXT = (EZDFStringItem)newItem("upldCsvRqstCmntTxt");
	}

	/**
	 * get the type of array which is stored
	 * @return SVC_PHYS_MTR_UPD_WRKFMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new SVC_PHYS_MTR_UPD_WRKFMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"glblCmpyCd", "GLBL_CMPY_CD", null, null, TYPE_HANKAKUEISU, "4", null},
	{"upldCsvRqstPk", "UPLD_CSV_RQST_PK", null, null, TYPE_SEISU_SYOSU, "28", "0"},
	{"upldCsvRqstRowNum", "UPLD_CSV_RQST_ROW_NUM", null, null, TYPE_SEISU_SYOSU, "9", "0"},
	{"procModeCd", "PROC_MODE_CD", null, null, TYPE_HANKAKUEISU, "2", null},
	{"serNum", "SER_NUM", null, null, TYPE_HANKAKUEISU, "30", null},
	{"svcMachMstrPk", "SVC_MACH_MSTR_PK", null, null, TYPE_SEISU_SYOSU, "28", "0"},
	{"svcPhysMtrReadGrpSq", "SVC_PHYS_MTR_READ_GRP_SQ", null, null, TYPE_SEISU_SYOSU, "28", "0"},
	{"mtrLbDescTxt", "MTR_LB_DESC_TXT", null, null, TYPE_HANKAKUEISU, "50", null},
	{"dsMtrReadTpGrpCd", "DS_MTR_READ_TP_GRP_CD", null, null, TYPE_HANKAKUEISU, "10", null},
	{"dsMtrReadTpDescTxt", "DS_MTR_READ_TP_DESC_TXT", null, null, TYPE_HANKAKUEISU, "50", null},
	{"vldMtrTxt", "VLD_MTR_TXT", null, null, TYPE_HANKAKUEISU, "1", null},
	{"mtrReadDt", "MTR_READ_DT", null, null, TYPE_NENTSUKIHI, "8", null},
	{"svcTaskNum", "SVC_TASK_NUM", null, null, TYPE_HANKAKUEISU, "10", null},
	{"dsTestCopyClsDescTxt", "DS_TEST_COPY_CLS_DESC_TXT", null, null, TYPE_HANKAKUEISU, "50", null},
	{"readMtrCnt", "READ_MTR_CNT", null, null, TYPE_SEISU_SYOSU, "10", "0"},
	{"mtrEntryCmntTxt", "MTR_ENTRY_CMNT_TXT", null, null, TYPE_HANKAKUEISU, "400", null},
	{"upldCsvRqstCmntTxt", "UPLD_CSV_RQST_CMNT_TXT", null, null, TYPE_HANKAKUEISU, "4000", null},
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"GLBL_CMPY_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//GLBL_CMPY_CD
        {"UPLD_CSV_RQST_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//UPLD_CSV_RQST_PK
        {"UPLD_CSV_RQST_ROW_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//UPLD_CSV_RQST_ROW_NUM
        {"PROC_MODE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//PROC_MODE_CD
        {"SER_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//SER_NUM
        {"SVC_MACH_MSTR_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//SVC_MACH_MSTR_PK
        {"SVC_PHYS_MTR_READ_GRP_SQ",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//SVC_PHYS_MTR_READ_GRP_SQ
        {"MTR_LB_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//MTR_LB_DESC_TXT
        {"DS_MTR_READ_TP_GRP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//DS_MTR_READ_TP_GRP_CD
        {"DS_MTR_READ_TP_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//DS_MTR_READ_TP_DESC_TXT
        {"VLD_MTR_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//VLD_MTR_TXT
        {"MTR_READ_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//MTR_READ_DT
        {"SVC_TASK_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//SVC_TASK_NUM
        {"DS_TEST_COPY_CLS_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//DS_TEST_COPY_CLS_DESC_TXT
        {"READ_MTR_CNT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//READ_MTR_CNT
        {"MTR_ENTRY_CMNT_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//MTR_ENTRY_CMNT_TXT
        {"UPLD_CSV_RQST_CMNT_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//UPLD_CSV_RQST_CMNT_TXT
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

	
	/**
	 * Array of schema data(Database data)
	 */
	private static final String[][] DB_CONTENTS = {

		//It is defined as {"Database column name", "Database column type flag", and "Primary key" } etc.
		{"GLBL_CMPY_CD",  NO, null},  // GLBL_CMPY_CD
		{"UPLD_CSV_RQST_PK",  NO, null},  // UPLD_CSV_RQST_PK
		{"UPLD_CSV_RQST_ROW_NUM",  NO, null},  // UPLD_CSV_RQST_ROW_NUM
		{"PROC_MODE_CD",  NO, null},  // PROC_MODE_CD
		{"SER_NUM",  NO, null},  // SER_NUM
		{"SVC_MACH_MSTR_PK",  NO, null},  // SVC_MACH_MSTR_PK
		{"SVC_PHYS_MTR_READ_GRP_SQ",  NO, null},  // SVC_PHYS_MTR_READ_GRP_SQ
		{"MTR_LB_DESC_TXT",  NO, null},  // MTR_LB_DESC_TXT
		{"DS_MTR_READ_TP_GRP_CD",  NO, null},  // DS_MTR_READ_TP_GRP_CD
		{"DS_MTR_READ_TP_DESC_TXT",  NO, null},  // DS_MTR_READ_TP_DESC_TXT
		{"VLD_MTR_TXT",  NO, null},  // VLD_MTR_TXT
		{"MTR_READ_DT",  NO, null},  // MTR_READ_DT
		{"SVC_TASK_NUM",  NO, null},  // SVC_TASK_NUM
		{"DS_TEST_COPY_CLS_DESC_TXT",  NO, null},  // DS_TEST_COPY_CLS_DESC_TXT
		{"READ_MTR_CNT",  NO, null},  // READ_MTR_CNT
		{"MTR_ENTRY_CMNT_TXT",  NO, null},  // MTR_ENTRY_CMNT_TXT
		{"UPLD_CSV_RQST_CMNT_TXT",  NO, null},  // UPLD_CSV_RQST_CMNT_TXT
	};

	/**
	 * Database Table Name
	 */
	private static final String TABLE_NAME = "SVC_PHYS_MTR_UPD_WRK";

	/**
	 * get Array of Database Data.
	 * @return Array of Database Data
	 */
	protected String[][] getDBContents(){
		return DB_CONTENTS;
	}

	/**
	 * get Table Name.
	 * @return Table Name
	 */
	public String getTableName() {
		return TABLE_NAME;
	}

	/**
	 * It is declared to be non-EZstandardTable.
	 * @return true:Non-Standard
	 */
	public boolean isNonStdTable() {
		return true;
	}
}

