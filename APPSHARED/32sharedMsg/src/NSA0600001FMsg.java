//This file was automatically generated by Text File Layout Definition Document and XLA200710010.
// Generated on    :20190130004916000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :TextFileLayoutDefinitionDocument_AddIn_XLS200710010.xla XLA200710010
/*
 *NSA0600001FMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.file;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NSA0600001 File Layout Message class.
 * @author
 * @version XLA200710010
 */
public class NSA0600001FMsg extends EZDFMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** MDL_NM*/
	public final EZDFStringItem              mdlNm;

    /** SER_NUM*/
	public final EZDFStringItem              serNum;

    /** READ_DUE_DT*/
	public final EZDFDateItem              readDueDt;

    /** MTR_READ_DT*/
	public final EZDFDateItem              mtrReadDt;

    /** MTR_LB_CD*/
	public final EZDFStringItem              mtrLbCd;

    /** MTR_LB_DESC_TXT*/
	public final EZDFStringItem              mtrLbDescTxt;

    /** READ_MTR_CNT*/
	public final EZDFBigDecimalItem              readMtrCnt;

    /** TEST_MTR_CNT*/
	public final EZDFBigDecimalItem              testMtrCnt;

    /** MTR_ENTRY_CMNT_TXT*/
	public final EZDFStringItem              mtrEntryCmntTxt;

    /** PREV_MTR_READ_DT*/
	public final EZDFDateItem              prevMtrReadDt;

    /** PREV_READ_MTR_CNT*/
	public final EZDFBigDecimalItem              prevReadMtrCnt;

    /** PREV_TEST_MTR_CNT*/
	public final EZDFBigDecimalItem              prevTestMtrCnt;

    /** DS_CONTR_NUM*/
	public final EZDFStringItem              dsContrNum;

    /** DS_CONTR_STS_DESC_TXT*/
	public final EZDFStringItem              dsContrStsDescTxt;

    /** MTR_READ_LOC_NM*/
	public final EZDFStringItem              mtrReadLocNm;

    /** MTR_READ_LOC_ADDR*/
	public final EZDFStringItem              mtrReadLocAddr;

    /** CRAT_DT*/
	public final EZDFDateItem              cratDt;

    /** MTR_UPLD_PROC_CD*/
	public final EZDFStringItem              mtrUpldProcCd;


	/**
	 * NSA0600001FMsg is constructor.
	 * The initialization when the instance of NSA0600001FMsg is generated.
	 */
	public NSA0600001FMsg() {
		this(false, -1);
	}

	/**
	 * NSA0600001FMsg is constructor.
	 * The initialization when the instance of NSA0600001FMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NSA0600001FMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		mdlNm = (EZDFStringItem)newItem("mdlNm");
		serNum = (EZDFStringItem)newItem("serNum");
		readDueDt = (EZDFDateItem)newItem("readDueDt");
		mtrReadDt = (EZDFDateItem)newItem("mtrReadDt");
		mtrLbCd = (EZDFStringItem)newItem("mtrLbCd");
		mtrLbDescTxt = (EZDFStringItem)newItem("mtrLbDescTxt");
		readMtrCnt = (EZDFBigDecimalItem)newItem("readMtrCnt");
		testMtrCnt = (EZDFBigDecimalItem)newItem("testMtrCnt");
		mtrEntryCmntTxt = (EZDFStringItem)newItem("mtrEntryCmntTxt");
		prevMtrReadDt = (EZDFDateItem)newItem("prevMtrReadDt");
		prevReadMtrCnt = (EZDFBigDecimalItem)newItem("prevReadMtrCnt");
		prevTestMtrCnt = (EZDFBigDecimalItem)newItem("prevTestMtrCnt");
		dsContrNum = (EZDFStringItem)newItem("dsContrNum");
		dsContrStsDescTxt = (EZDFStringItem)newItem("dsContrStsDescTxt");
		mtrReadLocNm = (EZDFStringItem)newItem("mtrReadLocNm");
		mtrReadLocAddr = (EZDFStringItem)newItem("mtrReadLocAddr");
		cratDt = (EZDFDateItem)newItem("cratDt");
		mtrUpldProcCd = (EZDFStringItem)newItem("mtrUpldProcCd");
	}

	/**
	 * get the type of array which is stored
	 * @return NSA0600001FMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NSA0600001FMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"mdlNm", "mdlNm", null, null, TYPE_HANKAKUEISU, "50", null},
	{"serNum", "serNum", null, null, TYPE_HANKAKUEISU, "30", null},
	{"readDueDt", "readDueDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"mtrReadDt", "mtrReadDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"mtrLbCd", "mtrLbCd", null, null, TYPE_HANKAKUEISU, "2", null},
	{"mtrLbDescTxt", "mtrLbDescTxt", null, null, TYPE_HANKAKUEISU, "50", null},
	{"readMtrCnt", "readMtrCnt", null, null, TYPE_SEISU_SYOSU, "10", "0"},
	{"testMtrCnt", "testMtrCnt", null, null, TYPE_SEISU_SYOSU, "10", "0"},
	{"mtrEntryCmntTxt", "mtrEntryCmntTxt", null, null, TYPE_HANKAKUEISU, "400", null},
	{"prevMtrReadDt", "prevMtrReadDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"prevReadMtrCnt", "prevReadMtrCnt", null, null, TYPE_SEISU_SYOSU, "10", "0"},
	{"prevTestMtrCnt", "prevTestMtrCnt", null, null, TYPE_SEISU_SYOSU, "10", "0"},
	{"dsContrNum", "dsContrNum", null, null, TYPE_HANKAKUEISU, "30", null},
	{"dsContrStsDescTxt", "dsContrStsDescTxt", null, null, TYPE_HANKAKUEISU, "50", null},
	{"mtrReadLocNm", "mtrReadLocNm", null, null, TYPE_HANKAKUEISU, "360", null},
	{"mtrReadLocAddr", "mtrReadLocAddr", null, null, TYPE_HANKAKUEISU, "1000", null},
	{"cratDt", "cratDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"mtrUpldProcCd", "mtrUpldProcCd", null, null, TYPE_HANKAKUEISU, "2", null},
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"MDL_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mdlNm
        {"SER_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//serNum
        {"READ_DUE_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//readDueDt
        {"MTR_READ_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrReadDt
        {"MTR_LB_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrLbCd
        {"MTR_LB_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrLbDescTxt
        {"READ_MTR_CNT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//readMtrCnt
        {"TEST_MTR_CNT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//testMtrCnt
        {"MTR_ENTRY_CMNT_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrEntryCmntTxt
        {"PREV_MTR_READ_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prevMtrReadDt
        {"PREV_READ_MTR_CNT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prevReadMtrCnt
        {"PREV_TEST_MTR_CNT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prevTestMtrCnt
        {"DS_CONTR_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsContrNum
        {"DS_CONTR_STS_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsContrStsDescTxt
        {"MTR_READ_LOC_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrReadLocNm
        {"MTR_READ_LOC_ADDR",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrReadLocAddr
        {"CRAT_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//cratDt
        {"MTR_UPLD_PROC_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrUpldProcCd
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

