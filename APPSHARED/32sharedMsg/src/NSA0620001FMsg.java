//This file was automatically generated by Text File Layout Definition Document and XLA200710010.
// Generated on    :20231215171839000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :TextFileLayoutDefinitionDocument_AddIn_XLS200710010.xla XLA200710010
/*
 *NSA0620001FMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.file;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NSA0620001 File Layout Message class.
 * @author
 * @version XLA200710010
 */
public class NSA0620001FMsg extends EZDFMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** PROC_MODE_CD*/
	public final EZDFStringItem              procModeCd;

    /** SVC_MACH_MSTR_PK*/
	public final EZDFBigDecimalItem              svcMachMstrPk;

    /** SER_NUM*/
	public final EZDFStringItem              serNum;

    /** MDSE_CD*/
	public final EZDFStringItem              mdseCd;

    /** SVC_CONFIG_MSTR_PK*/
	public final EZDFBigDecimalItem              svcConfigMstrPk;

    /** PRNT_SER_NUM*/
	public final EZDFStringItem              prntSerNum;

    /** PRNT_MDSE_CD*/
	public final EZDFStringItem              prntMdseCd;

    /** OWNR_ACCT_NUM*/
	public final EZDFStringItem              ownrAcctNum;

    /** BILL_TO_ACCT_NUM*/
	public final EZDFStringItem              billToAcctNum;

    /** CUR_LOC_ACCT_NUM*/
	public final EZDFStringItem              curLocAcctNum;

    /** IND_BILL_TO_LOC_NUM*/
	public final EZDFStringItem              indBillToLocNum;

    /** IND_CUR_LOC_NUM*/
	public final EZDFStringItem              indCurLocNum;

    /** SVC_MACH_MSTR_STS_CD*/
	public final EZDFStringItem              svcMachMstrStsCd;

    /** SVC_MACH_USG_STS_CD*/
	public final EZDFStringItem              svcMachUsgStsCd;

    /** SVC_MACH_TRX_TP_CD*/
	public final EZDFStringItem              svcMachTrxTpCd;

    /** ISTL_DT*/
	public final EZDFDateItem              istlDt;

    /** EFF_FROM_DT*/
	public final EZDFDateItem              effFromDt;

    /** EFF_THRU_DT*/
	public final EZDFDateItem              effThruDt;

    /** SVC_MACH_RMV_DT*/
	public final EZDFDateItem              svcMachRmvDt;

    /** CUST_MACH_CTRL_NUM*/
	public final EZDFStringItem              custMachCtrlNum;

    /** SW_LIC_ID*/
	public final EZDFStringItem              swLicId;

    /** SVC_PRVD_PTY_DESC_TXT_01*/
	public final EZDFStringItem              svcPrvdPtyDescTxt_01;

    /** SVC_PRVD_PTY_DESC_TXT_02*/
	public final EZDFStringItem              svcPrvdPtyDescTxt_02;

    /** SLD_BY_LINE_BIZ_TP_CD*/
	public final EZDFStringItem              sldByLineBizTpCd;

    /** REQ_TECH_CD*/
	public final EZDFStringItem              reqTechCd;

    /** SVC_CMNT_TXT*/
	public final EZDFStringItem              svcCmntTxt;


	/**
	 * NSA0620001FMsg is constructor.
	 * The initialization when the instance of NSA0620001FMsg is generated.
	 */
	public NSA0620001FMsg() {
		this(false, -1);
	}

	/**
	 * NSA0620001FMsg is constructor.
	 * The initialization when the instance of NSA0620001FMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NSA0620001FMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		procModeCd = (EZDFStringItem)newItem("procModeCd");
		svcMachMstrPk = (EZDFBigDecimalItem)newItem("svcMachMstrPk");
		serNum = (EZDFStringItem)newItem("serNum");
		mdseCd = (EZDFStringItem)newItem("mdseCd");
		svcConfigMstrPk = (EZDFBigDecimalItem)newItem("svcConfigMstrPk");
		prntSerNum = (EZDFStringItem)newItem("prntSerNum");
		prntMdseCd = (EZDFStringItem)newItem("prntMdseCd");
		ownrAcctNum = (EZDFStringItem)newItem("ownrAcctNum");
		billToAcctNum = (EZDFStringItem)newItem("billToAcctNum");
		curLocAcctNum = (EZDFStringItem)newItem("curLocAcctNum");
		indBillToLocNum = (EZDFStringItem)newItem("indBillToLocNum");
		indCurLocNum = (EZDFStringItem)newItem("indCurLocNum");
		svcMachMstrStsCd = (EZDFStringItem)newItem("svcMachMstrStsCd");
		svcMachUsgStsCd = (EZDFStringItem)newItem("svcMachUsgStsCd");
		svcMachTrxTpCd = (EZDFStringItem)newItem("svcMachTrxTpCd");
		istlDt = (EZDFDateItem)newItem("istlDt");
		effFromDt = (EZDFDateItem)newItem("effFromDt");
		effThruDt = (EZDFDateItem)newItem("effThruDt");
		svcMachRmvDt = (EZDFDateItem)newItem("svcMachRmvDt");
		custMachCtrlNum = (EZDFStringItem)newItem("custMachCtrlNum");
		swLicId = (EZDFStringItem)newItem("swLicId");
		svcPrvdPtyDescTxt_01 = (EZDFStringItem)newItem("svcPrvdPtyDescTxt_01");
		svcPrvdPtyDescTxt_02 = (EZDFStringItem)newItem("svcPrvdPtyDescTxt_02");
		sldByLineBizTpCd = (EZDFStringItem)newItem("sldByLineBizTpCd");
		reqTechCd = (EZDFStringItem)newItem("reqTechCd");
		svcCmntTxt = (EZDFStringItem)newItem("svcCmntTxt");
	}

	/**
	 * get the type of array which is stored
	 * @return NSA0620001FMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NSA0620001FMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"procModeCd", "procModeCd", null, null, TYPE_HANKAKUEISU, "2", null},
	{"svcMachMstrPk", "svcMachMstrPk", null, null, TYPE_SEISU_SYOSU, "28", "0"},
	{"serNum", "serNum", null, null, TYPE_HANKAKUEISU, "30", null},
	{"mdseCd", "mdseCd", null, null, TYPE_HANKAKUEISU, "16", null},
	{"svcConfigMstrPk", "svcConfigMstrPk", null, null, TYPE_SEISU_SYOSU, "28", "0"},
	{"prntSerNum", "prntSerNum", null, null, TYPE_HANKAKUEISU, "30", null},
	{"prntMdseCd", "prntMdseCd", null, null, TYPE_HANKAKUEISU, "16", null},
	{"ownrAcctNum", "ownrAcctNum", null, null, TYPE_HANKAKUEISU, "20", null},
	{"billToAcctNum", "billToAcctNum", null, null, TYPE_HANKAKUEISU, "20", null},
	{"curLocAcctNum", "curLocAcctNum", null, null, TYPE_HANKAKUEISU, "20", null},
	{"indBillToLocNum", "indBillToLocNum", null, null, TYPE_HANKAKUEISU, "30", null},
	{"indCurLocNum", "indCurLocNum", null, null, TYPE_HANKAKUEISU, "30", null},
	{"svcMachMstrStsCd", "svcMachMstrStsCd", null, null, TYPE_HANKAKUEISU, "5", null},
	{"svcMachUsgStsCd", "svcMachUsgStsCd", null, null, TYPE_HANKAKUEISU, "3", null},
	{"svcMachTrxTpCd", "svcMachTrxTpCd", null, null, TYPE_HANKAKUEISU, "20", null},
	{"istlDt", "istlDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"effFromDt", "effFromDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"effThruDt", "effThruDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"svcMachRmvDt", "svcMachRmvDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"custMachCtrlNum", "custMachCtrlNum", null, null, TYPE_HANKAKUEISU, "30", null},
	{"swLicId", "swLicId", null, null, TYPE_HANKAKUEISU, "40", null},
	{"svcPrvdPtyDescTxt_01", "svcPrvdPtyDescTxt_01", "01", null, TYPE_HANKAKUEISU, "50", null},
	{"svcPrvdPtyDescTxt_02", "svcPrvdPtyDescTxt_02", "02", null, TYPE_HANKAKUEISU, "50", null},
	{"sldByLineBizTpCd", "sldByLineBizTpCd", null, null, TYPE_HANKAKUEISU, "8", null},
	{"reqTechCd", "reqTechCd", null, null, TYPE_HANKAKUEISU, "20", null},
	{"svcCmntTxt", "svcCmntTxt", null, null, TYPE_HANKAKUEISU, "4000", null},
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"PROC_MODE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//procModeCd
        {"SVC_MACH_MSTR_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcMachMstrPk
        {"SER_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//serNum
        {"MDSE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mdseCd
        {"SVC_CONFIG_MSTR_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcConfigMstrPk
        {"PRNT_SER_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prntSerNum
        {"PRNT_MDSE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prntMdseCd
        {"OWNR_ACCT_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ownrAcctNum
        {"BILL_TO_ACCT_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//billToAcctNum
        {"CUR_LOC_ACCT_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//curLocAcctNum
        {"IND_BILL_TO_LOC_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//indBillToLocNum
        {"IND_CUR_LOC_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//indCurLocNum
        {"SVC_MACH_MSTR_STS_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcMachMstrStsCd
        {"SVC_MACH_USG_STS_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcMachUsgStsCd
        {"SVC_MACH_TRX_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcMachTrxTpCd
        {"ISTL_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//istlDt
        {"EFF_FROM_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//effFromDt
        {"EFF_THRU_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//effThruDt
        {"SVC_MACH_RMV_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcMachRmvDt
        {"CUST_MACH_CTRL_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//custMachCtrlNum
        {"SW_LIC_ID",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//swLicId
        {"SVC_PRVD_PTY_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcPrvdPtyDescTxt_01
        {"SVC_PRVD_PTY_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcPrvdPtyDescTxt_02
        {"SLD_BY_LINE_BIZ_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//sldByLineBizTpCd
        {"REQ_TECH_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//reqTechCd
        {"SVC_CMNT_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcCmntTxt
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

