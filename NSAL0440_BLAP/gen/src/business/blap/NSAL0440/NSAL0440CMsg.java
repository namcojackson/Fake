//This file was automatically generated by Business Component Interface Definition Document (Business Component Interface Message Data Definition) and XLA200710010.
// Generated on    :20220804152258000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :BusinessComponentInterfaceDefinitionDocumentAddIn_XLS200710010.xla XLA200710010
/*
 *NSAL0440CMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.blap.NSAL0440;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NSAL0440 Business Component Interface Message class.
 * @author
 * @version XLA200710010
 */
public class NSAL0440CMsg extends EZDCMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** GLBL_CMPY_CD*/
	public final EZDCStringItem              glblCmpyCd;

    /** SLS_DT*/
	public final EZDCDateItem              slsDt;

    /** DS_CONTR_PK*/
	public final EZDCBigDecimalItem              dsContrPk;

    /** DS_CONTR_NUM*/
	public final EZDCStringItem              dsContrNum;

    /** DS_CONTR_CATG_CD*/
	public final EZDCStringItem              dsContrCatgCd;

    /** DS_ACCT_NM*/
	public final EZDCStringItem              dsAcctNm;

    /** CONTR_VRSN_EFF_FROM_DT*/
	public final EZDCDateItem              contrVrsnEffFromDt;

    /** CONTR_VRSN_EFF_THRU_DT*/
	public final EZDCDateItem              contrVrsnEffThruDt;

    /** SER_NUM*/
	public final EZDCStringItem              serNum;

    /** XX_CHK_BOX_H1*/
	public final EZDCStringItem              xxChkBox_H1;

    /** XX_CHK_BOX_H2*/
	public final EZDCStringItem              xxChkBox_H2;

    /** XX_HLD_FLG_P*/
	public final EZDCStringItem              xxHldFlg_P;

    /** DS_CONTR_DTL_PK_P*/
	public final EZDCBigDecimalItem              dsContrDtlPk_P;

    /** XX_MODE_CD_P*/
	public final EZDCStringItem              xxModeCd_P;

    /** X*/
	public final business.blap.NSAL0440.NSAL0440_XCMsgArray              X;

    /** XX_FILE_PATH_TXT*/
	public final EZDCStringItem              xxFilePathTxt;

    /** R*/
	public final business.blap.NSAL0440.NSAL0440_RCMsgArray              R;

    /** A*/
	public final business.blap.NSAL0440.NSAL0440_ACMsgArray              A;

    /** XX_PAGE_SHOW_FROM_NUM*/
	public final EZDCBigDecimalItem              xxPageShowFromNum;

    /** XX_PAGE_SHOW_TO_NUM*/
	public final EZDCBigDecimalItem              xxPageShowToNum;

    /** XX_PAGE_SHOW_OF_NUM*/
	public final EZDCBigDecimalItem              xxPageShowOfNum;

    /** Q*/
	public final business.blap.NSAL0440.NSAL0440_QCMsgArray              Q;

    /** Y*/
	public final business.blap.NSAL0440.NSAL0440_YCMsgArray              Y;

    /** XX_SCR_EVENT_NM*/
	public final EZDCStringItem              xxScrEventNm;


	/**
	 * NSAL0440CMsg is constructor.
	 * The initialization when the instance of NSAL0440CMsg is generated.
	 */
	public NSAL0440CMsg() {
		this(false, -1);
	}

	/**
	 * NSAL0440CMsg is constructor.
	 * The initialization when the instance of NSAL0440CMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NSAL0440CMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		glblCmpyCd = (EZDCStringItem)newItem("glblCmpyCd");
		slsDt = (EZDCDateItem)newItem("slsDt");
		dsContrPk = (EZDCBigDecimalItem)newItem("dsContrPk");
		dsContrNum = (EZDCStringItem)newItem("dsContrNum");
		dsContrCatgCd = (EZDCStringItem)newItem("dsContrCatgCd");
		dsAcctNm = (EZDCStringItem)newItem("dsAcctNm");
		contrVrsnEffFromDt = (EZDCDateItem)newItem("contrVrsnEffFromDt");
		contrVrsnEffThruDt = (EZDCDateItem)newItem("contrVrsnEffThruDt");
		serNum = (EZDCStringItem)newItem("serNum");
		xxChkBox_H1 = (EZDCStringItem)newItem("xxChkBox_H1");
		xxChkBox_H2 = (EZDCStringItem)newItem("xxChkBox_H2");
		xxHldFlg_P = (EZDCStringItem)newItem("xxHldFlg_P");
		dsContrDtlPk_P = (EZDCBigDecimalItem)newItem("dsContrDtlPk_P");
		xxModeCd_P = (EZDCStringItem)newItem("xxModeCd_P");
		X = (business.blap.NSAL0440.NSAL0440_XCMsgArray)newMsgArray("X");
		xxFilePathTxt = (EZDCStringItem)newItem("xxFilePathTxt");
		R = (business.blap.NSAL0440.NSAL0440_RCMsgArray)newMsgArray("R");
		A = (business.blap.NSAL0440.NSAL0440_ACMsgArray)newMsgArray("A");
		xxPageShowFromNum = (EZDCBigDecimalItem)newItem("xxPageShowFromNum");
		xxPageShowToNum = (EZDCBigDecimalItem)newItem("xxPageShowToNum");
		xxPageShowOfNum = (EZDCBigDecimalItem)newItem("xxPageShowOfNum");
		Q = (business.blap.NSAL0440.NSAL0440_QCMsgArray)newMsgArray("Q");
		Y = (business.blap.NSAL0440.NSAL0440_YCMsgArray)newMsgArray("Y");
		xxScrEventNm = (EZDCStringItem)newItem("xxScrEventNm");
	}

	/**
	 * get the type of array which is stored
	 * @return NSAL0440CMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NSAL0440CMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"glblCmpyCd", "glblCmpyCd", null, null, TYPE_HANKAKUEISU, "4", null},
	{"slsDt", "slsDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"dsContrPk", "dsContrPk", null, null, TYPE_SEISU_SYOSU, "28", "0"},
	{"dsContrNum", "dsContrNum", null, null, TYPE_HANKAKUEISU, "30", null},
	{"dsContrCatgCd", "dsContrCatgCd", null, null, TYPE_HANKAKUEISU, "3", null},
	{"dsAcctNm", "dsAcctNm", null, null, TYPE_HANKAKUEISU, "360", null},
	{"contrVrsnEffFromDt", "contrVrsnEffFromDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"contrVrsnEffThruDt", "contrVrsnEffThruDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"serNum", "serNum", null, null, TYPE_HANKAKUEISU, "30", null},
	{"xxChkBox_H1", "xxChkBox_H1", "H1", null, TYPE_HANKAKUEIJI, "1", null},
	{"xxChkBox_H2", "xxChkBox_H2", "H2", null, TYPE_HANKAKUEIJI, "1", null},
	{"xxHldFlg_P", "xxHldFlg_P", "P", null, TYPE_HANKAKUEISU, "1", null},
	{"dsContrDtlPk_P", "dsContrDtlPk_P", "P", null, TYPE_SEISU_SYOSU, "28", "0"},
	{"xxModeCd_P", "xxModeCd_P", "P", null, TYPE_HANKAKUEISU, "2", null},
	{"X", "X", null, "99", "business.blap.NSAL0440.NSAL0440_XCMsgArray", null, null},
	
	{"xxFilePathTxt", "xxFilePathTxt", null, null, TYPE_HANKAKUEISU, "300", null},
	{"R", "R", null, "50", "business.blap.NSAL0440.NSAL0440_RCMsgArray", null, null},
	
	{"A", "A", null, "200", "business.blap.NSAL0440.NSAL0440_ACMsgArray", null, null},
	
	{"xxPageShowFromNum", "xxPageShowFromNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowToNum", "xxPageShowToNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowOfNum", "xxPageShowOfNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"Q", "Q", null, "100", "business.blap.NSAL0440.NSAL0440_QCMsgArray", null, null},
	
	{"Y", "Y", null, "40", "business.blap.NSAL0440.NSAL0440_YCMsgArray", null, null},
	
	{"xxScrEventNm", "xxScrEventNm", null, null, TYPE_HANKAKUEISU, "50", null},
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"GLBL_CMPY_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//glblCmpyCd
        {"SLS_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//slsDt
        {"DS_CONTR_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsContrPk
        {"DS_CONTR_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsContrNum
        {"DS_CONTR_CATG_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsContrCatgCd
        {"DS_ACCT_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsAcctNm
        {"CONTR_VRSN_EFF_FROM_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//contrVrsnEffFromDt
        {"CONTR_VRSN_EFF_THRU_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//contrVrsnEffThruDt
        {"SER_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//serNum
        {"XX_CHK_BOX",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxChkBox_H1
        {"XX_CHK_BOX",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxChkBox_H2
        {"XX_HLD_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxHldFlg_P
        {"DS_CONTR_DTL_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsContrDtlPk_P
        {"XX_MODE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxModeCd_P
		null,	//X
        {"XX_FILE_PATH_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxFilePathTxt
		null,	//R
		null,	//A
        {"XX_PAGE_SHOW_FROM_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowFromNum
        {"XX_PAGE_SHOW_TO_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowToNum
        {"XX_PAGE_SHOW_OF_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowOfNum
		null,	//Q
		null,	//Y
        {"XX_SCR_EVENT_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxScrEventNm
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

