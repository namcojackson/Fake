//This file was automatically generated by Screen Field Definition Document and XLA200710010.
// Generated on    :20160715112952000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :ScreenFieldDefinitionDocument_AddIn_XLS200710010.xla XLA200710010
/*
 *NMAL7410BMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.servlet.NMAL7410;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NMAL7410 Screen Data Message class.
 * @author
 * @version XLA200710010
 */
public class NMAL7410BMsg extends EZDBMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** GLBL_CMPY_CD*/
	public final EZDBStringItem              glblCmpyCd;

    /** XX_SCR_EVENT_NM*/
	public final EZDBStringItem              xxScrEventNm;

    /** XX_CELL_IDX*/
	public final EZDBBigDecimalItem              xxCellIdx;

    /** CR_LIST_TXT*/
	public final EZDBStringItem              crListTxt;

    /** CR_LIST_GNRN_NUM*/
	public final EZDBStringItem              crListGnrnNum;

    /** PRC_CATG_NM_LK*/
	public final EZDBStringItem              prcCatgNm_LK;

    /** PRC_CATG_NM*/
	public final EZDBStringItem              prcCatgNm;

    /** EFF_FROM_DT_FR*/
	public final EZDBDateItem              effFromDt_FR;

    /** EFF_FROM_DT_TO*/
	public final EZDBDateItem              effFromDt_TO;

    /** EFF_THRU_DT_FR*/
	public final EZDBDateItem              effThruDt_FR;

    /** EFF_THRU_DT_TO*/
	public final EZDBDateItem              effThruDt_TO;

    /** XX_PAGE_SHOW_FROM_NUM*/
	public final EZDBBigDecimalItem              xxPageShowFromNum;

    /** XX_PAGE_SHOW_TO_NUM*/
	public final EZDBBigDecimalItem              xxPageShowToNum;

    /** XX_PAGE_SHOW_TOT_NUM*/
	public final EZDBBigDecimalItem              xxPageShowTotNum;

    /** XX_PAGE_SHOW_CUR_NUM*/
	public final EZDBBigDecimalItem              xxPageShowCurNum;

    /** XX_PAGE_SHOW_OF_NUM*/
	public final EZDBBigDecimalItem              xxPageShowOfNum;

    /** XX_ROW_NUM_A*/
	public final EZDBBigDecimalItem              xxRowNum_A;

    /** A*/
	public final business.servlet.NMAL7410.NMAL7410_ABMsgArray              A;

    /** XX_FILE_DATA*/
	public final EZDBMimeSourceItem              xxFileData;

    /** Z*/
	public final business.servlet.NMAL7410.NMAL7410_ZBMsgArray              Z;


	/**
	 * NMAL7410BMsg is constructor.
	 * The initialization when the instance of NMAL7410BMsg is generated.
	 */
	public NMAL7410BMsg() {
		this(false, -1);
	}

	/**
	 * NMAL7410BMsg is constructor.
	 * The initialization when the instance of NMAL7410BMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NMAL7410BMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		glblCmpyCd = (EZDBStringItem)newItem("glblCmpyCd");
		xxScrEventNm = (EZDBStringItem)newItem("xxScrEventNm");
		xxCellIdx = (EZDBBigDecimalItem)newItem("xxCellIdx");
		crListTxt = (EZDBStringItem)newItem("crListTxt");
		crListGnrnNum = (EZDBStringItem)newItem("crListGnrnNum");
		prcCatgNm_LK = (EZDBStringItem)newItem("prcCatgNm_LK");
		prcCatgNm = (EZDBStringItem)newItem("prcCatgNm");
		effFromDt_FR = (EZDBDateItem)newItem("effFromDt_FR");
		effFromDt_TO = (EZDBDateItem)newItem("effFromDt_TO");
		effThruDt_FR = (EZDBDateItem)newItem("effThruDt_FR");
		effThruDt_TO = (EZDBDateItem)newItem("effThruDt_TO");
		xxPageShowFromNum = (EZDBBigDecimalItem)newItem("xxPageShowFromNum");
		xxPageShowToNum = (EZDBBigDecimalItem)newItem("xxPageShowToNum");
		xxPageShowTotNum = (EZDBBigDecimalItem)newItem("xxPageShowTotNum");
		xxPageShowCurNum = (EZDBBigDecimalItem)newItem("xxPageShowCurNum");
		xxPageShowOfNum = (EZDBBigDecimalItem)newItem("xxPageShowOfNum");
		xxRowNum_A = (EZDBBigDecimalItem)newItem("xxRowNum_A");
		A = (business.servlet.NMAL7410.NMAL7410_ABMsgArray)newMsgArray("A");
		xxFileData = (EZDBMimeSourceItem)newItem("xxFileData");
		Z = (business.servlet.NMAL7410.NMAL7410_ZBMsgArray)newMsgArray("Z");
	}

	/**
	 * get the type of array which is stored
	 * @return NMAL7410BMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NMAL7410BMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"glblCmpyCd", "glblCmpyCd", null, null, TYPE_HANKAKUEISU, "4", null},
	{"xxScrEventNm", "xxScrEventNm", null, null, TYPE_HANKAKUEISU, "50", null},
	{"xxCellIdx", "xxCellIdx", null, null, TYPE_SEISU_SYOSU, "4", "0"},
	{"crListTxt", "crListTxt", null, null, TYPE_HANKAKUEISU, "50", null},
	{"crListGnrnNum", "crListGnrnNum", null, null, TYPE_HANKAKUEISU, "5", null},
	{"prcCatgNm_LK", "prcCatgNm_LK", "LK", null, TYPE_HANKAKUEISU, "75", null},
	{"prcCatgNm", "prcCatgNm", null, null, TYPE_HANKAKUEISU, "75", null},
	{"effFromDt_FR", "effFromDt_FR", "FR", null, TYPE_NENTSUKIHI, "8", null},
	{"effFromDt_TO", "effFromDt_TO", "TO", null, TYPE_NENTSUKIHI, "8", null},
	{"effThruDt_FR", "effThruDt_FR", "FR", null, TYPE_NENTSUKIHI, "8", null},
	{"effThruDt_TO", "effThruDt_TO", "TO", null, TYPE_NENTSUKIHI, "8", null},
	{"xxPageShowFromNum", "xxPageShowFromNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowToNum", "xxPageShowToNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowTotNum", "xxPageShowTotNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowCurNum", "xxPageShowCurNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowOfNum", "xxPageShowOfNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxRowNum_A", "xxRowNum_A", "A", null, TYPE_SEISU_SYOSU, "5", "0"},
	{"A", "A", null, "200", "business.servlet.NMAL7410.NMAL7410_ABMsgArray", null, null},
	
	{"xxFileData", "xxFileData", null, null, TYPE_UPLOAD, null, null},
	{"Z", "Z", null, "10", "business.servlet.NMAL7410.NMAL7410_ZBMsgArray", null, null},
	
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"GLBL_CMPY_CD",  NO,  null,null,"1", NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//glblCmpyCd
        {"XX_SCR_EVENT_NM",  NO,  null,null,"1", NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxScrEventNm
        {"XX_CELL_IDX",  NO,  null,null,"1", NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxCellIdx
        {"CR_LIST_TXT",  NO,  null,null,"1", NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//crListTxt
        {"CR_LIST_GNRN_NUM",  NO,  null,null,"1", NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//crListGnrnNum
        {"PRC_CATG_NM",  NO,  null,null,"1", NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcCatgNm_LK
        {"PRC_CATG_NM",  NO,  null,null,"1", NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcCatgNm
        {"EFF_FROM_DT",  NO,  null,null,"1", NO, NO, NO, NO,null,null,UNI, SEIREKI4,  NO, YES},	//effFromDt_FR
        {"EFF_FROM_DT",  NO,  null,null,"1", NO, NO, NO, NO,null,null,UNI, SEIREKI4,  NO, YES},	//effFromDt_TO
        {"EFF_THRU_DT",  NO,  null,null,"1", NO, NO, NO, NO,null,null,UNI, SEIREKI4,  NO, YES},	//effThruDt_FR
        {"EFF_THRU_DT",  NO,  null,null,"1", NO, NO, NO, NO,null,null,UNI, SEIREKI4,  NO, YES},	//effThruDt_TO
        {"XX_PAGE_SHOW_FROM_NUM",  NO,  null,null,"1", NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowFromNum
        {"XX_PAGE_SHOW_TO_NUM",  NO,  null,null,"1", NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowToNum
        {"XX_PAGE_SHOW_TOT_NUM",  NO,  null,null,"1", NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowTotNum
        {"XX_PAGE_SHOW_CUR_NUM",  NO,  null,null,"1", NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowCurNum
        {"XX_PAGE_SHOW_OF_NUM",  NO,  null,null,"1", NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowOfNum
        {"XX_ROW_NUM",  NO,  null,null,"1", NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxRowNum_A
		null,	//A
        {"XX_FILE_DATA",  NO,  null,null,"1", NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxFileData
		null,	//Z
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

