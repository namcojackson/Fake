//This file was automatically generated by Business Component Interface Definition Document (Define Business Application Global Area) and XLA200710010.
// Generated on    :20220324142847000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :BusinessComponentInterfaceDefinitionDocumentAddIn_XLS200710010.xla XLA200710010
/*
 *NSAL0150_FSMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.blap.NSAL0150;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NSAL0150 Business Application Global Area Message class.
 * @author
 * @version XLA200710010
 */
public class NSAL0150_FSMsg extends EZDSMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** SER_NUM_F*/
	public final EZDSStringItem              serNum_F;

    /** MDSE_CD_F*/
	public final EZDSStringItem              mdseCd_F;

    /** T_MDL_NM_F*/
	public final EZDSStringItem              t_MdlNm_F;

    /** MTR_LB_DESC_TXT_F*/
	public final EZDSStringItem              mtrLbDescTxt_F;

    /** FILL_65_TXT_F*/
	public final EZDSStringItem              fill65Txt_F;

    /** DS_MTR_READ_TP_DESC_TXT_F*/
	public final EZDSStringItem              dsMtrReadTpDescTxt_F;

    /** VLD_MTR_FLG_F*/
	public final EZDSStringItem              vldMtrFlg_F;

    /** FILL_5_TXT_F*/
	public final EZDSStringItem              fill5Txt_F;

    /** XX_DT_TXT_RE*/
	public final EZDSStringItem              xxDtTxt_RE;

    /** READ_MTR_CNT_F*/
	public final EZDSBigDecimalItem              readMtrCnt_F;

    /** TEST_MTR_CNT_F*/
	public final EZDSBigDecimalItem              testMtrCnt_F;

    /** MTR_ENTRY_CMNT_TXT_F*/
	public final EZDSStringItem              mtrEntryCmntTxt_F;

    /** XX_EMP_NM_TXT_F*/
	public final EZDSStringItem              xxEmpNmTxt_F;

    /** XX_DT_TM_F*/
	public final EZDSStringItem              xxDtTm_F;

    /** MTR_READ_SRC_TP_DESC_TXT_F*/
	public final EZDSStringItem              mtrReadSrcTpDescTxt_F;

    /** SVC_INV_NUM_F*/
	public final EZDSStringItem              svcInvNum_F;

    /** XX_DT_TXT_IN*/
	public final EZDSStringItem              xxDtTxt_IN;

    /** SVC_TASK_NUM_F*/
	public final EZDSStringItem              svcTaskNum_F;

    /** DS_TEST_COPY_CLS_DESC_TXT_F*/
	public final EZDSStringItem              dsTestCopyClsDescTxt_F;

    /** BILL_TO_CUST_NM_F*/
	public final EZDSStringItem              billToCustNm_F;

    /** XX_ALL_LINE_ADDR_BI*/
	public final EZDSStringItem              xxAllLineAddr_BI;

    /** CUR_LOC_ACCT_NM_F*/
	public final EZDSStringItem              curLocAcctNm_F;

    /** XX_ALL_LINE_ADDR_IN*/
	public final EZDSStringItem              xxAllLineAddr_IN;


	/**
	 * NSAL0150_FSMsg is constructor.
	 * The initialization when the instance of NSAL0150_FSMsg is generated.
	 */
	public NSAL0150_FSMsg() {
		this(false, -1);
	}

	/**
	 * NSAL0150_FSMsg is constructor.
	 * The initialization when the instance of NSAL0150_FSMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NSAL0150_FSMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		serNum_F = (EZDSStringItem)newItem("serNum_F");
		mdseCd_F = (EZDSStringItem)newItem("mdseCd_F");
		t_MdlNm_F = (EZDSStringItem)newItem("t_MdlNm_F");
		mtrLbDescTxt_F = (EZDSStringItem)newItem("mtrLbDescTxt_F");
		fill65Txt_F = (EZDSStringItem)newItem("fill65Txt_F");
		dsMtrReadTpDescTxt_F = (EZDSStringItem)newItem("dsMtrReadTpDescTxt_F");
		vldMtrFlg_F = (EZDSStringItem)newItem("vldMtrFlg_F");
		fill5Txt_F = (EZDSStringItem)newItem("fill5Txt_F");
		xxDtTxt_RE = (EZDSStringItem)newItem("xxDtTxt_RE");
		readMtrCnt_F = (EZDSBigDecimalItem)newItem("readMtrCnt_F");
		testMtrCnt_F = (EZDSBigDecimalItem)newItem("testMtrCnt_F");
		mtrEntryCmntTxt_F = (EZDSStringItem)newItem("mtrEntryCmntTxt_F");
		xxEmpNmTxt_F = (EZDSStringItem)newItem("xxEmpNmTxt_F");
		xxDtTm_F = (EZDSStringItem)newItem("xxDtTm_F");
		mtrReadSrcTpDescTxt_F = (EZDSStringItem)newItem("mtrReadSrcTpDescTxt_F");
		svcInvNum_F = (EZDSStringItem)newItem("svcInvNum_F");
		xxDtTxt_IN = (EZDSStringItem)newItem("xxDtTxt_IN");
		svcTaskNum_F = (EZDSStringItem)newItem("svcTaskNum_F");
		dsTestCopyClsDescTxt_F = (EZDSStringItem)newItem("dsTestCopyClsDescTxt_F");
		billToCustNm_F = (EZDSStringItem)newItem("billToCustNm_F");
		xxAllLineAddr_BI = (EZDSStringItem)newItem("xxAllLineAddr_BI");
		curLocAcctNm_F = (EZDSStringItem)newItem("curLocAcctNm_F");
		xxAllLineAddr_IN = (EZDSStringItem)newItem("xxAllLineAddr_IN");
	}

	/**
	 * get the type of array which is stored
	 * @return NSAL0150_FSMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NSAL0150_FSMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"serNum_F", "serNum_F", "F", null, TYPE_HANKAKUEISU, "30", null},
	{"mdseCd_F", "mdseCd_F", "F", null, TYPE_HANKAKUEISU, "16", null},
	{"t_MdlNm_F", "t_MdlNm_F", "F", null, TYPE_HANKAKUEISU, "50", null},
	{"mtrLbDescTxt_F", "mtrLbDescTxt_F", "F", null, TYPE_HANKAKUEISU, "50", null},
	{"fill65Txt_F", "fill65Txt_F", "F", null, TYPE_HANKAKUEISU, "65", null},
	{"dsMtrReadTpDescTxt_F", "dsMtrReadTpDescTxt_F", "F", null, TYPE_HANKAKUEISU, "50", null},
	{"vldMtrFlg_F", "vldMtrFlg_F", "F", null, TYPE_HANKAKUEISU, "1", null},
	{"fill5Txt_F", "fill5Txt_F", "F", null, TYPE_HANKAKUEISU, "5", null},
	{"xxDtTxt_RE", "xxDtTxt_RE", "RE", null, TYPE_HANKAKUEISU, "10", null},
	{"readMtrCnt_F", "readMtrCnt_F", "F", null, TYPE_SEISU_SYOSU, "10", "0"},
	{"testMtrCnt_F", "testMtrCnt_F", "F", null, TYPE_SEISU_SYOSU, "10", "0"},
	{"mtrEntryCmntTxt_F", "mtrEntryCmntTxt_F", "F", null, TYPE_HANKAKUEISU, "400", null},
	{"xxEmpNmTxt_F", "xxEmpNmTxt_F", "F", null, TYPE_HANKAKUEISU, "500", null},
	{"xxDtTm_F", "xxDtTm_F", "F", null, TYPE_HANKAKUEISU, "23", null},
	{"mtrReadSrcTpDescTxt_F", "mtrReadSrcTpDescTxt_F", "F", null, TYPE_HANKAKUEISU, "60", null},
	{"svcInvNum_F", "svcInvNum_F", "F", null, TYPE_HANKAKUEISU, "13", null},
	{"xxDtTxt_IN", "xxDtTxt_IN", "IN", null, TYPE_HANKAKUEISU, "10", null},
	{"svcTaskNum_F", "svcTaskNum_F", "F", null, TYPE_HANKAKUEISU, "10", null},
	{"dsTestCopyClsDescTxt_F", "dsTestCopyClsDescTxt_F", "F", null, TYPE_HANKAKUEISU, "50", null},
	{"billToCustNm_F", "billToCustNm_F", "F", null, TYPE_HANKAKUEISU, "60", null},
	{"xxAllLineAddr_BI", "xxAllLineAddr_BI", "BI", null, TYPE_HANKAKUEISU, "400", null},
	{"curLocAcctNm_F", "curLocAcctNm_F", "F", null, TYPE_HANKAKUEISU, "360", null},
	{"xxAllLineAddr_IN", "xxAllLineAddr_IN", "IN", null, TYPE_HANKAKUEISU, "400", null},
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"SER_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//serNum_F
        {"MDSE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mdseCd_F
        {"T_MDL_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//t_MdlNm_F
        {"MTR_LB_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrLbDescTxt_F
        {"FILL_65_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//fill65Txt_F
        {"DS_MTR_READ_TP_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsMtrReadTpDescTxt_F
        {"VLD_MTR_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//vldMtrFlg_F
        {"FILL_5_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//fill5Txt_F
        {"XX_DT_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxDtTxt_RE
        {"READ_MTR_CNT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//readMtrCnt_F
        {"TEST_MTR_CNT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//testMtrCnt_F
        {"MTR_ENTRY_CMNT_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrEntryCmntTxt_F
        {"XX_EMP_NM_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxEmpNmTxt_F
        {"XX_DT_TM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxDtTm_F
        {"MTR_READ_SRC_TP_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrReadSrcTpDescTxt_F
        {"SVC_INV_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcInvNum_F
        {"XX_DT_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxDtTxt_IN
        {"SVC_TASK_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcTaskNum_F
        {"DS_TEST_COPY_CLS_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsTestCopyClsDescTxt_F
        {"BILL_TO_CUST_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//billToCustNm_F
        {"XX_ALL_LINE_ADDR",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxAllLineAddr_BI
        {"CUR_LOC_ACCT_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//curLocAcctNm_F
        {"XX_ALL_LINE_ADDR",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxAllLineAddr_IN
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

