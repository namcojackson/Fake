//This file was automatically generated by Business Component Interface Definition Document (Define Business Application Global Area) and XLA200710010.
// Generated on    :20131125111559000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :BusinessComponentInterfaceDefinitionDocumentAddIn_XLS200710010.xla XLA200710010
/*
 *NSAL0150_DSMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.blap.NSAL0150;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NSAL0150 Business Application Global Area Message class.
 * @author
 * @version XLA200710010
 */
public class NSAL0150_DSMsg extends EZDSMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** XX_NUM_DB*/
	public final EZDSBigDecimalItem              xxNum_DB;

    /** SVC_PHYS_MTR_READ_PK_D*/
	public final EZDSBigDecimalItem              svcPhysMtrReadPk_D;

    /** PHYS_MTR_ID_D*/
	public final EZDSStringItem              physMtrId_D;

    /** READ_MTR_CNT_D*/
	public final EZDSBigDecimalItem              readMtrCnt_D;

    /** TEST_MTR_CNT_D*/
	public final EZDSBigDecimalItem              testMtrCnt_D;

    /** RGTN_MTR_DT_D*/
	public final EZDSDateItem              rgtnMtrDt_D;

    /** DS_MTR_READ_TP_CD_D*/
	public final EZDSStringItem              dsMtrReadTpCd_D;

    /** INV_PROC_FLG_D*/
	public final EZDSStringItem              invProcFlg_D;

    /** MTR_READ_DT_D*/
	public final EZDSDateItem              mtrReadDt_D;

    /** MTR_READ_SRC_TP_NM_D*/
	public final EZDSStringItem              mtrReadSrcTpNm_D;

    /** EST_FLG_D*/
	public final EZDSStringItem              estFlg_D;

    /** MTR_LB_CD_D*/
	public final EZDSStringItem              mtrLbCd_D;

    /** MTR_LB_NM_D*/
	public final EZDSStringItem              mtrLbNm_D;

    /** MAX_MLY_COPY_VOL_CNT_D*/
	public final EZDSBigDecimalItem              maxMlyCopyVolCnt_D;

    /** BLLG_MTR_AVAL_FLG_D*/
	public final EZDSStringItem              bllgMtrAvalFlg_D;

    /** _EZUpdateDateTime_D*/
	public final EZDSStringItem              ezUpTime_D;

    /** _EZUpTimeZone_D*/
	public final EZDSStringItem              ezUpTimeZone_D;


	/**
	 * NSAL0150_DSMsg is constructor.
	 * The initialization when the instance of NSAL0150_DSMsg is generated.
	 */
	public NSAL0150_DSMsg() {
		this(false, -1);
	}

	/**
	 * NSAL0150_DSMsg is constructor.
	 * The initialization when the instance of NSAL0150_DSMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NSAL0150_DSMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		xxNum_DB = (EZDSBigDecimalItem)newItem("xxNum_DB");
		svcPhysMtrReadPk_D = (EZDSBigDecimalItem)newItem("svcPhysMtrReadPk_D");
		physMtrId_D = (EZDSStringItem)newItem("physMtrId_D");
		readMtrCnt_D = (EZDSBigDecimalItem)newItem("readMtrCnt_D");
		testMtrCnt_D = (EZDSBigDecimalItem)newItem("testMtrCnt_D");
		rgtnMtrDt_D = (EZDSDateItem)newItem("rgtnMtrDt_D");
		dsMtrReadTpCd_D = (EZDSStringItem)newItem("dsMtrReadTpCd_D");
		invProcFlg_D = (EZDSStringItem)newItem("invProcFlg_D");
		mtrReadDt_D = (EZDSDateItem)newItem("mtrReadDt_D");
		mtrReadSrcTpNm_D = (EZDSStringItem)newItem("mtrReadSrcTpNm_D");
		estFlg_D = (EZDSStringItem)newItem("estFlg_D");
		mtrLbCd_D = (EZDSStringItem)newItem("mtrLbCd_D");
		mtrLbNm_D = (EZDSStringItem)newItem("mtrLbNm_D");
		maxMlyCopyVolCnt_D = (EZDSBigDecimalItem)newItem("maxMlyCopyVolCnt_D");
		bllgMtrAvalFlg_D = (EZDSStringItem)newItem("bllgMtrAvalFlg_D");
		ezUpTime_D = (EZDSStringItem)newItem("ezUpTime_D");
		ezUpTimeZone_D = (EZDSStringItem)newItem("ezUpTimeZone_D");
	}

	/**
	 * get the type of array which is stored
	 * @return NSAL0150_DSMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NSAL0150_DSMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"xxNum_DB", "xxNum_DB", "DB", null, TYPE_SEISU_SYOSU, "5", "0"},
	{"svcPhysMtrReadPk_D", "svcPhysMtrReadPk_D", "D", null, TYPE_SEISU_SYOSU, "28", "0"},
	{"physMtrId_D", "physMtrId_D", "D", null, TYPE_HANKAKUEISU, "2", null},
	{"readMtrCnt_D", "readMtrCnt_D", "D", null, TYPE_SEISU_SYOSU, "10", "0"},
	{"testMtrCnt_D", "testMtrCnt_D", "D", null, TYPE_SEISU_SYOSU, "10", "0"},
	{"rgtnMtrDt_D", "rgtnMtrDt_D", "D", null, TYPE_NENTSUKIHI, "8", null},
	{"dsMtrReadTpCd_D", "dsMtrReadTpCd_D", "D", null, TYPE_HANKAKUEISU, "10", null},
	{"invProcFlg_D", "invProcFlg_D", "D", null, TYPE_HANKAKUEISU, "1", null},
	{"mtrReadDt_D", "mtrReadDt_D", "D", null, TYPE_NENTSUKIHI, "8", null},
	{"mtrReadSrcTpNm_D", "mtrReadSrcTpNm_D", "D", null, TYPE_HANKAKUEISU, "30", null},
	{"estFlg_D", "estFlg_D", "D", null, TYPE_HANKAKUEISU, "1", null},
	{"mtrLbCd_D", "mtrLbCd_D", "D", null, TYPE_HANKAKUEISU, "2", null},
	{"mtrLbNm_D", "mtrLbNm_D", "D", null, TYPE_HANKAKUEISU, "30", null},
	{"maxMlyCopyVolCnt_D", "maxMlyCopyVolCnt_D", "D", null, TYPE_SEISU_SYOSU, "12", "0"},
	{"bllgMtrAvalFlg_D", "bllgMtrAvalFlg_D", "D", null, TYPE_HANKAKUEISU, "1", null},
	{"ezUpTime_D", "ezUpTime_D", "D", null, TYPE_HANKAKUEISU, "17", null},
	{"ezUpTimeZone_D", "ezUpTimeZone_D", "D", null, TYPE_HANKAKUEISU, "5", null},
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"XX_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxNum_DB
        {"SVC_PHYS_MTR_READ_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcPhysMtrReadPk_D
        {"PHYS_MTR_ID",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//physMtrId_D
        {"READ_MTR_CNT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//readMtrCnt_D
        {"TEST_MTR_CNT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//testMtrCnt_D
        {"RGTN_MTR_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//rgtnMtrDt_D
        {"DS_MTR_READ_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsMtrReadTpCd_D
        {"INV_PROC_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//invProcFlg_D
        {"MTR_READ_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrReadDt_D
        {"MTR_READ_SRC_TP_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrReadSrcTpNm_D
        {"EST_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//estFlg_D
        {"MTR_LB_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrLbCd_D
        {"MTR_LB_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrLbNm_D
        {"MAX_MLY_COPY_VOL_CNT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//maxMlyCopyVolCnt_D
        {"BLLG_MTR_AVAL_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//bllgMtrAvalFlg_D
        {"_EZUpdateDateTime",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ezUpTime_D
        {"_EZUpTimeZone",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ezUpTimeZone_D
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

