//This file was automatically generated by Text File Layout Definition Document and XLA200710010.
// Generated on    :20180626113221000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :TextFileLayoutDefinitionDocument_AddIn_XLS200710010.xla XLA200710010
/*
 *NSAL0620F01FMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.file;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NSAL0620F01 File Layout Message class.
 * @author
 * @version XLA200710010
 */
public class NSAL0620F01FMsg extends EZDFMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** SER_NUM*/
	public final EZDFStringItem              serNum;

    /** MDSE_CD*/
	public final EZDFStringItem              mdseCd;

    /** T_MDL_NM*/
	public final EZDFStringItem              t_MdlNm;

    /** MTR_LB_DESC_TXT*/
	public final EZDFStringItem              mtrLbDescTxt;

    /** FILL_65_TXT*/
	public final EZDFStringItem              fill65Txt;

    /** DS_MTR_READ_TP_DESC_TXT*/
	public final EZDFStringItem              dsMtrReadTpDescTxt;

    /** VLD_MTR_FLG*/
	public final EZDFStringItem              vldMtrFlg;

    /** FILL_5_TXT*/
	public final EZDFStringItem              fill5Txt;

    /** XX_DT_TXT_RE*/
	public final EZDFStringItem              xxDtTxt_RE;

    /** FILL_15_TXT_ME*/
	public final EZDFStringItem              fill15Txt_ME;

    /** FILL_15_TXT_TE*/
	public final EZDFStringItem              fill15Txt_TE;

    /** MTR_ENTRY_CMNT_TXT*/
	public final EZDFStringItem              mtrEntryCmntTxt;

    /** XX_EMP_NM_TXT*/
	public final EZDFStringItem              xxEmpNmTxt;

    /** XX_DT_TM*/
	public final EZDFStringItem              xxDtTm;

    /** MTR_READ_SRC_TP_DESC_TXT*/
	public final EZDFStringItem              mtrReadSrcTpDescTxt;

    /** SVC_INV_NUM*/
	public final EZDFStringItem              svcInvNum;

    /** XX_DT_TXT_IN*/
	public final EZDFStringItem              xxDtTxt_IN;

    /** SVC_TASK_NUM*/
	public final EZDFStringItem              svcTaskNum;

    /** DS_TEST_COPY_CLS_DESC_TXT*/
	public final EZDFStringItem              dsTestCopyClsDescTxt;

    /** BILL_TO_CUST_NM*/
	public final EZDFStringItem              billToCustNm;

    /** XX_ALL_LINE_ADDR_BI*/
	public final EZDFStringItem              xxAllLineAddr_BI;

    /** CUR_LOC_ACCT_NM*/
	public final EZDFStringItem              curLocAcctNm;

    /** XX_ALL_LINE_ADDR_IN*/
	public final EZDFStringItem              xxAllLineAddr_IN;


	/**
	 * NSAL0620F01FMsg is constructor.
	 * The initialization when the instance of NSAL0620F01FMsg is generated.
	 */
	public NSAL0620F01FMsg() {
		this(false, -1);
	}

	/**
	 * NSAL0620F01FMsg is constructor.
	 * The initialization when the instance of NSAL0620F01FMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NSAL0620F01FMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		serNum = (EZDFStringItem)newItem("serNum");
		mdseCd = (EZDFStringItem)newItem("mdseCd");
		t_MdlNm = (EZDFStringItem)newItem("t_MdlNm");
		mtrLbDescTxt = (EZDFStringItem)newItem("mtrLbDescTxt");
		fill65Txt = (EZDFStringItem)newItem("fill65Txt");
		dsMtrReadTpDescTxt = (EZDFStringItem)newItem("dsMtrReadTpDescTxt");
		vldMtrFlg = (EZDFStringItem)newItem("vldMtrFlg");
		fill5Txt = (EZDFStringItem)newItem("fill5Txt");
		xxDtTxt_RE = (EZDFStringItem)newItem("xxDtTxt_RE");
		fill15Txt_ME = (EZDFStringItem)newItem("fill15Txt_ME");
		fill15Txt_TE = (EZDFStringItem)newItem("fill15Txt_TE");
		mtrEntryCmntTxt = (EZDFStringItem)newItem("mtrEntryCmntTxt");
		xxEmpNmTxt = (EZDFStringItem)newItem("xxEmpNmTxt");
		xxDtTm = (EZDFStringItem)newItem("xxDtTm");
		mtrReadSrcTpDescTxt = (EZDFStringItem)newItem("mtrReadSrcTpDescTxt");
		svcInvNum = (EZDFStringItem)newItem("svcInvNum");
		xxDtTxt_IN = (EZDFStringItem)newItem("xxDtTxt_IN");
		svcTaskNum = (EZDFStringItem)newItem("svcTaskNum");
		dsTestCopyClsDescTxt = (EZDFStringItem)newItem("dsTestCopyClsDescTxt");
		billToCustNm = (EZDFStringItem)newItem("billToCustNm");
		xxAllLineAddr_BI = (EZDFStringItem)newItem("xxAllLineAddr_BI");
		curLocAcctNm = (EZDFStringItem)newItem("curLocAcctNm");
		xxAllLineAddr_IN = (EZDFStringItem)newItem("xxAllLineAddr_IN");
	}

	/**
	 * get the type of array which is stored
	 * @return NSAL0620F01FMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NSAL0620F01FMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"serNum", "serNum", null, null, TYPE_HANKAKUEISU, "30", null},
	{"mdseCd", "mdseCd", null, null, TYPE_HANKAKUEISU, "16", null},
	{"t_MdlNm", "t_MdlNm", null, null, TYPE_HANKAKUEISU, "50", null},
	{"mtrLbDescTxt", "mtrLbDescTxt", null, null, TYPE_HANKAKUEISU, "50", null},
	{"fill65Txt", "fill65Txt", null, null, TYPE_HANKAKUEISU, "65", null},
	{"dsMtrReadTpDescTxt", "dsMtrReadTpDescTxt", null, null, TYPE_HANKAKUEISU, "50", null},
	{"vldMtrFlg", "vldMtrFlg", null, null, TYPE_HANKAKUEISU, "1", null},
	{"fill5Txt", "fill5Txt", null, null, TYPE_HANKAKUEISU, "5", null},
	{"xxDtTxt_RE", "xxDtTxt_RE", "RE", null, TYPE_HANKAKUEISU, "10", null},
	{"fill15Txt_ME", "fill15Txt_ME", "ME", null, TYPE_HANKAKUEISU, "15", null},
	{"fill15Txt_TE", "fill15Txt_TE", "TE", null, TYPE_HANKAKUEISU, "15", null},
	{"mtrEntryCmntTxt", "mtrEntryCmntTxt", null, null, TYPE_HANKAKUEISU, "400", null},
	{"xxEmpNmTxt", "xxEmpNmTxt", null, null, TYPE_HANKAKUEISU, "500", null},
	{"xxDtTm", "xxDtTm", null, null, TYPE_HANKAKUEISU, "23", null},
	{"mtrReadSrcTpDescTxt", "mtrReadSrcTpDescTxt", null, null, TYPE_HANKAKUEISU, "60", null},
	{"svcInvNum", "svcInvNum", null, null, TYPE_HANKAKUEISU, "13", null},
	{"xxDtTxt_IN", "xxDtTxt_IN", "IN", null, TYPE_HANKAKUEISU, "10", null},
	{"svcTaskNum", "svcTaskNum", null, null, TYPE_HANKAKUEISU, "10", null},
	{"dsTestCopyClsDescTxt", "dsTestCopyClsDescTxt", null, null, TYPE_HANKAKUEISU, "50", null},
	{"billToCustNm", "billToCustNm", null, null, TYPE_HANKAKUEISU, "60", null},
	{"xxAllLineAddr_BI", "xxAllLineAddr_BI", "BI", null, TYPE_HANKAKUEISU, "400", null},
	{"curLocAcctNm", "curLocAcctNm", null, null, TYPE_HANKAKUEISU, "360", null},
	{"xxAllLineAddr_IN", "xxAllLineAddr_IN", "IN", null, TYPE_HANKAKUEISU, "400", null},
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"SER_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//serNum
        {"MDSE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mdseCd
        {"T_MDL_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//t_MdlNm
        {"MTR_LB_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrLbDescTxt
        {"FILL_65_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//fill65Txt
        {"DS_MTR_READ_TP_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsMtrReadTpDescTxt
        {"VLD_MTR_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//vldMtrFlg
        {"FILL_5_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//fill5Txt
        {"XX_DT_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxDtTxt_RE
        {"FILL_15_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//fill15Txt_ME
        {"FILL_15_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//fill15Txt_TE
        {"MTR_ENTRY_CMNT_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrEntryCmntTxt
        {"XX_EMP_NM_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxEmpNmTxt
        {"XX_DT_TM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxDtTm
        {"MTR_READ_SRC_TP_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mtrReadSrcTpDescTxt
        {"SVC_INV_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcInvNum
        {"XX_DT_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxDtTxt_IN
        {"SVC_TASK_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcTaskNum
        {"DS_TEST_COPY_CLS_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsTestCopyClsDescTxt
        {"BILL_TO_CUST_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//billToCustNm
        {"XX_ALL_LINE_ADDR",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxAllLineAddr_BI
        {"CUR_LOC_ACCT_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//curLocAcctNm
        {"XX_ALL_LINE_ADDR",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxAllLineAddr_IN
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

