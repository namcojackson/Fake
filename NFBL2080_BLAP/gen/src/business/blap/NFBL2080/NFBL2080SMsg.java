//This file was automatically generated by Business Component Interface Definition Document (Define Business Application Global Area) and XLA200710010.
// Generated on    :20200519135117000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :BusinessComponentInterfaceDefinitionDocumentAddIn_XLS200710010.xla XLA200710010
/*
 *NFBL2080SMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.blap.NFBL2080;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NFBL2080 Business Application Global Area Message class.
 * @author
 * @version XLA200710010
 */
public class NFBL2080SMsg extends EZDSMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** VND_CD*/
	public final EZDSStringItem              vndCd;

    /** VND_INV_PROC_STS_CD_P1*/
	public final EZDSStringItem              vndInvProcStsCd_P1;

    /** VND_INV_PROC_STS_CD*/
	public final EZDSStringItemArray              vndInvProcStsCd;

    /** VND_INV_PROC_STS_NM*/
	public final EZDSStringItemArray              vndInvProcStsNm;

    /** INV_AR_PROC_STS_CD_P1*/
	public final EZDSStringItem              invArProcStsCd_P1;

    /** INV_AR_PROC_STS_CD*/
	public final EZDSStringItemArray              invArProcStsCd;

    /** INV_AR_PROC_STS_DESC_TXT*/
	public final EZDSStringItemArray              invArProcStsDescTxt;

    /** VND_INV_NUM*/
	public final EZDSStringItem              vndInvNum;

    /** SO_NUM*/
	public final EZDSStringItem              soNum;

    /** XX_CRAT_DT_S1*/
	public final EZDSDateItem              xxCratDt_S1;

    /** XX_CRAT_DT_S2*/
	public final EZDSDateItem              xxCratDt_S2;

    /** EDI_PO_ORD_NUM*/
	public final EZDSStringItem              ediPoOrdNum;

    /** BAT_ERR_MSG_TXT*/
	public final EZDSStringItem              batErrMsgTxt;

    /** XX_DPLY_TAB*/
	public final EZDSStringItem              xxDplyTab;

    /** XX_PAGE_SHOW_FROM_NUM_P1*/
	public final EZDSBigDecimalItem              xxPageShowFromNum_P1;

    /** XX_PAGE_SHOW_TO_NUM_P1*/
	public final EZDSBigDecimalItem              xxPageShowToNum_P1;

    /** XX_PAGE_SHOW_OF_NUM_P1*/
	public final EZDSBigDecimalItem              xxPageShowOfNum_P1;

    /** XX_PAGE_SHOW_CUR_NUM_P1*/
	public final EZDSBigDecimalItem              xxPageShowCurNum_P1;

    /** XX_PAGE_SHOW_TOT_NUM_P1*/
	public final EZDSBigDecimalItem              xxPageShowTotNum_P1;

    /** A*/
	public final business.blap.NFBL2080.NFBL2080_ASMsgArray              A;

    /** LOC_NM_H1*/
	public final EZDSStringItem              locNm_H1;

    /** VND_INV_PROC_STS_CD_H1*/
	public final EZDSStringItem              vndInvProcStsCd_H1;

    /** VND_INV_NUM_H1*/
	public final EZDSStringItem              vndInvNum_H1;

    /** VND_INV_BOL_LINE_NUM_H1*/
	public final EZDSStringItem              vndInvBolLineNum_H1;

    /** PO_ORD_NUM_H1*/
	public final EZDSStringItem              poOrdNum_H1;

    /** EDI_PO_ORD_NUM_H1*/
	public final EZDSStringItem              ediPoOrdNum_H1;

    /** SO_NUM_H1*/
	public final EZDSStringItem              soNum_H1;

    /** XX_CRAT_DT_H1*/
	public final EZDSDateItem              xxCratDt_H1;

    /** CUST_ISS_PO_NUM_H1*/
	public final EZDSStringItem              custIssPoNum_H1;

    /** INV_TP_CD_H1*/
	public final EZDSStringItem              invTpCd_H1;

    /** ITRL_INTFC_ID_H1*/
	public final EZDSStringItem              itrlIntfcId_H1;

    /** CR_DR_RSN_CD_H1*/
	public final EZDSStringItem              crDrRsnCd_H1;

    /** XX_INV_CRAT_FLG_H1*/
	public final EZDSStringItem              xxInvCratFlg_H1;

    /** BAT_ERR_MSG_TXT_HP*/
	public final EZDSStringItem              batErrMsgTxt_HP;

    /** BAT_ERR_MSG_TXT_HC*/
	public final EZDSStringItemArray              batErrMsgTxt_HC;

    /** BAT_ERR_MSG_TXT_HD*/
	public final EZDSStringItemArray              batErrMsgTxt_HD;

    /** B*/
	public final business.blap.NFBL2080.NFBL2080_BSMsgArray              B;


	/**
	 * NFBL2080SMsg is constructor.
	 * The initialization when the instance of NFBL2080SMsg is generated.
	 */
	public NFBL2080SMsg() {
		this(false, -1);
	}

	/**
	 * NFBL2080SMsg is constructor.
	 * The initialization when the instance of NFBL2080SMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NFBL2080SMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		vndCd = (EZDSStringItem)newItem("vndCd");
		vndInvProcStsCd_P1 = (EZDSStringItem)newItem("vndInvProcStsCd_P1");
		vndInvProcStsCd = (EZDSStringItemArray)newItemArray("vndInvProcStsCd");
		vndInvProcStsNm = (EZDSStringItemArray)newItemArray("vndInvProcStsNm");
		invArProcStsCd_P1 = (EZDSStringItem)newItem("invArProcStsCd_P1");
		invArProcStsCd = (EZDSStringItemArray)newItemArray("invArProcStsCd");
		invArProcStsDescTxt = (EZDSStringItemArray)newItemArray("invArProcStsDescTxt");
		vndInvNum = (EZDSStringItem)newItem("vndInvNum");
		soNum = (EZDSStringItem)newItem("soNum");
		xxCratDt_S1 = (EZDSDateItem)newItem("xxCratDt_S1");
		xxCratDt_S2 = (EZDSDateItem)newItem("xxCratDt_S2");
		ediPoOrdNum = (EZDSStringItem)newItem("ediPoOrdNum");
		batErrMsgTxt = (EZDSStringItem)newItem("batErrMsgTxt");
		xxDplyTab = (EZDSStringItem)newItem("xxDplyTab");
		xxPageShowFromNum_P1 = (EZDSBigDecimalItem)newItem("xxPageShowFromNum_P1");
		xxPageShowToNum_P1 = (EZDSBigDecimalItem)newItem("xxPageShowToNum_P1");
		xxPageShowOfNum_P1 = (EZDSBigDecimalItem)newItem("xxPageShowOfNum_P1");
		xxPageShowCurNum_P1 = (EZDSBigDecimalItem)newItem("xxPageShowCurNum_P1");
		xxPageShowTotNum_P1 = (EZDSBigDecimalItem)newItem("xxPageShowTotNum_P1");
		A = (business.blap.NFBL2080.NFBL2080_ASMsgArray)newMsgArray("A");
		locNm_H1 = (EZDSStringItem)newItem("locNm_H1");
		vndInvProcStsCd_H1 = (EZDSStringItem)newItem("vndInvProcStsCd_H1");
		vndInvNum_H1 = (EZDSStringItem)newItem("vndInvNum_H1");
		vndInvBolLineNum_H1 = (EZDSStringItem)newItem("vndInvBolLineNum_H1");
		poOrdNum_H1 = (EZDSStringItem)newItem("poOrdNum_H1");
		ediPoOrdNum_H1 = (EZDSStringItem)newItem("ediPoOrdNum_H1");
		soNum_H1 = (EZDSStringItem)newItem("soNum_H1");
		xxCratDt_H1 = (EZDSDateItem)newItem("xxCratDt_H1");
		custIssPoNum_H1 = (EZDSStringItem)newItem("custIssPoNum_H1");
		invTpCd_H1 = (EZDSStringItem)newItem("invTpCd_H1");
		itrlIntfcId_H1 = (EZDSStringItem)newItem("itrlIntfcId_H1");
		crDrRsnCd_H1 = (EZDSStringItem)newItem("crDrRsnCd_H1");
		xxInvCratFlg_H1 = (EZDSStringItem)newItem("xxInvCratFlg_H1");
		batErrMsgTxt_HP = (EZDSStringItem)newItem("batErrMsgTxt_HP");
		batErrMsgTxt_HC = (EZDSStringItemArray)newItemArray("batErrMsgTxt_HC");
		batErrMsgTxt_HD = (EZDSStringItemArray)newItemArray("batErrMsgTxt_HD");
		B = (business.blap.NFBL2080.NFBL2080_BSMsgArray)newMsgArray("B");
	}

	/**
	 * get the type of array which is stored
	 * @return NFBL2080SMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NFBL2080SMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"vndCd", "vndCd", null, null, TYPE_HANKAKUEISU, "20", null},
	{"vndInvProcStsCd_P1", "vndInvProcStsCd_P1", "P1", null, TYPE_HANKAKUEISU, "1", null},
	{"vndInvProcStsCd", "vndInvProcStsCd", null, "99", TYPE_HANKAKUEISU, "1", null},
	{"vndInvProcStsNm", "vndInvProcStsNm", null, "99", TYPE_HANKAKUEISU, "30", null},
	{"invArProcStsCd_P1", "invArProcStsCd_P1", "P1", null, TYPE_HANKAKUEISU, "1", null},
	{"invArProcStsCd", "invArProcStsCd", null, "99", TYPE_HANKAKUEISU, "1", null},
	{"invArProcStsDescTxt", "invArProcStsDescTxt", null, "99", TYPE_HANKAKUEISU, "50", null},
	{"vndInvNum", "vndInvNum", null, null, TYPE_HANKAKUEISU, "15", null},
	{"soNum", "soNum", null, null, TYPE_HANKAKUEISU, "8", null},
	{"xxCratDt_S1", "xxCratDt_S1", "S1", null, TYPE_NENTSUKIHI, "8", null},
	{"xxCratDt_S2", "xxCratDt_S2", "S2", null, TYPE_NENTSUKIHI, "8", null},
	{"ediPoOrdNum", "ediPoOrdNum", null, null, TYPE_HANKAKUEISU, "35", null},
	{"batErrMsgTxt", "batErrMsgTxt", null, null, TYPE_HANKAKUEISU, "400", null},
	{"xxDplyTab", "xxDplyTab", null, null, TYPE_HANKAKUEISU, "50", null},
	{"xxPageShowFromNum_P1", "xxPageShowFromNum_P1", "P1", null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowToNum_P1", "xxPageShowToNum_P1", "P1", null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowOfNum_P1", "xxPageShowOfNum_P1", "P1", null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowCurNum_P1", "xxPageShowCurNum_P1", "P1", null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowTotNum_P1", "xxPageShowTotNum_P1", "P1", null, TYPE_SEISU_SYOSU, "5", "0"},
	{"A", "A", null, "1000", "business.blap.NFBL2080.NFBL2080_ASMsgArray", null, null},
	
	{"locNm_H1", "locNm_H1", "H1", null, TYPE_HANKAKUEISU, "60", null},
	{"vndInvProcStsCd_H1", "vndInvProcStsCd_H1", "H1", null, TYPE_HANKAKUEISU, "1", null},
	{"vndInvNum_H1", "vndInvNum_H1", "H1", null, TYPE_HANKAKUEISU, "15", null},
	{"vndInvBolLineNum_H1", "vndInvBolLineNum_H1", "H1", null, TYPE_HANKAKUEISU, "3", null},
	{"poOrdNum_H1", "poOrdNum_H1", "H1", null, TYPE_HANKAKUEISU, "8", null},
	{"ediPoOrdNum_H1", "ediPoOrdNum_H1", "H1", null, TYPE_HANKAKUEISU, "35", null},
	{"soNum_H1", "soNum_H1", "H1", null, TYPE_HANKAKUEISU, "8", null},
	{"xxCratDt_H1", "xxCratDt_H1", "H1", null, TYPE_NENTSUKIHI, "8", null},
	{"custIssPoNum_H1", "custIssPoNum_H1", "H1", null, TYPE_HANKAKUEISU, "35", null},
	{"invTpCd_H1", "invTpCd_H1", "H1", null, TYPE_HANKAKUEISU, "1", null},
	{"itrlIntfcId_H1", "itrlIntfcId_H1", "H1", null, TYPE_HANKAKUEISU, "30", null},
	{"crDrRsnCd_H1", "crDrRsnCd_H1", "H1", null, TYPE_HANKAKUEISU, "2", null},
	{"xxInvCratFlg_H1", "xxInvCratFlg_H1", "H1", null, TYPE_HANKAKUEISU, "1", null},
	{"batErrMsgTxt_HP", "batErrMsgTxt_HP", "HP", null, TYPE_HANKAKUEISU, "400", null},
	{"batErrMsgTxt_HC", "batErrMsgTxt_HC", "HC", "99", TYPE_HANKAKUEISU, "400", null},
	{"batErrMsgTxt_HD", "batErrMsgTxt_HD", "HD", "99", TYPE_HANKAKUEISU, "400", null},
	{"B", "B", null, "1000", "business.blap.NFBL2080.NFBL2080_BSMsgArray", null, null},
	
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"VND_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//vndCd
        {"VND_INV_PROC_STS_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//vndInvProcStsCd_P1
        {"VND_INV_PROC_STS_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//vndInvProcStsCd
        {"VND_INV_PROC_STS_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//vndInvProcStsNm
        {"INV_AR_PROC_STS_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//invArProcStsCd_P1
        {"INV_AR_PROC_STS_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//invArProcStsCd
        {"INV_AR_PROC_STS_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//invArProcStsDescTxt
        {"VND_INV_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//vndInvNum
        {"SO_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//soNum
        {"XX_CRAT_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxCratDt_S1
        {"XX_CRAT_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxCratDt_S2
        {"EDI_PO_ORD_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ediPoOrdNum
        {"BAT_ERR_MSG_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//batErrMsgTxt
        {"XX_DPLY_TAB",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxDplyTab
        {"XX_PAGE_SHOW_FROM_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowFromNum_P1
        {"XX_PAGE_SHOW_TO_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowToNum_P1
        {"XX_PAGE_SHOW_OF_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowOfNum_P1
        {"XX_PAGE_SHOW_CUR_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowCurNum_P1
        {"XX_PAGE_SHOW_TOT_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowTotNum_P1
		null,	//A
        {"LOC_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//locNm_H1
        {"VND_INV_PROC_STS_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//vndInvProcStsCd_H1
        {"VND_INV_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//vndInvNum_H1
        {"VND_INV_BOL_LINE_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//vndInvBolLineNum_H1
        {"PO_ORD_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//poOrdNum_H1
        {"EDI_PO_ORD_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ediPoOrdNum_H1
        {"SO_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//soNum_H1
        {"XX_CRAT_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxCratDt_H1
        {"CUST_ISS_PO_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//custIssPoNum_H1
        {"INV_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//invTpCd_H1
        {"ITRL_INTFC_ID",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//itrlIntfcId_H1
        {"CR_DR_RSN_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//crDrRsnCd_H1
        {"XX_INV_CRAT_FLG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxInvCratFlg_H1
        {"BAT_ERR_MSG_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//batErrMsgTxt_HP
        {"BAT_ERR_MSG_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//batErrMsgTxt_HC
        {"BAT_ERR_MSG_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//batErrMsgTxt_HD
		null,	//B
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

