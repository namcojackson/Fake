//This file was automatically generated by Business Component Interface Definition Document (Business Component Interface Message Data Definition) and XLA200710010.
// Generated on    :20180601133121000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :BusinessComponentInterfaceDefinitionDocumentAddIn_XLS200710010.xla XLA200710010
/*
 *NSBL0440_ACMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.blap.NSBL0440;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NSBL0440 Business Component Interface Message class.
 * @author
 * @version XLA200710010
 */
public class NSBL0440_ACMsg extends EZDCMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** XX_CHK_BOX_A*/
	public final EZDCStringItem              xxChkBox_A;

    /** SVC_MOD_STS_PK_A*/
	public final EZDCBigDecimalItem              svcModStsPk_A;

    /** MDSE_CD_A*/
	public final EZDCStringItem              mdseCd_A;

    /** SER_NUM_A*/
	public final EZDCStringItem              serNum_A;

    /** SVC_MOD_PLN_ID_A*/
	public final EZDCStringItem              svcModPlnId_A;

    /** T_MDL_NM_A*/
	public final EZDCStringItem              t_MdlNm_A;

    /** SVC_MACH_MSTR_STS_DESC_TXT_A*/
	public final EZDCStringItem              svcMachMstrStsDescTxt_A;

    /** SVC_MOD_PROC_STS_CD_A*/
	public final EZDCStringItem              svcModProcStsCd_A;

    /** SVC_MOD_PROC_STS_DESC_TXT_A*/
	public final EZDCStringItem              svcModProcStsDescTxt_A;

    /** FLD_SVC_BR_CD_A*/
	public final EZDCStringItem              fldSvcBrCd_A;

    /** SVC_MNF_MOD_NUM_A*/
	public final EZDCStringItem              svcMnfModNum_A;

    /** TECH_NM_A*/
	public final EZDCStringItem              techNm_A;

    /** SVC_TASK_NUM_A*/
	public final EZDCStringItem              svcTaskNum_A;

    /** SVC_TASK_CLO_DT_A*/
	public final EZDCDateItem              svcTaskCloDt_A;

    /** SVC_MOD_OPT_CD_A*/
	public final EZDCStringItem              svcModOptCd_A;

    /** SVC_MOD_OPT_DT_A*/
	public final EZDCDateItem              svcModOptDt_A;

    /** SVC_MOD_NOTE_TXT_A*/
	public final EZDCStringItem              svcModNoteTxt_A;

    /** XX_REC_HIST_CRAT_TS_A*/
	public final EZDCStringItem              xxRecHistCratTs_A;

    /** XX_REC_HIST_CRAT_BY_NM_A*/
	public final EZDCStringItem              xxRecHistCratByNm_A;

    /** XX_REC_HIST_UPD_TS_A*/
	public final EZDCStringItem              xxRecHistUpdTs_A;

    /** XX_REC_HIST_UPD_BY_NM_A*/
	public final EZDCStringItem              xxRecHistUpdByNm_A;

    /** XX_REC_HIST_TBL_NM_A*/
	public final EZDCStringItem              xxRecHistTblNm_A;


	/**
	 * NSBL0440_ACMsg is constructor.
	 * The initialization when the instance of NSBL0440_ACMsg is generated.
	 */
	public NSBL0440_ACMsg() {
		this(false, -1);
	}

	/**
	 * NSBL0440_ACMsg is constructor.
	 * The initialization when the instance of NSBL0440_ACMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NSBL0440_ACMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		xxChkBox_A = (EZDCStringItem)newItem("xxChkBox_A");
		svcModStsPk_A = (EZDCBigDecimalItem)newItem("svcModStsPk_A");
		mdseCd_A = (EZDCStringItem)newItem("mdseCd_A");
		serNum_A = (EZDCStringItem)newItem("serNum_A");
		svcModPlnId_A = (EZDCStringItem)newItem("svcModPlnId_A");
		t_MdlNm_A = (EZDCStringItem)newItem("t_MdlNm_A");
		svcMachMstrStsDescTxt_A = (EZDCStringItem)newItem("svcMachMstrStsDescTxt_A");
		svcModProcStsCd_A = (EZDCStringItem)newItem("svcModProcStsCd_A");
		svcModProcStsDescTxt_A = (EZDCStringItem)newItem("svcModProcStsDescTxt_A");
		fldSvcBrCd_A = (EZDCStringItem)newItem("fldSvcBrCd_A");
		svcMnfModNum_A = (EZDCStringItem)newItem("svcMnfModNum_A");
		techNm_A = (EZDCStringItem)newItem("techNm_A");
		svcTaskNum_A = (EZDCStringItem)newItem("svcTaskNum_A");
		svcTaskCloDt_A = (EZDCDateItem)newItem("svcTaskCloDt_A");
		svcModOptCd_A = (EZDCStringItem)newItem("svcModOptCd_A");
		svcModOptDt_A = (EZDCDateItem)newItem("svcModOptDt_A");
		svcModNoteTxt_A = (EZDCStringItem)newItem("svcModNoteTxt_A");
		xxRecHistCratTs_A = (EZDCStringItem)newItem("xxRecHistCratTs_A");
		xxRecHistCratByNm_A = (EZDCStringItem)newItem("xxRecHistCratByNm_A");
		xxRecHistUpdTs_A = (EZDCStringItem)newItem("xxRecHistUpdTs_A");
		xxRecHistUpdByNm_A = (EZDCStringItem)newItem("xxRecHistUpdByNm_A");
		xxRecHistTblNm_A = (EZDCStringItem)newItem("xxRecHistTblNm_A");
	}

	/**
	 * get the type of array which is stored
	 * @return NSBL0440_ACMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NSBL0440_ACMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"xxChkBox_A", "xxChkBox_A", "A", null, TYPE_HANKAKUEIJI, "1", null},
	{"svcModStsPk_A", "svcModStsPk_A", "A", null, TYPE_SEISU_SYOSU, "28", "0"},
	{"mdseCd_A", "mdseCd_A", "A", null, TYPE_HANKAKUEISU, "16", null},
	{"serNum_A", "serNum_A", "A", null, TYPE_HANKAKUEISU, "30", null},
	{"svcModPlnId_A", "svcModPlnId_A", "A", null, TYPE_HANKAKUEISU, "16", null},
	{"t_MdlNm_A", "t_MdlNm_A", "A", null, TYPE_HANKAKUEISU, "50", null},
	{"svcMachMstrStsDescTxt_A", "svcMachMstrStsDescTxt_A", "A", null, TYPE_HANKAKUEISU, "50", null},
	{"svcModProcStsCd_A", "svcModProcStsCd_A", "A", null, TYPE_HANKAKUEISU, "2", null},
	{"svcModProcStsDescTxt_A", "svcModProcStsDescTxt_A", "A", null, TYPE_HANKAKUEISU, "50", null},
	{"fldSvcBrCd_A", "fldSvcBrCd_A", "A", null, TYPE_HANKAKUEISU, "3", null},
	{"svcMnfModNum_A", "svcMnfModNum_A", "A", null, TYPE_HANKAKUEISU, "20", null},
	{"techNm_A", "techNm_A", "A", null, TYPE_HANKAKUEISU, "45", null},
	{"svcTaskNum_A", "svcTaskNum_A", "A", null, TYPE_HANKAKUEISU, "10", null},
	{"svcTaskCloDt_A", "svcTaskCloDt_A", "A", null, TYPE_NENTSUKIHI, "8", null},
	{"svcModOptCd_A", "svcModOptCd_A", "A", null, TYPE_HANKAKUEISU, "2", null},
	{"svcModOptDt_A", "svcModOptDt_A", "A", null, TYPE_NENTSUKIHI, "8", null},
	{"svcModNoteTxt_A", "svcModNoteTxt_A", "A", null, TYPE_HANKAKUEISU, "200", null},
	{"xxRecHistCratTs_A", "xxRecHistCratTs_A", "A", null, TYPE_HANKAKUSUJI, "17", null},
	{"xxRecHistCratByNm_A", "xxRecHistCratByNm_A", "A", null, TYPE_HANKAKUEISU, "150", null},
	{"xxRecHistUpdTs_A", "xxRecHistUpdTs_A", "A", null, TYPE_HANKAKUSUJI, "17", null},
	{"xxRecHistUpdByNm_A", "xxRecHistUpdByNm_A", "A", null, TYPE_HANKAKUEISU, "150", null},
	{"xxRecHistTblNm_A", "xxRecHistTblNm_A", "A", null, TYPE_HANKAKUEISU, "60", null},
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"XX_CHK_BOX",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxChkBox_A
        {"SVC_MOD_STS_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcModStsPk_A
        {"MDSE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mdseCd_A
        {"SER_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//serNum_A
        {"SVC_MOD_PLN_ID",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcModPlnId_A
        {"T_MDL_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//t_MdlNm_A
        {"SVC_MACH_MSTR_STS_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcMachMstrStsDescTxt_A
        {"SVC_MOD_PROC_STS_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcModProcStsCd_A
        {"SVC_MOD_PROC_STS_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcModProcStsDescTxt_A
        {"FLD_SVC_BR_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//fldSvcBrCd_A
        {"SVC_MNF_MOD_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcMnfModNum_A
        {"TECH_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//techNm_A
        {"SVC_TASK_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcTaskNum_A
        {"SVC_TASK_CLO_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcTaskCloDt_A
        {"SVC_MOD_OPT_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcModOptCd_A
        {"SVC_MOD_OPT_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcModOptDt_A
        {"SVC_MOD_NOTE_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcModNoteTxt_A
        {"XX_REC_HIST_CRAT_TS",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxRecHistCratTs_A
        {"XX_REC_HIST_CRAT_BY_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxRecHistCratByNm_A
        {"XX_REC_HIST_UPD_TS",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxRecHistUpdTs_A
        {"XX_REC_HIST_UPD_BY_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxRecHistUpdByNm_A
        {"XX_REC_HIST_TBL_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxRecHistTblNm_A
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

