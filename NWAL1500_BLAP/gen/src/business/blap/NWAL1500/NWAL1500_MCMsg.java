//This file was automatically generated by Business Component Interface Definition Document (Business Component Interface Message Data Definition) and XLA200710010.
// Generated on    :20231110100844000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :BusinessComponentInterfaceDefinitionDocumentAddIn_XLS200710010.xla XLA200710010
/*
 *NWAL1500_MCMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.blap.NWAL1500;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NWAL1500 Business Component Interface Message class.
 * @author
 * @version XLA200710010
 */
public class NWAL1500_MCMsg extends EZDCMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** XX_SCR_ITEM_20_TXT_P1*/
	public final EZDCStringItem              xxScrItem20Txt_P1;

    /** RTL_WH_CD_P1*/
	public final EZDCStringItem              rtlWhCd_P1;

    /** RTL_SWH_CD_P1*/
	public final EZDCStringItem              rtlSwhCd_P1;

    /** INVTY_LOC_CD_P1*/
	public final EZDCStringItem              invtyLocCd_P1;

    /** SHIP_TO_CUST_CD_P1*/
	public final EZDCStringItem              shipToCustCd_P1;

    /** MDSE_CD_P1*/
	public final EZDCStringItem              mdseCd_P1;

    /** ORD_QTY_P1*/
	public final EZDCBigDecimalItem              ordQty_P1;

    /** RDD_DT_P1*/
	public final EZDCDateItem              rddDt_P1;

    /** MDSE_CD_PS*/
	public final EZDCStringItem              mdseCd_PS;


	/**
	 * NWAL1500_MCMsg is constructor.
	 * The initialization when the instance of NWAL1500_MCMsg is generated.
	 */
	public NWAL1500_MCMsg() {
		this(false, -1);
	}

	/**
	 * NWAL1500_MCMsg is constructor.
	 * The initialization when the instance of NWAL1500_MCMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NWAL1500_MCMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		xxScrItem20Txt_P1 = (EZDCStringItem)newItem("xxScrItem20Txt_P1");
		rtlWhCd_P1 = (EZDCStringItem)newItem("rtlWhCd_P1");
		rtlSwhCd_P1 = (EZDCStringItem)newItem("rtlSwhCd_P1");
		invtyLocCd_P1 = (EZDCStringItem)newItem("invtyLocCd_P1");
		shipToCustCd_P1 = (EZDCStringItem)newItem("shipToCustCd_P1");
		mdseCd_P1 = (EZDCStringItem)newItem("mdseCd_P1");
		ordQty_P1 = (EZDCBigDecimalItem)newItem("ordQty_P1");
		rddDt_P1 = (EZDCDateItem)newItem("rddDt_P1");
		mdseCd_PS = (EZDCStringItem)newItem("mdseCd_PS");
	}

	/**
	 * get the type of array which is stored
	 * @return NWAL1500_MCMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NWAL1500_MCMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"xxScrItem20Txt_P1", "xxScrItem20Txt_P1", "P1", null, TYPE_HANKAKUEISU, "20", null},
	{"rtlWhCd_P1", "rtlWhCd_P1", "P1", null, TYPE_HANKAKUEISU, "20", null},
	{"rtlSwhCd_P1", "rtlSwhCd_P1", "P1", null, TYPE_HANKAKUEISU, "20", null},
	{"invtyLocCd_P1", "invtyLocCd_P1", "P1", null, TYPE_HANKAKUEISU, "20", null},
	{"shipToCustCd_P1", "shipToCustCd_P1", "P1", null, TYPE_HANKAKUEISU, "20", null},
	{"mdseCd_P1", "mdseCd_P1", "P1", null, TYPE_HANKAKUEISU, "16", null},
	{"ordQty_P1", "ordQty_P1", "P1", null, TYPE_SEISU_SYOSU, "10", "0"},
	{"rddDt_P1", "rddDt_P1", "P1", null, TYPE_NENTSUKIHI, "8", null},
	{"mdseCd_PS", "mdseCd_PS", "PS", null, TYPE_HANKAKUEISU, "16", null},
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"XX_SCR_ITEM_20_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxScrItem20Txt_P1
        {"RTL_WH_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//rtlWhCd_P1
        {"RTL_SWH_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//rtlSwhCd_P1
        {"INVTY_LOC_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//invtyLocCd_P1
        {"SHIP_TO_CUST_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToCustCd_P1
        {"MDSE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mdseCd_P1
        {"ORD_QTY",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ordQty_P1
        {"RDD_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//rddDt_P1
        {"MDSE_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mdseCd_PS
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

    // Fast Save
    private static String[] EXT_DETAILS = new String[0];
    private static String[] EXT_ARRAYS = new String[0];

    private static String[] SER_KEY = new String[0];
    private static Integer[] SER_TYPE = new Integer[0];

    static protected HashMap<String, Integer> convAttrType = new HashMap<String, Integer>();

    static {
        for (int[] mapTable :EZDItemAttrDefines.TYPE_MAP_TABLE) {
            convAttrType.put(String.valueOf(mapTable[0]), mapTable[1]);
        }
    }

    static {
        List<String> listDetail = new ArrayList<String>();
        List<String> listArrays = new ArrayList<String>();

        List<String> listSerKey = new ArrayList<String>();
        List<Integer> listSerType = new ArrayList<Integer>();

        for (String[] contents : BASE_CONTENTS) {
            if (contents[3] != null) {
                try {
                    Integer.parseInt(contents[4]);
                    listArrays.add(contents[0]);
                } catch (NumberFormatException e) {
                    listDetail.add(contents[0]);
                }
            } else {
                String ezdType = contents[4];
                Integer javaTYype = ezdType2JavaType(ezdType);
                listSerKey.add(contents[0]);
                listSerType.add(javaTYype);
            }
        }
        if (!listArrays.isEmpty()) {
            EXT_ARRAYS = (String[]) listArrays.toArray(new String[listArrays.size()]);
        }
        if (!listDetail.isEmpty()) {
            EXT_DETAILS = (String[]) listDetail.toArray(new String[listDetail.size()]);
        }

        if (!listSerKey.isEmpty()) {
            SER_KEY = (String[]) listSerKey.toArray(new String[listSerKey.size()]);
        }
        if (!listSerType.isEmpty()) {
            SER_TYPE = (Integer[]) listSerType.toArray(new Integer[listSerType.size()]);
        }
    }

    protected boolean isFastWriteObject() {
        return true;
    }

    protected String[] getDetails() {
        return EXT_DETAILS;
    }

    protected String[] getArrays() {
        return EXT_ARRAYS;
    }

    protected String[] getSerKey() {
        return SER_KEY;
    }

    protected Integer[] getSerType() {
        return SER_TYPE;
    }

    static protected int ezdType2JavaType(String val) {
    	return convAttrType.get(val);
    }
    // Fast Save
}

