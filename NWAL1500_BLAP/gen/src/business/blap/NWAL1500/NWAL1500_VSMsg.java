//This file was automatically generated by Business Component Interface Definition Document (Define Business Application Global Area) and XLA200710010.
// Generated on    :20231110100848000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :BusinessComponentInterfaceDefinitionDocumentAddIn_XLS200710010.xla XLA200710010
/*
 *NWAL1500_VSMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.blap.NWAL1500;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NWAL1500 Business Application Global Area Message class.
 * @author
 * @version XLA200710010
 */
public class NWAL1500_VSMsg extends EZDSMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** SVC_CONFIG_MSTR_PK_RC*/
	public final EZDSBigDecimalItem              svcConfigMstrPk_RC;

    /** MDL_DESC_TXT_RC*/
	public final EZDSStringItem              mdlDescTxt_RC;

    /** SHIP_TO_CUST_CD_RC*/
	public final EZDSStringItem              shipToCustCd_RC;

    /** SHIP_TO_CUST_ACCT_CD_RC*/
	public final EZDSStringItem              shipToCustAcctCd_RC;

    /** BILL_TO_CUST_CD_RC*/
	public final EZDSStringItem              billToCustCd_RC;

    /** BILL_TO_CUST_ACCT_CD_RC*/
	public final EZDSStringItem              billToCustAcctCd_RC;

    /** MDL_ID_RC*/
	public final EZDSBigDecimalItem              mdlId_RC;

    /** SHIP_TO_LOC_NM_RC*/
	public final EZDSStringItem              shipToLocNm_RC;

    /** SHIP_TO_ADDL_LOC_NM_RC*/
	public final EZDSStringItem              shipToAddlLocNm_RC;

    /** SHIP_TO_FIRST_LINE_ADDR_RC*/
	public final EZDSStringItem              shipToFirstLineAddr_RC;

    /** SHIP_TO_SCD_LINE_ADDR_RC*/
	public final EZDSStringItem              shipToScdLineAddr_RC;

    /** SHIP_TO_THIRD_LINE_ADDR_RC*/
	public final EZDSStringItem              shipToThirdLineAddr_RC;

    /** SHIP_TO_FRTH_LINE_ADDR_RC*/
	public final EZDSStringItem              shipToFrthLineAddr_RC;

    /** SHIP_TO_FIRST_REF_CMNT_TXT_RC*/
	public final EZDSStringItem              shipToFirstRefCmntTxt_RC;

    /** SHIP_TO_SCD_REF_CMNT_TXT_RC*/
	public final EZDSStringItem              shipToScdRefCmntTxt_RC;

    /** SHIP_TO_POST_CD_RC*/
	public final EZDSStringItem              shipToPostCd_RC;

    /** SHIP_TO_CTY_ADDR_RC*/
	public final EZDSStringItem              shipToCtyAddr_RC;

    /** SHIP_TO_ST_CD_RC*/
	public final EZDSStringItem              shipToStCd_RC;

    /** SHIP_TO_PROV_NM_RC*/
	public final EZDSStringItem              shipToProvNm_RC;

    /** SHIP_TO_CTRY_CD_RC*/
	public final EZDSStringItem              shipToCtryCd_RC;

    /** SHIP_TO_CNTY_NM_RC*/
	public final EZDSStringItem              shipToCntyNm_RC;

    /** CSMP_CONTR_NUM_RC*/
	public final EZDSStringItem              csmpContrNum_RC;

    /** XX_IMAGE_TXT_RN*/
	public final EZDSStringItem              xxImageTxt_RN;

    /** DLR_REF_NUM_RC*/
	public final EZDSStringItem              dlrRefNum_RC;

    /** XX_IMAGE_TXT_RD*/
	public final EZDSStringItem              xxImageTxt_RD;

    /** CSMP_PRC_LIST_CD_RC*/
	public final EZDSStringItem              csmpPrcListCd_RC;

    /** PRC_CATG_NM_RC*/
	public final EZDSStringItem              prcCatgNm_RC;


	/**
	 * NWAL1500_VSMsg is constructor.
	 * The initialization when the instance of NWAL1500_VSMsg is generated.
	 */
	public NWAL1500_VSMsg() {
		this(false, -1);
	}

	/**
	 * NWAL1500_VSMsg is constructor.
	 * The initialization when the instance of NWAL1500_VSMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NWAL1500_VSMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		svcConfigMstrPk_RC = (EZDSBigDecimalItem)newItem("svcConfigMstrPk_RC");
		mdlDescTxt_RC = (EZDSStringItem)newItem("mdlDescTxt_RC");
		shipToCustCd_RC = (EZDSStringItem)newItem("shipToCustCd_RC");
		shipToCustAcctCd_RC = (EZDSStringItem)newItem("shipToCustAcctCd_RC");
		billToCustCd_RC = (EZDSStringItem)newItem("billToCustCd_RC");
		billToCustAcctCd_RC = (EZDSStringItem)newItem("billToCustAcctCd_RC");
		mdlId_RC = (EZDSBigDecimalItem)newItem("mdlId_RC");
		shipToLocNm_RC = (EZDSStringItem)newItem("shipToLocNm_RC");
		shipToAddlLocNm_RC = (EZDSStringItem)newItem("shipToAddlLocNm_RC");
		shipToFirstLineAddr_RC = (EZDSStringItem)newItem("shipToFirstLineAddr_RC");
		shipToScdLineAddr_RC = (EZDSStringItem)newItem("shipToScdLineAddr_RC");
		shipToThirdLineAddr_RC = (EZDSStringItem)newItem("shipToThirdLineAddr_RC");
		shipToFrthLineAddr_RC = (EZDSStringItem)newItem("shipToFrthLineAddr_RC");
		shipToFirstRefCmntTxt_RC = (EZDSStringItem)newItem("shipToFirstRefCmntTxt_RC");
		shipToScdRefCmntTxt_RC = (EZDSStringItem)newItem("shipToScdRefCmntTxt_RC");
		shipToPostCd_RC = (EZDSStringItem)newItem("shipToPostCd_RC");
		shipToCtyAddr_RC = (EZDSStringItem)newItem("shipToCtyAddr_RC");
		shipToStCd_RC = (EZDSStringItem)newItem("shipToStCd_RC");
		shipToProvNm_RC = (EZDSStringItem)newItem("shipToProvNm_RC");
		shipToCtryCd_RC = (EZDSStringItem)newItem("shipToCtryCd_RC");
		shipToCntyNm_RC = (EZDSStringItem)newItem("shipToCntyNm_RC");
		csmpContrNum_RC = (EZDSStringItem)newItem("csmpContrNum_RC");
		xxImageTxt_RN = (EZDSStringItem)newItem("xxImageTxt_RN");
		dlrRefNum_RC = (EZDSStringItem)newItem("dlrRefNum_RC");
		xxImageTxt_RD = (EZDSStringItem)newItem("xxImageTxt_RD");
		csmpPrcListCd_RC = (EZDSStringItem)newItem("csmpPrcListCd_RC");
		prcCatgNm_RC = (EZDSStringItem)newItem("prcCatgNm_RC");
	}

	/**
	 * get the type of array which is stored
	 * @return NWAL1500_VSMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NWAL1500_VSMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"svcConfigMstrPk_RC", "svcConfigMstrPk_RC", "RC", null, TYPE_SEISU_SYOSU, "28", "0"},
	{"mdlDescTxt_RC", "mdlDescTxt_RC", "RC", null, TYPE_HANKAKUEISU, "90", null},
	{"shipToCustCd_RC", "shipToCustCd_RC", "RC", null, TYPE_HANKAKUEISU, "20", null},
	{"shipToCustAcctCd_RC", "shipToCustAcctCd_RC", "RC", null, TYPE_HANKAKUEISU, "20", null},
	{"billToCustCd_RC", "billToCustCd_RC", "RC", null, TYPE_HANKAKUEISU, "20", null},
	{"billToCustAcctCd_RC", "billToCustAcctCd_RC", "RC", null, TYPE_HANKAKUEISU, "20", null},
	{"mdlId_RC", "mdlId_RC", "RC", null, TYPE_SEISU_SYOSU, "22", "0"},
	{"shipToLocNm_RC", "shipToLocNm_RC", "RC", null, TYPE_HANKAKUEISU, "60", null},
	{"shipToAddlLocNm_RC", "shipToAddlLocNm_RC", "RC", null, TYPE_HANKAKUEISU, "60", null},
	{"shipToFirstLineAddr_RC", "shipToFirstLineAddr_RC", "RC", null, TYPE_HANKAKUEISU, "60", null},
	{"shipToScdLineAddr_RC", "shipToScdLineAddr_RC", "RC", null, TYPE_HANKAKUEISU, "60", null},
	{"shipToThirdLineAddr_RC", "shipToThirdLineAddr_RC", "RC", null, TYPE_HANKAKUEISU, "60", null},
	{"shipToFrthLineAddr_RC", "shipToFrthLineAddr_RC", "RC", null, TYPE_HANKAKUEISU, "60", null},
	{"shipToFirstRefCmntTxt_RC", "shipToFirstRefCmntTxt_RC", "RC", null, TYPE_HANKAKUEISU, "90", null},
	{"shipToScdRefCmntTxt_RC", "shipToScdRefCmntTxt_RC", "RC", null, TYPE_HANKAKUEISU, "90", null},
	{"shipToPostCd_RC", "shipToPostCd_RC", "RC", null, TYPE_HANKAKUEISU, "15", null},
	{"shipToCtyAddr_RC", "shipToCtyAddr_RC", "RC", null, TYPE_HANKAKUEISU, "25", null},
	{"shipToStCd_RC", "shipToStCd_RC", "RC", null, TYPE_HANKAKUEISU, "2", null},
	{"shipToProvNm_RC", "shipToProvNm_RC", "RC", null, TYPE_HANKAKUEISU, "25", null},
	{"shipToCtryCd_RC", "shipToCtryCd_RC", "RC", null, TYPE_HANKAKUEISU, "3", null},
	{"shipToCntyNm_RC", "shipToCntyNm_RC", "RC", null, TYPE_HANKAKUEISU, "30", null},
	{"csmpContrNum_RC", "csmpContrNum_RC", "RC", null, TYPE_HANKAKUEISU, "15", null},
	{"xxImageTxt_RN", "xxImageTxt_RN", "RN", null, TYPE_HANKAKUEISU, "1", null},
	{"dlrRefNum_RC", "dlrRefNum_RC", "RC", null, TYPE_HANKAKUEISU, "20", null},
	{"xxImageTxt_RD", "xxImageTxt_RD", "RD", null, TYPE_HANKAKUEISU, "1", null},
	{"csmpPrcListCd_RC", "csmpPrcListCd_RC", "RC", null, TYPE_HANKAKUEISU, "10", null},
	{"prcCatgNm_RC", "prcCatgNm_RC", "RC", null, TYPE_HANKAKUEISU, "75", null},
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"SVC_CONFIG_MSTR_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//svcConfigMstrPk_RC
        {"MDL_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mdlDescTxt_RC
        {"SHIP_TO_CUST_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToCustCd_RC
        {"SHIP_TO_CUST_ACCT_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToCustAcctCd_RC
        {"BILL_TO_CUST_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//billToCustCd_RC
        {"BILL_TO_CUST_ACCT_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//billToCustAcctCd_RC
        {"MDL_ID",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//mdlId_RC
        {"SHIP_TO_LOC_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToLocNm_RC
        {"SHIP_TO_ADDL_LOC_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToAddlLocNm_RC
        {"SHIP_TO_FIRST_LINE_ADDR",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToFirstLineAddr_RC
        {"SHIP_TO_SCD_LINE_ADDR",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToScdLineAddr_RC
        {"SHIP_TO_THIRD_LINE_ADDR",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToThirdLineAddr_RC
        {"SHIP_TO_FRTH_LINE_ADDR",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToFrthLineAddr_RC
        {"SHIP_TO_FIRST_REF_CMNT_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToFirstRefCmntTxt_RC
        {"SHIP_TO_SCD_REF_CMNT_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToScdRefCmntTxt_RC
        {"SHIP_TO_POST_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToPostCd_RC
        {"SHIP_TO_CTY_ADDR",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToCtyAddr_RC
        {"SHIP_TO_ST_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToStCd_RC
        {"SHIP_TO_PROV_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToProvNm_RC
        {"SHIP_TO_CTRY_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToCtryCd_RC
        {"SHIP_TO_CNTY_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//shipToCntyNm_RC
        {"CSMP_CONTR_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//csmpContrNum_RC
        {"XX_IMAGE_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxImageTxt_RN
        {"DLR_REF_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dlrRefNum_RC
        {"XX_IMAGE_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxImageTxt_RD
        {"CSMP_PRC_LIST_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//csmpPrcListCd_RC
        {"PRC_CATG_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//prcCatgNm_RC
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

    // Fast Save
    private static String[] EXT_DETAILS = new String[0];
    private static String[] EXT_ARRAYS = new String[0];

    private static String[] SER_KEY = new String[0];
    private static Integer[] SER_TYPE = new Integer[0];

    static protected HashMap<String, Integer> convAttrType = new HashMap<String, Integer>();

    static {
        for (int[] mapTable :EZDItemAttrDefines.TYPE_MAP_TABLE) {
            convAttrType.put(String.valueOf(mapTable[0]), mapTable[1]);
        }
    }

    static {
        List<String> listDetail = new ArrayList<String>();
        List<String> listArrays = new ArrayList<String>();

        List<String> listSerKey = new ArrayList<String>();
        List<Integer> listSerType = new ArrayList<Integer>();

        for (String[] contents : BASE_CONTENTS) {
            if (contents[3] != null) {
                try {
                    Integer.parseInt(contents[4]);
                    listArrays.add(contents[0]);
                } catch (NumberFormatException e) {
                    listDetail.add(contents[0]);
                }
            } else {
                String ezdType = contents[4];
                Integer javaTYype = ezdType2JavaType(ezdType);
                listSerKey.add(contents[0]);
                listSerType.add(javaTYype);
            }
        }
        if (!listArrays.isEmpty()) {
            EXT_ARRAYS = (String[]) listArrays.toArray(new String[listArrays.size()]);
        }
        if (!listDetail.isEmpty()) {
            EXT_DETAILS = (String[]) listDetail.toArray(new String[listDetail.size()]);
        }

        if (!listSerKey.isEmpty()) {
            SER_KEY = (String[]) listSerKey.toArray(new String[listSerKey.size()]);
        }
        if (!listSerType.isEmpty()) {
            SER_TYPE = (Integer[]) listSerType.toArray(new Integer[listSerType.size()]);
        }
    }

    protected boolean isFastWriteObject() {
        return true;
    }

    protected String[] getDetails() {
        return EXT_DETAILS;
    }

    protected String[] getArrays() {
        return EXT_ARRAYS;
    }

    protected String[] getSerKey() {
        return SER_KEY;
    }

    protected Integer[] getSerType() {
        return SER_TYPE;
    }

    static protected int ezdType2JavaType(String val) {
    	return convAttrType.get(val);
    }
    // Fast Save
}

