//This file was automatically generated by Business Component Interface Definition Document (Business Component Interface Message Data Definition) and XLA200710010.
// Generated on    :20170530135910000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :BusinessComponentInterfaceDefinitionDocumentAddIn_XLS200710010.xla XLA200710010
/*
 *NMAL2830CMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.blap.NMAL2830;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NMAL2830 Business Component Interface Message class.
 * @author
 * @version XLA200710010
 */
public class NMAL2830CMsg extends EZDCMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** SRCH_OPT_NM_S*/
	public final EZDCStringItem              srchOptNm_S;

    /** SRCH_OPT_PK_S*/
	public final EZDCBigDecimalItem              srchOptPk_S;

    /** SRCH_OPT_PK_L*/
	public final EZDCBigDecimalItemArray              srchOptPk_L;

    /** SRCH_OPT_NM_L*/
	public final EZDCStringItemArray              srchOptNm_L;

    /** XX_FROM_DT*/
	public final EZDCDateItem              xxFromDt;

    /** DS_ACCT_NM*/
	public final EZDCStringItem              dsAcctNm;

    /** FILL_65_TXT_RN*/
	public final EZDCStringItem              fill65Txt_RN;

    /** ORG_NM_TN*/
	public final EZDCStringItem              orgNm_TN;

    /** XX_TP_CD_D*/
	public final EZDCStringItem              xxTpCd_D;

    /** XX_TP_CD_DL*/
	public final EZDCStringItemArray              xxTpCd_DL;

    /** XX_TP_NM_DL*/
	public final EZDCStringItemArray              xxTpNm_DL;

    /** XX_TO_DT*/
	public final EZDCDateItem              xxToDt;

    /** DS_XREF_ACCT_CD*/
	public final EZDCStringItem              dsXrefAcctCd;

    /** PSN_CD*/
	public final EZDCStringItem              psnCd;

    /** ORG_NM_ON*/
	public final EZDCStringItem              orgNm_ON;

    /** XX_CHK_BOX_RT*/
	public final EZDCStringItem              xxChkBox_RT;

    /** XX_ALL_LINE_ADDR*/
	public final EZDCStringItem              xxAllLineAddr;

    /** CTY_ADDR*/
	public final EZDCStringItem              ctyAddr;

    /** ST_CD*/
	public final EZDCStringItem              stCd;

    /** ST_CD_L*/
	public final EZDCStringItemArray              stCd_L;

    /** ST_DESC_TXT_L*/
	public final EZDCStringItemArray              stDescTxt_L;

    /** POST_CD*/
	public final EZDCStringItem              postCd;

    /** DS_ACCT_NUM*/
	public final EZDCStringItem              dsAcctNum;

    /** LOC_NUM*/
	public final EZDCStringItem              locNum;

    /** XX_PAGE_SHOW_FROM_NUM*/
	public final EZDCBigDecimalItem              xxPageShowFromNum;

    /** XX_PAGE_SHOW_TO_NUM*/
	public final EZDCBigDecimalItem              xxPageShowToNum;

    /** XX_PAGE_SHOW_OF_NUM*/
	public final EZDCBigDecimalItem              xxPageShowOfNum;

    /** XX_PAGE_SHOW_CUR_NUM*/
	public final EZDCBigDecimalItem              xxPageShowCurNum;

    /** XX_PAGE_SHOW_TOT_NUM*/
	public final EZDCBigDecimalItem              xxPageShowTotNum;

    /** XX_ROW_NUM_CH*/
	public final EZDCBigDecimalItem              xxRowNum_CH;

    /** A*/
	public final business.blap.NMAL2830.NMAL2830_ACMsgArray              A;


	/**
	 * NMAL2830CMsg is constructor.
	 * The initialization when the instance of NMAL2830CMsg is generated.
	 */
	public NMAL2830CMsg() {
		this(false, -1);
	}

	/**
	 * NMAL2830CMsg is constructor.
	 * The initialization when the instance of NMAL2830CMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NMAL2830CMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		srchOptNm_S = (EZDCStringItem)newItem("srchOptNm_S");
		srchOptPk_S = (EZDCBigDecimalItem)newItem("srchOptPk_S");
		srchOptPk_L = (EZDCBigDecimalItemArray)newItemArray("srchOptPk_L");
		srchOptNm_L = (EZDCStringItemArray)newItemArray("srchOptNm_L");
		xxFromDt = (EZDCDateItem)newItem("xxFromDt");
		dsAcctNm = (EZDCStringItem)newItem("dsAcctNm");
		fill65Txt_RN = (EZDCStringItem)newItem("fill65Txt_RN");
		orgNm_TN = (EZDCStringItem)newItem("orgNm_TN");
		xxTpCd_D = (EZDCStringItem)newItem("xxTpCd_D");
		xxTpCd_DL = (EZDCStringItemArray)newItemArray("xxTpCd_DL");
		xxTpNm_DL = (EZDCStringItemArray)newItemArray("xxTpNm_DL");
		xxToDt = (EZDCDateItem)newItem("xxToDt");
		dsXrefAcctCd = (EZDCStringItem)newItem("dsXrefAcctCd");
		psnCd = (EZDCStringItem)newItem("psnCd");
		orgNm_ON = (EZDCStringItem)newItem("orgNm_ON");
		xxChkBox_RT = (EZDCStringItem)newItem("xxChkBox_RT");
		xxAllLineAddr = (EZDCStringItem)newItem("xxAllLineAddr");
		ctyAddr = (EZDCStringItem)newItem("ctyAddr");
		stCd = (EZDCStringItem)newItem("stCd");
		stCd_L = (EZDCStringItemArray)newItemArray("stCd_L");
		stDescTxt_L = (EZDCStringItemArray)newItemArray("stDescTxt_L");
		postCd = (EZDCStringItem)newItem("postCd");
		dsAcctNum = (EZDCStringItem)newItem("dsAcctNum");
		locNum = (EZDCStringItem)newItem("locNum");
		xxPageShowFromNum = (EZDCBigDecimalItem)newItem("xxPageShowFromNum");
		xxPageShowToNum = (EZDCBigDecimalItem)newItem("xxPageShowToNum");
		xxPageShowOfNum = (EZDCBigDecimalItem)newItem("xxPageShowOfNum");
		xxPageShowCurNum = (EZDCBigDecimalItem)newItem("xxPageShowCurNum");
		xxPageShowTotNum = (EZDCBigDecimalItem)newItem("xxPageShowTotNum");
		xxRowNum_CH = (EZDCBigDecimalItem)newItem("xxRowNum_CH");
		A = (business.blap.NMAL2830.NMAL2830_ACMsgArray)newMsgArray("A");
	}

	/**
	 * get the type of array which is stored
	 * @return NMAL2830CMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NMAL2830CMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"srchOptNm_S", "srchOptNm_S", "S", null, TYPE_HANKAKUEISU, "50", null},
	{"srchOptPk_S", "srchOptPk_S", "S", null, TYPE_SEISU_SYOSU, "28", "0"},
	{"srchOptPk_L", "srchOptPk_L", "L", "99", TYPE_SEISU_SYOSU, "28", "0"},
	{"srchOptNm_L", "srchOptNm_L", "L", "99", TYPE_HANKAKUEISU, "50", null},
	{"xxFromDt", "xxFromDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"dsAcctNm", "dsAcctNm", null, null, TYPE_HANKAKUEISU, "360", null},
	{"fill65Txt_RN", "fill65Txt_RN", "RN", null, TYPE_HANKAKUEISU, "65", null},
	{"orgNm_TN", "orgNm_TN", "TN", null, TYPE_HANKAKUEISU, "50", null},
	{"xxTpCd_D", "xxTpCd_D", "D", null, TYPE_HANKAKUEISU, "1", null},
	{"xxTpCd_DL", "xxTpCd_DL", "DL", "99", TYPE_HANKAKUEISU, "1", null},
	{"xxTpNm_DL", "xxTpNm_DL", "DL", "99", TYPE_HANKAKUEISU, "10", null},
	{"xxToDt", "xxToDt", null, null, TYPE_NENTSUKIHI, "8", null},
	{"dsXrefAcctCd", "dsXrefAcctCd", null, null, TYPE_HANKAKUEISU, "60", null},
	{"psnCd", "psnCd", null, null, TYPE_HANKAKUEISU, "8", null},
	{"orgNm_ON", "orgNm_ON", "ON", null, TYPE_HANKAKUEISU, "50", null},
	{"xxChkBox_RT", "xxChkBox_RT", "RT", null, TYPE_HANKAKUEIJI, "1", null},
	{"xxAllLineAddr", "xxAllLineAddr", null, null, TYPE_HANKAKUEISU, "400", null},
	{"ctyAddr", "ctyAddr", null, null, TYPE_HANKAKUEISU, "25", null},
	{"stCd", "stCd", null, null, TYPE_HANKAKUEISU, "2", null},
	{"stCd_L", "stCd_L", "L", "99", TYPE_HANKAKUEISU, "2", null},
	{"stDescTxt_L", "stDescTxt_L", "L", "99", TYPE_HANKAKUEISU, "50", null},
	{"postCd", "postCd", null, null, TYPE_HANKAKUEISU, "15", null},
	{"dsAcctNum", "dsAcctNum", null, null, TYPE_HANKAKUEISU, "20", null},
	{"locNum", "locNum", null, null, TYPE_HANKAKUEISU, "30", null},
	{"xxPageShowFromNum", "xxPageShowFromNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowToNum", "xxPageShowToNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowOfNum", "xxPageShowOfNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowCurNum", "xxPageShowCurNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxPageShowTotNum", "xxPageShowTotNum", null, null, TYPE_SEISU_SYOSU, "5", "0"},
	{"xxRowNum_CH", "xxRowNum_CH", "CH", null, TYPE_SEISU_SYOSU, "5", "0"},
	{"A", "A", null, "120", "business.blap.NMAL2830.NMAL2830_ACMsgArray", null, null},
	
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"SRCH_OPT_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//srchOptNm_S
        {"SRCH_OPT_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//srchOptPk_S
        {"SRCH_OPT_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//srchOptPk_L
        {"SRCH_OPT_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//srchOptNm_L
        {"XX_FROM_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxFromDt
        {"DS_ACCT_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsAcctNm
        {"FILL_65_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//fill65Txt_RN
        {"ORG_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//orgNm_TN
        {"XX_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxTpCd_D
        {"XX_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxTpCd_DL
        {"XX_TP_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxTpNm_DL
        {"XX_TO_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxToDt
        {"DS_XREF_ACCT_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsXrefAcctCd
        {"PSN_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//psnCd
        {"ORG_NM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//orgNm_ON
        {"XX_CHK_BOX",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxChkBox_RT
        {"XX_ALL_LINE_ADDR",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxAllLineAddr
        {"CTY_ADDR",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ctyAddr
        {"ST_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//stCd
        {"ST_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//stCd_L
        {"ST_DESC_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//stDescTxt_L
        {"POST_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//postCd
        {"DS_ACCT_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsAcctNum
        {"LOC_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//locNum
        {"XX_PAGE_SHOW_FROM_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowFromNum
        {"XX_PAGE_SHOW_TO_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowToNum
        {"XX_PAGE_SHOW_OF_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowOfNum
        {"XX_PAGE_SHOW_CUR_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowCurNum
        {"XX_PAGE_SHOW_TOT_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxPageShowTotNum
        {"XX_ROW_NUM",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxRowNum_CH
		null,	//A
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

