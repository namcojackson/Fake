//This file was automatically generated by Business Component Interface Definition Document (Business Component Interface Message Data Definition) and XLA200710010.
// Generated on    :20090820204703000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :BusinessComponentInterfaceDefinitionDocumentAddIn_XLS200710010.xla XLA200710010
/*
 *ZZIL0010_ACMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.blap.ZZIL0010;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is ZZIL0010 Business Component Interface Message class.
 * @author
 * @version XLA200710010
 */
public class ZZIL0010_ACMsg extends EZDCMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** TRANSACTION_ID_A*/
	public final EZDCBigDecimalItem              transactionId_A;

    /** _EZRegistrationDateTime_A*/
	public final EZDCStringItem              ezInTime_A;

    /** _EZUpdateDateTime_A*/
	public final EZDCStringItem              ezUpTime_A;

    /** PROCESSED_REC_CNT_A*/
	public final EZDCBigDecimalItem              processedRecCnt_A;

    /** FAILED_REC_CNT_A*/
	public final EZDCBigDecimalItem              failedRecCnt_A;

    /** PROCESSED_FLAG_A*/
	public final EZDCStringItem              processedFlag_A;

    /** PROCESSED_FLAG_AS*/
	public final EZDCStringItem              processedFlag_AS;


	/**
	 * ZZIL0010_ACMsg is constructor.
	 * The initialization when the instance of ZZIL0010_ACMsg is generated.
	 */
	public ZZIL0010_ACMsg() {
		this(false, -1);
	}

	/**
	 * ZZIL0010_ACMsg is constructor.
	 * The initialization when the instance of ZZIL0010_ACMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public ZZIL0010_ACMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		transactionId_A = (EZDCBigDecimalItem)newItem("transactionId_A");
		ezInTime_A = (EZDCStringItem)newItem("ezInTime_A");
		ezUpTime_A = (EZDCStringItem)newItem("ezUpTime_A");
		processedRecCnt_A = (EZDCBigDecimalItem)newItem("processedRecCnt_A");
		failedRecCnt_A = (EZDCBigDecimalItem)newItem("failedRecCnt_A");
		processedFlag_A = (EZDCStringItem)newItem("processedFlag_A");
		processedFlag_AS = (EZDCStringItem)newItem("processedFlag_AS");
	}

	/**
	 * get the type of array which is stored
	 * @return ZZIL0010_ACMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new ZZIL0010_ACMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"transactionId_A", "transactionId_A", "A", null, TYPE_SEISU_SYOSU, "30", "0"},
	{"ezInTime_A", "ezInTime_A", "A", null, TYPE_HANKAKUEISU, "17", null},
	{"ezUpTime_A", "ezUpTime_A", "A", null, TYPE_HANKAKUEISU, "17", null},
	{"processedRecCnt_A", "processedRecCnt_A", "A", null, TYPE_SEISU_SYOSU, "30", "0"},
	{"failedRecCnt_A", "failedRecCnt_A", "A", null, TYPE_SEISU_SYOSU, "30", "0"},
	{"processedFlag_A", "processedFlag_A", "A", null, TYPE_HANKAKUEISU, "1", null},
	{"processedFlag_AS", "processedFlag_AS", "AS", null, TYPE_HANKAKUEISU, "1", null},
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"TRANSACTION_ID",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//transactionId_A
        {"_EZRegistrationDateTime",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ezInTime_A
        {"_EZUpdateDateTime",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ezUpTime_A
        {"PROCESSED_REC_CNT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//processedRecCnt_A
        {"FAILED_REC_CNT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//failedRecCnt_A
        {"PROCESSED_FLAG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//processedFlag_A
        {"PROCESSED_FLAG",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//processedFlag_AS
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

