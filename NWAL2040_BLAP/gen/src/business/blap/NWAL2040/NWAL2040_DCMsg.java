//This file was automatically generated by Business Component Interface Definition Document (Business Component Interface Message Data Definition) and XLA200710010.
// Generated on    :20170915193142000
// Velocity macro:EZDMsg.vm V200607010
// Excel Add-in :BusinessComponentInterfaceDefinitionDocumentAddIn_XLS200710010.xla XLA200710010
/*
 *NWAL2040_DCMsg.java  Copyright  FUJITSU LIMITED 2007
 *Outline :
 *    1.
 *Release:
 *    No.  Date  Ver  Updater  Content
 *    1
 *
 */
package business.blap.NWAL2040;

import parts.common.*;
import parts.common.EZDSchemaItemDefines;

/**
 * It is NWAL2040 Business Component Interface Message class.
 * @author
 * @version XLA200710010
 */
public class NWAL2040_DCMsg extends EZDCMsg implements EZDSchemaItemDefines {

	// Serial Version UID
	private static final long serialVersionUID = 1L;

	// Data Definition
    /** XX_CHK_BOX_D1*/
	public final EZDCStringItem              xxChkBox_D1;

    /** DS_ORD_CATG_CD_D1*/
	public final EZDCStringItem              dsOrdCatgCd_D1;

    /** DS_ORD_TP_CD_D1*/
	public final EZDCStringItem              dsOrdTpCd_D1;

    /** FIRST_BIZ_CTX_ATTRB_TXT_D1*/
	public final EZDCStringItem              firstBizCtxAttrbTxt_D1;

    /** SCD_BIZ_CTX_ATTRB_TXT_D1*/
	public final EZDCStringItem              scdBizCtxAttrbTxt_D1;

    /** EFF_FROM_DT_D1*/
	public final EZDCDateItem              effFromDt_D1;

    /** EFF_THRU_DT_D1*/
	public final EZDCDateItem              effThruDt_D1;

    /** ORD_CATG_BIZ_CTX_PK_D1*/
	public final EZDCBigDecimalItem              ordCatgBizCtxPk_D1;

    /** _EZUpdateDateTime_D1*/
	public final EZDCStringItem              ezUpTime_D1;

    /** _EZUpTimeZone_D1*/
	public final EZDCStringItem              ezUpTimeZone_D1;


	/**
	 * NWAL2040_DCMsg is constructor.
	 * The initialization when the instance of NWAL2040_DCMsg is generated.
	 */
	public NWAL2040_DCMsg() {
		this(false, -1);
	}

	/**
	 * NWAL2040_DCMsg is constructor.
	 * The initialization when the instance of NWAL2040_DCMsg is generated.
	 * @param child  Flag whether it is child message
	 * @param eleNo  Index Number of array
	 */
	public NWAL2040_DCMsg(boolean child, int eleNo) {
		super(child, eleNo);

		// Initialization of item

		xxChkBox_D1 = (EZDCStringItem)newItem("xxChkBox_D1");
		dsOrdCatgCd_D1 = (EZDCStringItem)newItem("dsOrdCatgCd_D1");
		dsOrdTpCd_D1 = (EZDCStringItem)newItem("dsOrdTpCd_D1");
		firstBizCtxAttrbTxt_D1 = (EZDCStringItem)newItem("firstBizCtxAttrbTxt_D1");
		scdBizCtxAttrbTxt_D1 = (EZDCStringItem)newItem("scdBizCtxAttrbTxt_D1");
		effFromDt_D1 = (EZDCDateItem)newItem("effFromDt_D1");
		effThruDt_D1 = (EZDCDateItem)newItem("effThruDt_D1");
		ordCatgBizCtxPk_D1 = (EZDCBigDecimalItem)newItem("ordCatgBizCtxPk_D1");
		ezUpTime_D1 = (EZDCStringItem)newItem("ezUpTime_D1");
		ezUpTimeZone_D1 = (EZDCStringItem)newItem("ezUpTimeZone_D1");
	}

	/**
	 * get the type of array which is stored
	 * @return NWAL2040_DCMsgArray
	 */
	public EZDMsgArray getMyArray() {
		return new NWAL2040_DCMsgArray();
	}


	/**
	 * Array of schema data(Basic data)
	 */
	private static final String[][] BASE_CONTENTS = {

	{"xxChkBox_D1", "xxChkBox_D1", "D1", null, TYPE_HANKAKUEIJI, "1", null},
	{"dsOrdCatgCd_D1", "dsOrdCatgCd_D1", "D1", null, TYPE_HANKAKUEISU, "4", null},
	{"dsOrdTpCd_D1", "dsOrdTpCd_D1", "D1", null, TYPE_HANKAKUEISU, "4", null},
	{"firstBizCtxAttrbTxt_D1", "firstBizCtxAttrbTxt_D1", "D1", null, TYPE_HANKAKUEISU, "100", null},
	{"scdBizCtxAttrbTxt_D1", "scdBizCtxAttrbTxt_D1", "D1", null, TYPE_HANKAKUEISU, "100", null},
	{"effFromDt_D1", "effFromDt_D1", "D1", null, TYPE_NENTSUKIHI, "8", null},
	{"effThruDt_D1", "effThruDt_D1", "D1", null, TYPE_NENTSUKIHI, "8", null},
	{"ordCatgBizCtxPk_D1", "ordCatgBizCtxPk_D1", "D1", null, TYPE_SEISU_SYOSU, "28", "0"},
	{"ezUpTime_D1", "ezUpTime_D1", "D1", null, TYPE_HANKAKUEISU, "17", null},
	{"ezUpTimeZone_D1", "ezUpTimeZone_D1", "D1", null, TYPE_HANKAKUEISU, "5", null},
	};

	/**
	 * Array of schema data(Visible Field)
	 */
	private static final String[][] DISP_CONTENTS = {

        {"XX_CHK_BOX",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//xxChkBox_D1
        {"DS_ORD_CATG_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsOrdCatgCd_D1
        {"DS_ORD_TP_CD",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//dsOrdTpCd_D1
        {"FIRST_BIZ_CTX_ATTRB_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//firstBizCtxAttrbTxt_D1
        {"SCD_BIZ_CTX_ATTRB_TXT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//scdBizCtxAttrbTxt_D1
        {"EFF_FROM_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//effFromDt_D1
        {"EFF_THRU_DT",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//effThruDt_D1
        {"ORD_CATG_BIZ_CTX_PK",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ordCatgBizCtxPk_D1
        {"_EZUpdateDateTime",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ezUpTime_D1
        {"_EZUpTimeZone",  NO,  null,null,null, NO, NO, NO, NO,null,null,null, null,  NO,  NO},	//ezUpTimeZone_D1
	};

	/**
	 * get Array of common (basic) data.
	 * @return Array of common (basis) data
	 */
	protected String[][] getBaseContents() {
		return BASE_CONTENTS;
	}

	/**
	 * get Array of Display Field.
	 * @return Array of  Display  Fields
	 */
	protected String[][] getDispContents() {
		return DISP_CONTENTS;
	}

}

